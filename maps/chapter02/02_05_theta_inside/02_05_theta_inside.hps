#include "interfaces/Map_Interface.hps"
//#include "base/AchievementHandler_Types.hps"
#include "base/InputHandler_Types.hps"
#include "helpers/helper_game.hps"
#include "helpers/helper_areas.hps"
#include "helpers/helper_effects.hps"
#include "helpers/helper_sequences.hps"
#include "helpers/helper_ai.hps"
#include "helpers/helper_player.hps"
#include "helper_imgui_cath_portrait.hps"
#include "helper_imgui_station_app_error.hps"
#include "helper_imgui_station.hps"

#include "helper_custom_depth.hps"

#include "helper_font.hps"
 
//--------------------------------------------------

float gfServerResetWaitTime = 25.f;
float gfServerResetTimeoutTime = 45.f;
cVector2f gvBanterTimespans = cVector2f(20.0f,40.0f);	// Span of time between banter moments

//Ambient music player
const tString gsThetaMusicStage1 = "02_05_exploration";
const tString gsThetaMusicStage2 = "02_05_exploration2";
const tString gsThetaMusicStage3 = "02_05_exploration3";
 
//--------------------------------------------------

enum eSimulationTerminalState
{
	eSimulationTerminalState_NoScanChip,
	eSimulationTerminalState_ScanSelection,
	eSimulationTerminalState_ScanUpload,
	eSimulationTerminalState_SimulationSetup,
	eSimulationTerminalState_SimulationRunning,
	eSimulationTerminalState_DeleteMenu,
	eSimulationTerminalState_Shutdown,
}
 
//--------------------------------------------------

enum eBrainScanPerson
{
	eBrainScanPerson_Javid,
	eBrainScanPerson_Scan_2,
	eBrainScanPerson_Brandon,
	eBrainScanPerson_Nicolai,
	eBrainScanPerson_Maggie,
	eBrainScanPerson_Nadine,
	eBrainScanPerson_Scan_7,
	eBrainScanPerson_Scan_8,
	
	eBrainScanPerson_LastEnum,
}
 
//--------------------------------------------------

enum eBrainScanEnvironment
{
	eBrainScanEnvironment_None,
	eBrainScanEnvironment_Beach,
	eBrainScanEnvironment_Cabin,
	eBrainScanEnvironment_ScanRoom,
	
	eBrainScanEnvironment_LastEnum,
}
 
//--------------------------------------------------

enum eScanRoomFile
{
	eScanRoomFile_None = -1,
	
	eScanRoomFile_Scans_Start,
	eScanRoomFile_Scans_Scan_1,
	eScanRoomFile_Scans_Scan_2,
	eScanRoomFile_Scans_End,
	
	eScanRoomFile_Legacy_Start,
	eScanRoomFile_Legacy_Extra_1,
	eScanRoomFile_Legacy_DavidM,
	eScanRoomFile_Legacy_Extra_2,
	eScanRoomFile_Legacy_SimonJ,
	eScanRoomFile_Legacy_End,
	
	eScanRoomFile_Environments_Start,
	eScanRoomFile_Environments_Extra_1,
	eScanRoomFile_Environments_ScanRoom,
	eScanRoomFile_Environments_Beach,
	eScanRoomFile_Environments_Extra_2,
	eScanRoomFile_Environments_End,
	
	eScanRoomFile_ChipScans_Start,
	eScanRoomFile_ChipScans_Javid,
	eScanRoomFile_ChipScans_Scan_2,
	eScanRoomFile_ChipScans_Brandon,
	eScanRoomFile_ChipScans_Nicolai,
	eScanRoomFile_ChipScans_Maggie,
	eScanRoomFile_ChipScans_Nadine,
	eScanRoomFile_ChipScans_Scan_7,
	eScanRoomFile_ChipScans_Scan_8,
	eScanRoomFile_ChipScans_End,
	
	eScanRoomFile_ChipEnvs_Start,
	eScanRoomFile_ChipEnvs_Beach,
	eScanRoomFile_ChipEnvs_Cabin,
	eScanRoomFile_ChipEnvs_ScanRoom,
	eScanRoomFile_ChipEnvs_End,
}

enum eStatusTerminalState
{
	eStatusTerminalState_MainMenu = -1,
	eStatusTerminalState_Status,
	eStatusTerminalState_Map,
	eStatusTerminalState_CrewInfo
}
 
//--------------------------------------------------
 
class cScrMap : iScrMap
{
	//--------------------------------------------

	/////////////////////////////////////////
	// ==============
	// MAIN CALLBACKS
	// ==============
	//{//////////////////////////////////////

	//-------------------------------------------------------

	////////////////////////////
	// Preload
	void PreloadData()
	{
		// Gui
		StationGui_PreloadDefault();
		OmnitoolGui_Preload();
		ImGui_PreloadImage("brandon_mugshot");
		ImGui_PreloadImage("folder_open_icon");
		ImGui_PreloadImage("folder_icon");
		ImGui_PreloadImage("file_icon");
		ImGui_PreloadImage("02_05_StatusTerminal_Floor1");
		ImGui_PreloadImage("02_05_StatusTerminal_Floor2");
		ImGui_PreloadImage("02_05_StatusTerminal_Floor3");

		// Player hands
		PlayerHands_PreloadHandModel_Diving();
		
		// Particles
		ParticleSystem_Preload("elec_spark_large_continuous.ps");
		ParticleSystem_Preload("elec_spark_subway_continuous.ps");
		ParticleSystem_Preload("elec_sparks_sideways_cont.ps");
		ParticleSystem_Preload("02_05_splash_dunbat.ps");
		ParticleSystem_Preload("elec_spark_huge_oneshot.ps");
		ParticleSystem_Preload("elec_spark_physics_oneshot.ps");
	}
	
	//-------------------------------------------------------

	////////////////////////////
	// Run first time starting map
	void OnStart()
	{
		CathTool_ResetScreen(eCathToolVariant_CathDelta);
		Map_SetUnderwater(false);
		
		bool bDoAirlockOpens=true;
		/////////////////////////
		// Debug
		if(cLux_ScriptDebugOn())
		{
			//Add any debug stuff here
			
			cLux_SetDebugInfoWindowText("Text that should show up when pressing F1");
			bDoAirlockOpens=false;
		}
		
		if(bDoAirlockOpens)
		{
			Lamp_SetLit("HubRoomLamp_*", true, false);
			Lamp_SetLit("HubRoomLamp_Door_*", false, false);
			Lamp_SetLit("AirlockLamp_*", true, false);
		
			SequenceAirlockDoorOpens("");
	
			Entity_SetActive("AirlockPanelToolArea_1", false);
		}
		
		//////////////////////////////////////////
		// Player setup
		Player_SetAmbientLight_Indoors();
		
		PlayerHands_SetHandModel_Diving();
		
		PlayerEnergy_SetFlowerSwallows(true);
		PlayerEnergy_SetAllowCathComment(true);
		
		SetupExitAirlockTunnel();
		SetupStartUpCatherine();
		SetupServerRoom();
		SetupManipulateBrainScan();
		SetupStartLargeRobot();
		SetupFindWayToSurvivors();
		
		SetupBrainScanTerminal();
		
		SetupCath();
		SetupDunbat();
		SetupDunbatCamera();
		
		SetupLegacyTerminal();
		SetupDoorSeals();
		SetupSimulation();
		SetupMirror();
		
		///SETUP DREAMERS
		Entity_PlayAnimation("puppet_dreamer_male_1", "stuck_on_wall", 0, true, true);
		Entity_PlayAnimation("puppet_dreamer_female_1", "puppet_victim_lying_against_wall", 0, true, true);
		Entity_PlayAnimation("puppet_dreamer_male_2", "puppet_victim_lying", 0, true, true);
				
		//////////////////////////
		///PRELOAD AUDIO
		Sound_PreloadProject("02_05_theta");
		Sound_PreloadGroup("Flashback/Level/02_05", true);
		
		LastOnSoma_SetText("02_05_theta_inside_1");
		
		EyeTracking_RegisterEntity("LookAtBass", true, false, true, 15.0f, 4.0f);
	}

	//-------------------------------------------------------

	////////////////////////////
	// Run when entering map
	void OnEnter()
	{
		MainMenu_SetBGPhase(eMainMenuPhase_2_4_To_3_3);
	}

	//-------------------------------------------------------

	////////////////////////////
	// Run when leaving map
	void OnLeave()
	{
		Player_SetSlowStandupMotion(false);
		PlayerEnergy_SetAllowCathComment(false);
	}
	
	//-------------------------------------------------------

	////////////////////////////
	// To get when player makes input (mostly used for debug)
	bool mbToggle = false;
	void OnAction(int alAction, bool abPressed) 
	{
		if(abPressed==false) return;
		
		////////////////////////////
		// Super debug button
		if (alAction == eAction_Test1)
		{
			cLuxClosestEntityData pData;
			if (!cLux_GetClosestEntity(cLux_GetPlayer().GetCamera().GetPosition(),cLux_GetPlayer().GetCamera().GetForward(),100, 0, false, pData))
				return;
				
			tString sFocusEntity = pData.mpEntity.GetName();
			
			SlideDoor_SetClosed(sFocusEntity, false, false);
			Button_SetDisabled(sFocusEntity, !Button_IsDisabled(sFocusEntity), true);
			Button_SetSwitchedOn(sFocusEntity, !Button_IsSwitchedOn(sFocusEntity), true);
		}
		
		if(alAction == eAction_Test2)
		{	
			mbKnowsAboutBrandon = true;
			mSimulationTerminalState = eSimulationTerminalState_SimulationSetup;
			mlCluesFound = 2;
			mbFixedServer = true;
			mbCopiedScanRoom = true;
			mlAmbientStage ++;
			Terminal_SetImGuiStateInt("BrainScanSimulationTerminal", "BrainScanChip_LoadState", 3);
			Terminal_SetImGuiStateInt("BrainScanSimulationTerminal", "EnvironmentChip_LoadState", 3);
		}
		
		if (alAction == eAction_Test3)
		{
			mbKnowsAboutBrandon=true;
			mbFoundBrandonsRoom = false;
			OnBrandonDoorTrigger("","",1);
		}
		
		if (alAction == eAction_Test4)
		{
			SequenceStartDunbat("");
		}
		
		if (alAction == eAction_Test5)
		{
			Lamp_SetLit("DockPoolLamp_*", true, false);
			SequenceDunbatFailure("");
		}
		
		if (alAction == eAction_Test6)
		{
			mbFixedServer = true;
			if (mbVisitedSimRoom)
				Entity_AddCollideCallback("Player", "SimulationAreaTrigger", "CollisionSimAreaServersFixed");

			SequenceServerFixed("");
		}
		
		if (alAction == eAction_Test7)
		{
			Entity_CallEntityInteract("BrainScanChip");
			Entity_CallEntityInteract("EnvironmentChip");
		}
		
		if (alAction == eAction_Test8)
		{
			Entity_SetEffectsActive("ServerRoomBrokenServer_*", mbToggle, true);
			mbToggle = !mbToggle;
			ActivateAuxDoorPanels();
		}
		
		if (alAction == eAction_Test9)
		{
			LineOver_FoundDunbat("","",1,true);
			OnTurnOnDunbat("");
		}
		
		else if(alAction == eAction_Test0)
		{
			KillActiveBanter();
			mbBanterEnabled = true;
			TimerBanter("");
		}
		
	}
	
	//-------------------------------------------------------
	
	void Setup()
	{
		///////////////////////
		//Transition preset for 2.5
		//Preset2.6
		GetBase().SetDisplayNameEntry("02-05-theta-inside");
		
		Effect_Bloom_FadeBrightPass(0.75f, 2);
		Effect_Bloom_FadeBloomWidth(128, 2);
		Effect_Bloom_FadeBloomFalloff(0.5f, 2);
		Effect_Bloom_FadeBloomTint(1, 1, 1, 2);
		
		Entity_SetVarBool("Sound_CathSource", "IsOmniSlot", true);
	}

	//-------------------------------------------------------

	void Update(float afTimeStep)
	{
		if (mbDunbatCameraActive)
		{
			UpdateDunbatCamera(afTimeStep);
		}
		
		////////////////////////////
		// Trigger bass music on gaze
		if (EyeTracking_IsEnvironmentReactive() && mbLookedAtBassBed == false && EyeTracking_IsEntityBeingLookedAt("LookAtBass"))
		{
			mbLookedAtBassBed = true;
			BassRoomSting();
		}
	}
	
	//-------------------------------------------------------
	
	////////////////////////////
	// This only used for pure debug purposes when info needs to printed.
	float DrawDebugOutput(cGuiSet @apSet,iFontData @apFont,float afY)
	{
		/*array<tString> vNames;
		array<tString> vFileName;
		array<int> vCounts;
		
		cSoundEntityIterator@ it = cLux_GetCurrentMap().GetWorld().GetSoundEntityIterator();
		int lCount=0;
		while(it.HasNext())
		{
			cSoundEntity@ pEnt =  it.Next();
			
			int lIdx=-1;
			for(int i=0; i<vNames.size(); ++i)
			{
				if(vNames[i] == pEnt.GetName())
				{
					lIdx=i;
					break;
				}
			}
			if(lIdx<0)
			{
				vNames.push_back(pEnt.GetName());
				vFileName.push_back(pEntry is null ? "" : pEntry.GetName());
				vCounts.push_back(1);
			}
			else
			{
				vCounts[lIdx]++;
			}
			
			lCount++;
		}
		afY = cLux_DrawDebugText("Sound Entity Count: "+lCount,afY);
		
		for(int i=0; i<vNames.size(); ++i)
		{
			if(vCounts[i]>5)
			{
				afY = cLux_DrawDebugText("Sound: "+vNames[i]+" FileName:"+vFileName[i]+ " Count: "+vCounts[i],afY);
				Log("Bad sound: "+vNames[i]);
			}
		}*/
		
			
		
		
		/*iLuxEntity@ pPropEntity = Map_GetEntity("Dunbat");
		cMeshEntity @pEntity = pPropEntity.GetMeshEntity();
		for(int i=0; i<pEntity.GetAnimationStateNum(); ++i)
		  {
		   cAnimationState @pState = pEntity.GetAnimationState(i);
		  if(pState.IsActive()==false) continue;
		   afY = cLux_DrawDebugText("Animation: "+pState.GetName(),afY);
		   afY = cLux_DrawDebugText("  Speed: "+pState.GetSpeed(),afY);
		   afY = cLux_DrawDebugText("  Weight: "+pState.GetWeight(),afY);
		  }*/
		return afY;
	}

	//-------------------------------------------------------
	
	//} END MAIN CALLBACKS
	
	/////////////////////////////////////////
	// ==============
	// Audio
	// ==============
	//{//////////////////////////////////////
	
	bool mbLookedAtBassBed = false;
	
	void OnLookAtBassBed(const tString &in asEntity, int alState)
	{
		if (mbLookedAtBassBed) return;
		if (EyeTracking_IsEnvironmentReactive()) return;
			
		if (alState==1)
		{
			if (Player_GetFlashlightActive()||Lamp_GetLit("BassLamp_1"))
			{
				cLux_AddDebugMessage("Look at Bass's bed.");
				mbLookedAtBassBed = true;
				BassRoomSting();
			}
		}
	}

	//Hallway sparks active
	bool OnCollide_HallwaySparks(const tString &in asParent, const tString &in asChild, int alState)
	{
		if(alState==1)
		{
			cLux_AddDebugMessage("Hallway flicker active");
			Light_SetFlickerActive("Hallway_SparkLight", true);
			
			
		}
		else
		{
			cLux_AddDebugMessage("Hallway flicker disabled");
			Light_SetFlickerActive("Hallway_SparkLight", false);
		}
		return true;
	}
		
	//-------------------------------------------------------
	//Stops sarange audio log if you close door to stop sound leaking
	
	void SarangeRoomDoor_Outside_OnConnectionStateChange(const tString &in asEntity, int alState)
	{
		cLux_AddDebugMessage("SarangeDoor State"+alState);
		if(alState==-1)
		{
			if(mbSarangeLogActive==true && Entity_GetCollide("Player","HallwaySoundControl"))
			{
				StopSarangeLog();
				Button_SetSwitchedOn("SarangAudioLog", false, false);
			}
		}	
	}
	
	//-------------------------------------------------------
	//Stop audio log leaking through wall
	
	bool OnCollideWauRoomControl(const tString &in asParent, const tString &in asChild, int alState)
	{
		if(mbSarangeLogActive==true)
		{
			StopSarangeLog();
			Button_SetSwitchedOn("SarangAudioLog", false, false);
		}
		return true;
	}
	
	//-------------------------------------------------------
	//Robot bear audio
	
	int TeddyInteractCount = 0;
	bool CathTeddyTimerActive = false;
	
	void Audio_InteractCathBear()
	{
		if (TeddyInteractCount == 0 && CathTeddyTimerActive == false)
		{
			Map_AddTimer("CathToyInteract", 2.0f, "Audio_CathToyInteract");
			CathTeddyTimerActive = true;
		}
		else if(CathTeddyTimerActive == false)
		{
			Map_AddTimer("CathToyInteract", cMath_RandRectf(3.0f, 6.0f), "Audio_CathToyInteract");
			CathTeddyTimerActive = true;
		}
	}
	
	bool CathTeddyAudioActive = false;
	void Audio_CathToyInteract(const tString &in asTimer)
	{
		if (TeddyInteractCount <= 3 && CathTeddyAudioActive == false)
		{
			TeddyInteractCount++;
			CathTeddyAudioActive = true;
			Map_AddTimer("CathTeddyAudioCooldown", 23.0f, "CathTeddyAudioCoolDown");
			Sound_CreateAtEntity("bear_music_0"+TeddyInteractCount, "Entities_Station/object/robot_bear/bear_music_0"+TeddyInteractCount, "CathTeddyBear");
		}
		cLux_AddDebugMessage("Cath teddy audio triggered, you are at piece number " +TeddyInteractCount);
	}
	
	void CathTeddyAudioCoolDown(const tString &in asTimer)
	{
		cLux_AddDebugMessage("Teddy Cooldown Over");
		CathTeddyAudioActive = false;
		CathTeddyTimerActive = false;
	}
	
	//End Audio
	//}------------------------------------------------------

	/////////////////////////////////////////
	// ==============
	// MAIN FUNCTIONS
	// ==============
	//{//////////////////////////////////////

	//-------------------------------------------------------

	bool mbGotBackdoorPassword = false;
	bool mbFixedServer = false;
	bool mbCathPluggedIn = false;
	bool mbVisitedPersonnelArea = false;
	bool mbVisitedServerRoom = false;
	bool mbVisitedSimRoom = false;
		
	//-------------------------------------------------------
	bool mbPersonnelAreaMusicState = false;
	bool OnTriggerEnterPersonnelArea(const tString &in asParent, const tString &in asChild, int alState)
	{
		mbVisitedPersonnelArea = true;
		
		cLux_AddDebugMessage("Enter personnel area");
		LivingQuartersTVSound();
		
		if(mbFirstSimulationCompleted==true)
		{
			mlAmbientStage ++;
			
			Map_AddTimer("StopAmbientMusicQuickly", 1.0f, "AmbientMusicHandler");
			Map_AddTimer("PersonnelMusic", 3.0, "PersonnelMusic");
			mbPersonnelAreaMusicState = true;
		}
		if(mbPersonnelAreaMusicState==true) return false;
		return true;
	}
		
	//-------------------------------------------------------
	
	void PersonnelMusic(const tString &in asTimer)
	{
		Map_AddTimer("StartAmbient", cMath_RandRectf(6.0f, 10.0f), "AmbientMusicHandler");
	}
	
	//-------------------------------------------------------
	
	bool OnTriggerVisitedServerRoom(const tString &in asParent, const tString &in asChild, int alState)
	{
		mbVisitedServerRoom = true;

		Map_AddTimer("Timer_EventAkersAtLowerDoor",4.0f,"Timer_EventAkersAtLowerDoor");
		return false;
	}

	/////////////////////////////////////////
	// *Light switches*
	/////////////////////////////////////////

	//-------------------------------------------------------
	
	void OnChangeLightSwitch(const tString &in asEntity, int alState)
	{
		tString sLampName = Entity_GetVarString(asEntity, "");
		tString sTimerFunc = (alState == 1 ? "TimerSetLampLit" : "TimerSetLampUnlit");
		
		////////////////////////////////////////
		// Turn on/off lamps with some delay
		for (int i = 1; Entity_Exists(sLampName + "_" + i); i++)
		{
			Map_RemoveTimer(sLampName + "_" + i);
			float fMaxDelay = cMath_Min(i*0.1, 1.0f);
			Map_AddTimer(sLampName + "_" + i, cMath_RandRectf(0, fMaxDelay), sTimerFunc);
		}
	}

	//-------------------------------------------------------

	/////////////////////////////////////////
	// *Cath Box*
	/////////////////////////////////////////

	//-------------------------------------------------------
	tString msCurrentCathSource;
	bool mbDockDoorUnlocked = false;
	
	void SetupCath()
	{
		Voice_SetCharacterSpeakingCallback("Catherine", "OnCathTalking");
		Tool_PickUp("CathTool", false, false);
		CathTool_SetHintsCallback("CathTool", "GiveCathHints");
	}
	
	//-------------------------------------------------------
	
	bool OnCollideCathSourceArea(const tString &in asParent, const tString &in asChild, int alState)
	{
		if (alState==-1)
			return true;
			
		tString sSourceEntity = Entity_GetVarString(asChild,"");
		if (sSourceEntity=="")
		{
			Error("CathSourceArea: No entity specified in UserVar");
			return true;
		}
		if (!Entity_Exists(sSourceEntity))
		{
			Error("CathSourceArea: Can't find entity:"+sSourceEntity);
			return true;
		}
		cLux_AddDebugMessage("CathSourceArea changed to '"+sSourceEntity+"'");
	
		if (msCurrentCathSource!=sSourceEntity)
		{
			Voice_SetSource("Catherine", sSourceEntity, 3, 55, true, -1, 22000, 1250, eLuxVoiceSourceFreqencyFlag_LowPass);
			
			if (msCurrentCathSource!="")
				 OnCathTalking("Catherine", false);

			msCurrentCathSource = sSourceEntity;
			
			if (Voice_CharacterIsSpeaking("Catherine"))
				OnCathTalking("Catherine", true);
		}

		///////////////
		// Start preloading next map
		Preload();

		return true;
	}
	
	//-------------------------------------------------------
	
	 bool OnCathTalking(const tString &in asCharacter, bool abStartedTalking)
	 {
		 Lamp_SetLit(msCurrentCathSource, abStartedTalking, true);
		 Lamp_SetFlickerActive(msCurrentCathSource, abStartedTalking);
		 
		 if(abStartedTalking)
		 {
			Sound_CreateAtEntity("PALoop", "02_01_ms_curie_outside/SFX/cathbot/pa_loop", msCurrentCathSource, 0.05f, false, 1.0f);
		 }
		 else
		 {
			 Sound_Stop("PALoop", 0.05f);
		 }
		 
		 return true;
	 }
	
	//-------------------------------------------------------
	
	bool OnPickUpCathBox(const tString &in asTool)
	{
		// If we're right at the start of the map we want to hide this pickup.
		if (Entity_GetCollide("Player","CathHiddenZone"))
		{
			// Hud entity won't exist quite yet, give it a tiny bit...
			Map_AddTimer("TimerHideCathBox",0.1f,"TimerHideCathBox");
		}
		return true;
	}
	
	//-------------------------------------------------------
	
	void TimerHideCathBox(const tString& in asTimer)
	{
		// Hide the cath box while it gets put away.
		Map_GetEntity("CathTool_HudObject").GetMeshEntity().SetVisible(false);
	}

	//-------------------------------------------------------
		
	bool CanUseCathBox(const tString &in asTool, const tString &in asEntity)
	{
		if (Map_GetEntity(asEntity).GetInteractionDisabled())
			 return false;
		 
		if (asEntity=="cath_terminal_1")
			return true;
		if (asEntity=="DockDoor_Outside")
			return CathTool_CanUse(asTool, asEntity);
		if (asEntity=="AirlockButton")
			return CathTool_CanUse(asTool, asEntity);
			
		return false;
	}

	//-------------------------------------------------------
		
	bool OnUseCathBox(const tString &in asTool, const tString &in asEntity)
	{
		if (asEntity=="cath_terminal_1")
		{
			InteractCathTerminal(asEntity);
		}
		else if (asEntity=="DockDoor_Outside")
		{
			if (mbDockDoorUnlocked==false)
			{
				OmniPanel_AccessDenied("DockDoor_Outside");
			}
			CathTool_UseOnPanel(asTool, "DockDoor_Outside");
			return false;
		}
		else if (asEntity=="AirlockButton")
		{
			CathTool_UseOnPanel(asTool, asEntity);
			return false;
		}
		return true;
	}
	
	//-------------------------------------------------------
	
	void OnChange_DockDoorButton(const tString &in asEntity, int alState)
	{
		Map_AddTimer("DockDoorButton_Interact", 2.0f, "DockDoorButton_Interact");
	}
	
	void DockDoorButton_Interact(const tString &in asTimer)
	{
		SlideDoor_SetClosed("DockDoor_Door1",false);
		Entity_SetActive("DockDoorToolArea",false);
	}
	
	//-------------------------------------------------------
	
	void OnChange_AirlockButton(const tString &in asEntity, int alState)
	{
		//Auto-triggered at start
	}
	
	//-------------------------------------------------------
	
	tString GiveCathHints(const tString& in asName)
	{
		if (!mbFoundScanChip)
		{
			return "Hint_NotFoundScanChip";
		}
		else if (!mbFixedServer)
		{
			return "Hint_NotFixedServers";
		}
		else if (!mbUsedSimulator)
		{
			return "Hint_NotUsedSim";
		}
		else if (!mbEnvChipUsed)
		{
			return "Hint_TriedSimNoEnv";
		}
		else if (!mbFoundBrandonsRoom)
		{
			return "Hint_NotVisitedBrandon";
		}
		else if (mlCluesFound<2)
		{
			return "Hint_NotFoundAllBrandonsStuff";
		}
		else if (!mbDiscoveredScanEnv)
		{
			return "Hint_NotFoundScanRoomData";
		}
		else
		{
			return "Hint_GotEverything";
		}
	}
	
	//-------------------------------------------------------
	
	/////////////////////////////////////////
	// *Door Seals*
	/////////////////////////////////////////
	
	//-------------------------------------------------------
		
	void SetupDoorSeals()
	{
		Entity_StopAnimation("DoorSeal_*");
	}
	
	//-------------------------------------------------------
	
	void OnStateChangeDoorSeal(const tString &in asEntity, int alState)
	{
		if (alState==1)
		{
			tString sSeal = cString_Sub(asEntity,6);
			cLux_AddDebugMessage("Opening Door Seal:"+sSeal);
			Entity_SetInteractionDisabled(asEntity,true);
			Entity_PlayAnimation(sSeal, "door_lock_opening",0.1f,false,true,"OnDoorSealOpenCompleted");
			Entity_SetAnimationPaused(sSeal, "door_lock_opening", false);
			Lamp_SetLit(sSeal+"_Lamp",false,true);
			Light_SetVisible(sSeal+"_Light",false);
		}
	}
	
	//-------------------------------------------------------
	
	void OnDoorSealOpenCompleted(const tString &in asEntityName,  const tString &in asAnimName)
	{
		tString sPanel = Entity_GetVarString(asEntityName, "");
		Button_SetLocked(sPanel, false);
		Entity_SetActive(asEntityName,false);
		Entity_SetActive("Handle"+asEntityName, false);
		Entity_SetActive("Open"+asEntityName, true);
		Entity_SetActive(asEntityName+"_Lamp",false);
	}

	//-------------------------------------------------------

	/////////////////////////////////////////
	// *Generic timers*
	/////////////////////////////////////////

	//-------------------------------------------------------

	void TimerPlayVoice(const tString &in asTimer)
	{
		Voice_PlayWhenPossible(asTimer);
	}
	
	//-------------------------------------------------------
	
	void TimerEnableInteraction(const tString &in asTimer)
	{
		Entity_SetInteractionDisabled(asTimer, false);
	}
	
	//-------------------------------------------------------
	
	void TimerTurnOnEffectsNoFade(const tString &in asTimer)
	{
		Entity_SetEffectsActive(asTimer, true, false);
	}
	
	//-------------------------------------------------------
	
	void TimerTurnOffEffectsNoFade(const tString &in asTimer)
	{
		Entity_SetEffectsActive(asTimer, false, false);
	}
	
	//-------------------------------------------------------
	
	void TimerTurnOnEffects(const tString &in asTimer)
	{
		Entity_SetEffectsActive(asTimer, true, true);
	}
	
	//-------------------------------------------------------
	
	void TimerTurnOffEffects(const tString &in asTimer)
	{
		Entity_SetEffectsActive(asTimer, false, true);
	}
	
	//-------------------------------------------------------
	
	void TimerSetLampLit(const tString &in asTimer)
	{
		Lamp_SetLit(asTimer, true, true);
	}
	
	//-------------------------------------------------------
	
	void TimerSetLampUnlit(const tString &in asTimer)
	{
		Lamp_SetLit(asTimer, false, true);
	}
	
	//-------------------------------------------------------
	
	void TimerStopLampFlicker(const tString &in asTimer)
	{
		Lamp_SetFlickerActive(asTimer, false);
	}
	
	//-------------------------------------------------------
	
	void TimerTurnOnGui(const tString &in asTimer)
	{
		Terminal_SetGuiActive(asTimer, true, 0.3);
	}

	//-------------------------------------------------------
	
	void TimerBreakJoint(const tString &in asTimer)
	{
		Joint_Break(asTimer);
	}

	//-------------------------------------------------------
	
	//} END MAIN FUNCTIONS

	/////////////////////////////////////////
	// ==============
	// SCENE 1 *EXIT AIRLOCK TUNNEL*
	// ==============
	//{//////////////////////////////////////

	//-------------------------------------------------------
	
	void SetupExitAirlockTunnel()
	{
		Entity_StopAnimation("ThetaGate_*");
		Entity_StopAnimation("AirlockDoor_*");
	}

	//-------------------------------------------------------

	/////////////////////////////////////////
	// Scene 1 Event B *Turn on light*
	/////////////////////////////////////////

	//-------------------------------------------------------
	
	cSequenceStatesData mAirlockDoorOpensSequence;
		
	void SequenceAirlockDoorOpens(const tString &in asTimer)
	{
		Sequence_Begin("SequenceAirlockDoorOpens", mAirlockDoorOpensSequence);
		if	 (Sequence_DoStepAndWait(3))
		{
			//slight delay to allow for sound to load - and also to keep sound in sync from stutters on initial level load
			Sound_PreloadGroup("02_05_theta/sfx/events", true);
			Sound_Stop("panel_slidedoor_medium_rusty_2_lightlitchange", 0.015f);
		}
		else if (Sequence_DoStepAndWait(1))
		{
			Entity_PlayAnimation("AirlockDoor_*", "Open", 0);
			Sound_CreateAtEntity("AirlockDoor", "02_05_theta/sfx/events/airlock_door_open", "AirlockDoor_1", 0.0f, false, 1.0f);
			cLux_AddDebugMessage("Trigger alarm and airlock door sound");
		}
		else if (Sequence_DoStepAndWait(4))
		{
			int lGateShakeID = Effect_Shake_Start(0.0050, -1, 2, 0);
			Entity_SetVarInt("AirlockDoor_1", "ShakeID", lGateShakeID);
			Effect_Shake_SetSourceEntity(lGateShakeID, "AirlockDoor_1", 3, 25);
			Sound_CreateAtEntity("AirlockAlarm", "02_05_theta/sfx/events/airlock_door_alarm", "AirlockAlarmSource", 0.0f, false, 1.0f);
			Map_AddTimer("AirlockAlarm", 2.5f, "AirlockAlarm");
			
			SlideDoor_SetOpenAmount("AirlockDoor_*", 1, false);
			
			/////////////////////////////////
			//Duck World audio for door open
			Sound_FadeGlobalVolume(0.3f, 3.0f, eSoundEntryType_World);
			
			cLux_AddDebugMessage("Fading out World Audio over 3 seconds");			
		}
		else if (Sequence_DoStepAndWait(3))
		{
			//////////////////////////////
			//Play Music
			Music_PlayExt("02_05_theta_airlock", false, 0.85f, 1.0f, 7.0f, 0.0f, eMusicPrio_BigEvent, false);
		}
		
		else if (Sequence_DoStepAndWait(3.5))
		{
			Effect_Shake_FadeOut(Entity_GetVarInt("AirlockDoor_1", "ShakeID"), 1);
			
			/////////////////////////////////
			//Bring audio back up and stop alarm sound
			Sound_FadeGlobalVolume(1.0f, 3.0f, eSoundEntryType_World);
			cLux_AddDebugMessage("Fading in World Audio to 1 over 3 seconds.");
		}
		else 
		{
			Map_RemoveTimer("AirlockAlarm");
			cLux_AddDebugMessage("Stop Alarm sound.");
		}
		Sequence_End();
	}
	
	void AirlockAlarm(const tString &in asTimer)
	{
		Sound_CreateAtEntity("AirlockAlarm", "02_05_theta/sfx/events/airlock_door_alarm", "AirlockAlarmSource", 0.0f, false, 1.0f);
		Map_AddTimer("AirlockAlarm", 2.5f, "AirlockAlarm");
	}

	//-------------------------------------------------------

	/////////////////////////////////////////
	// Break Window
	/////////////////////////////////////////

	//-------------------------------------------------------

	int mlWindowBreaks = 0;

	//-------------------------------------------------------
	
	void OnBreakWindow(const tString &in asEntity)
	{
		++mlWindowBreaks;

		if (mlWindowBreaks == 1)
		{
			Entity_SetActive("tech_room_window_1",false);
			Entity_SetActive("tech_room_window_nobreak",true);
			ParticleSystem_CreateAtEntity("01_01_break_window_damaged","01_01_break_window_damaged.ps","WindowCrackEffectArea",false);
			Sound_CreateAtEntity("WindowCrack", "01_01_upsilon_awake/sfx/window_smash/glass_crack", "WindowSoundSource");
			Map_AddTimer("tech_room_window_2",0.75f,"TimerSwapWindow");
		}

		if (mlWindowBreaks == 2)
		{
			Entity_SetActive("tech_room_window_2",false);
			Entity_SetActive("tech_room_window_3",true);
			ParticleSystem_CreateAtEntity("01_01_break_window","01_01_break_window.ps","WindowCrackEffectArea",false);
			Sound_CreateAtEntity("WindowCrack", "01_01_upsilon_awake/sfx/window_smash/glass_smash", "WindowSoundSource");
		}
	}
	
	//-------------------------------------------------------
	
	void TimerSwapWindow(const tString& in asName)
	{
		Entity_SetActive(asName,true);
		Entity_SetActive("tech_room_window_nobreak",false);
	}

	//-------------------------------------------------------
	
	//} END SCENE 1

	/////////////////////////////////////////
	// ==============
	// SCENE 2 *START UP CATHERINE; BEGIN EXPLORATION*
	// ==============
	//{//////////////////////////////////////

	//-------------------------------------------------------
	
	bool mbCathHasBriefed = false;
	//-------------------------------------------------------
		
	void SetupStartUpCatherine()
	{
		Terminal_SetGuiActive("StatusTerminal", false);
		Light_SetVisible("PointLight_StatusTerminal",false);
	}
	

	//-------------------------------------------------------
	
	bool CollisionControlRoomHint(const tString &in asParent, const tString &in asChild, int alState)
	{
		cLux_AddDebugMessage("CollisionControlRoomHint");
		
		if (!mbFixedServer)				Voice_Play("2_Hint_FixServers");
		else if (!mbKnowsAboutBrandon)	
		{
			if (!mbFoundScanChip)
				Voice_Play("2_Hint_FindScan");
		}
		else if (!mbUsedSimulator)		Voice_Play("2_Hint_SimulateScan");
		else if (mlCluesFound < 2)		Voice_Play("2_Hint_FindAliceInfo");
		else if (!mbCopiedScanRoom)		Voice_Play("2_Hint_FindScanRoomEnvironment");
		
		return true;
	}

	//-------------------------------------------------------

	/////////////////////////////////////////
	// Scene 2 Event A *Open Control Room*
	/////////////////////////////////////////

	//-------------------------------------------------------

	//-------------------------------------------------------

	/////////////////////////////////////////
	// Scene 2 Event B *Insert Catherine (dialog)*
	/////////////////////////////////////////

	//-------------------------------------------------------
	
	void InteractCathTerminal(const tString &in asEntity)
	{
		Entity_SetInteractionDisabled(asEntity, true);
		SequenceInsertCathControlRoom("");
	}

	//-------------------------------------------------------
	
	cSequenceStatesData mInsertCathControlRoomSequence;
		
	void SequenceInsertCathControlRoom(const tString &in asTimer)
	{
		Sequence_Begin("SequenceInsertCathControlRoom", mInsertCathControlRoomSequence);
			
		if (Sequence_DoStepAndWait(1))
		{
			CathTool_Insert("CathTool", "cath_terminal_1");

			Player_FadeMoveSpeedMulTo(0.4, 1);
			Player_SetRunSpeedMul(0);
			
			//////////////////////////////
			///Insert Cath Sound
			Sound_CreateAtEntity("InsertCath", "Entities_Station/object/cathtool/insert_cathtool_nonunderwater", "CathBox_ControlRoom", 0.0f, false, 1.0f);
			Sound_CreateAtEntity("CathBootUp", "02_05_theta/sweeteners/cath_poweron/cath_computer_on", "Sound_CathSource", 0.0f, false, 1.0f);
			
			Entity_SetActive("CathTool_InteractAux",true);
		}
		else if (Sequence_DoStepAndWait(2.0f))
		{
			Terminal_SetGuiActive("ControlRoomTerminal_1", true);
			Light_FadeTo("ControlRoomTerminal_1_Light", cColor(0.494,0.781,1,0), -1, 0.3);

			Dialog_StartConversation("Catherine", "ControlRoomTerminal_1", 2.f);
			Dialog_Begin();
				Dialog_AddBranch("2_CatherinePluggedIn");
					Dialog_AddPause(1.4);
					if (!cLux_ScriptDebugOn())
					{
						Dialog_AddSubject("2_CatherinePluggedIn");
					}
					Dialog_AddSubject("2_DockDoorNeedCode", "SubjectCatherinePluggedIn");
			Dialog_End();
		}
		else if (Sequence_DoStepAndWait(3.0f))
		{
			Entity_SetActive("TriggerActivateAuxDoorPanels",true);
			
			Terminal_SetGuiActive("ControlRoomTerminal_4", true);
			Light_FadeTo("ControlRoomTerminal_4_Light", cColor(0.494,0.781,1,0), -1, 0.3);
			Map_AddTimer("ControlRoomTerminal_6", 0.75, "TimerTurnOnGui");
		}
		else if (Sequence_DoStepAndPause(0))
		{
			WakeUpControls();
		}
		else if (Sequence_DoStepAndWait(0.0f))
		{
			///////////////////
			// Restore player
			Player_FadeMoveSpeedMulTo(1, 1);
			Player_SetRunSpeedMul(1);
			
			mbCathHasBriefed = true;
			StopBanter();
			CathTool_SetHintsEnabled("CathTool",true);
		}
		Sequence_End();
	}

	//-------------------------------------------------------

	bool OnTriggerActivateAuxDoorPanels(const tString &in asParent, const tString &in asChild, int alState)
	{
		Entity_SetActive("TriggerActivateAuxDoorPanels",false);
		ActivateAuxDoorPanels();
		return false;
	}

	//-------------------------------------------------------
	
	void SubjectCatherinePluggedIn(const tString &in asSubject, bool abStartOfSubject)
	{
		if (abStartOfSubject) return;
		
		SequenceStates_Resume("SequenceInsertCathControlRoom");
		
		LastOnSoma_SetText("02_05_theta_inside_2");
	}

	//-------------------------------------------------------

	/////////////////////////////////////////
	// Scene 2 Event C *Connect Catherine To Systems (dialog)*
	/////////////////////////////////////////

	//-------------------------------------------------------
	
	void WakeUpControls()
	{
		///////////////////////
		// Turn on screens
		Map_AddTimer("ControlRoomTerminal_2", 1, "TimerSetLampLit");
		Map_AddTimer("ControlRoomTerminal_3", 1.4, "TimerSetLampLit");
		Map_AddTimer("ControlRoomTerminal_5", 1.75, "TimerSetLampLit");
		Map_AddTimer("ControlRoomTerminal_7", 2.5, "TimerTurnOnGui");
		Map_AddTimer("ControlRoomTerminal_9", 3, "TimerTurnOnGui");
		
		///////////////////////////////////
		// Activate Dock button
		mbCathPluggedIn = true;
		mbBanterEnabled = true; // Turn on banter
		
		Lamp_SetupFlicker("HubRoomLamp_Door_3",0.05,0.25f,0.05f,0.25f);
		Lamp_SetFlickerActive("HubRoomLamp_Door_3",true);
		TimerSetLampLit("HubRoomLamp_Door_3");
		Map_AddTimer("HubRoomLamp_Door_3", 0.75, "TimerStopLampFlicker");
		
		////////////
		// Status Terminal
		Terminal_SetGuiActive("StatusTerminal", true);
		Light_SetVisible("PointLight_StatusTerminal",true);
	}

	//-------------------------------------------------------
	
	void TimerControlRoomTerminalLight(const tString &in asTimer)
	{
		Light_FadeTo(asTimer, cColor(0.494,0.781,1,0), -1, 0.3);
	}

	//-------------------------------------------------------

	/////////////////////////////////////////
	// Scene 2 Event D *Get Exploration Guidelines (dialog)*
	/////////////////////////////////////////
	
	//-------------------------------------------------------
	
	void ActivateAuxDoorPanels()
	{		
		cLux_AddDebugMessage("Activating door panels");
		Button_SetDisabled("LivingQuartersDoor_Outside", false, true);
		Button_SetDisabled("ServerAreaDoor_Outside", false, true);
		SlideDoor_SetClosed("LivingQuartersDoor",true);
		SlideDoor_SetClosed("ServerAreaDoor",true);
		Button_SetDisabled("ControlRoomDoor_Inside", false, true);
		Button_SetDisabled("ControlRoomDoor_Outside", false, true);
		
		float fLampDelay = 0.5f;
		for (int i = 1; Entity_Exists("HubRoomLamp_Door_"+i); i++)
		{
			if (Lamp_GetLit("HubRoomLamp_Door_"+i)) continue;
			
			Lamp_SetupFlicker("HubRoomLamp_Door_"+i,0.05,0.25f,0.05f,0.25f);
			Lamp_SetFlickerActive("HubRoomLamp_Door_"+i,true);
			
			cLux_AddDebugMessage("HubRoomLamp_Door_"+i+" "+fLampDelay);
			Map_AddTimer("HubRoomLamp_Door_"+i, fLampDelay, "TimerSetLampLit");
			Map_AddTimer("HubRoomLamp_Door_"+i, fLampDelay+cMath_RandRectf(0.5,1.0), "TimerStopLampFlicker");
			fLampDelay += cMath_RandRectf(0.25,0.4);
		}
		
		SequenceDoorUnlockSound("");
		
		Doorway_SetPlayerIsInGroup("Banter");
		StartBanter();
	}

	cSequenceStatesData mDoorUnlockSequence;
		
	void SequenceDoorUnlockSound(const tString &in asTimer)
	{
		Sequence_Begin("SequenceDoorUnlockSound", mDoorUnlockSequence);
			
		if (Sequence_DoStepAndWait(1.25))
		{
		}
		else if (Sequence_DoStepAndWait(1.25))
		{
			cLux_AddDebugMessage("Doors Unlocking Sound 2");
			Button_SetLocked("LivingQuartersDoor_Outside", false, true);
			Sound_CreateAtEntity("DoorUnlock_2", "Entities_Station/doors/theta_door/unlock_longfalloff", "LivingQuartersDoor_Door", 0.0f, false, 1.0f);
			Sound_CreateAtEntity("DoorUnlockButton_3", "Entities_Station/doors/theta_door/button_longfalloff", "LivingQuartersDoor_Outside", 0.0f, false, 1.0f);
		}
		else if (Sequence_DoStepAndWait(1.25))
		{
			cLux_AddDebugMessage("Doors Unlocking Sound 3");
			Button_SetLocked("ServerAreaDoor_Outside", false, true);
			Sound_CreateAtEntity("DoorUnlock_3", "Entities_Station/doors/theta_door/unlock_longfalloff", "ServerAreaDoor_Door", 0.0f, false, 1.0f);
			Sound_CreateAtEntity("DoorUnlockButton_3", "Entities_Station/doors/theta_door/button_longfalloff", "ServerAreaDoor_Outside", 0.0f, false, 1.0f);
		}
	}

	//-------------------------------------------------------

	/////////////////////////////////////////
	// Scene 2 Event E *Turn on lights*
	/////////////////////////////////////////

	//-------------------------------------------------------

	//-------------------------------------------------------

	/////////////////////////////////////////
	// Scene 2 Event F *All tasks done (dialog)*
	/////////////////////////////////////////

	//-------------------------------------------------------
	
	void AllTasksDone()
	{
		Voice_Play("2_AllTasksDone");	
		Entity_SetActive("TriggerReturnToCath", true); 
		CathTool_SetHintsEnabled("CathTool",false);
		mbBanterEnabled = true; // Turn on banter again now we're back at Cath
	}
	
	//-------------------------------------------------------
	
	bool CollisionAllTasksDoneCheck(const tString &in asParent, const tString &in asChild, int alState)
	{
		if (!mbGotBackdoorPassword) return true;
		
		AllTasksDone();
			
		return false;
	}
	
	//-------------------------------------------------------

	bool OnTriggerReturnedToCath(const tString &in asParent, const tString &in asChild, int alState)
	{
		SequenceStartDunbat();
		Entity_SetActive(asChild,false);
		return true;
	}

	//-------------------------------------------------------
	
	cSequenceStatesData mSeqStartDunbat;
	void SequenceStartDunbat(const tString& in asName="")
	{
		Sequence_Begin("SequenceStartDunbat", mSeqStartDunbat);
		
		if (Sequence_DoStepAndPause())
		{
			Sound_PreloadGroup("02_05_theta/sfx", true);
			
			// Cath says she's going to start the DUNBAT
			Dialog_Begin();
				Dialog_AddBranchAndSubject("Addendum_StartDunbat", "", "Voice_StartDunbatContinue");
			Dialog_End();
					
			///////////////////////////////////////////////
			// Remove access to servers and living area
			SlideDoor_SetClosed("LivingQuartersDoor_Door", true, true);
			SlideDoor_SetClosed("ServerAreaDoor_Door", true, true);
			Button_SetLocked("LivingQuartersDoor_Outside", true, true);
			Button_SetLocked("ServerAreaDoor_Outside", true, true);
			
			Map_RemoveTimer("BrandonScanMusic");
			if(mbBrandonPostScanMusic==true)
			{
				Music_Stop(9.0f, eMusicPrio_MinorEvent);
				Sound_FadeGlobalVolume(1.0f, 6.0f, eSoundEntryType_World);
				mbBrandonPostScanMusic = false;
			}
		}
		else if (Sequence_DoStepAndWait(1.0f))
		{
			// Light up the DUNBAT room
			Lamp_SetupFlicker("DockPoolLamp_*",0.05,0.25f,0.05f,0.25f);
			Lamp_SetFlickerActive("DockPoolLamp_*",true);
			
			Sound_CreateAtEntity("DunbatRoomPowerUp", "02_05_theta/sfx/dunbat_room_startup_sweet", "Player");
			StopHangarEvent();
			StopAkersUpperDoor();
			Sound_FadeGlobalVolume(0.55f, 2.0f, eSoundEntryType_World);
			Map_AddTimer("FadeUpDunbatRoomPower", 5.0f, "FadeUpDunbatRoomPower");
		}
		else if (Sequence_DoStepAndWait(1.75f))
		{
			float fLampDelay = 0;
			for (int i = 1; Entity_Exists("DockPoolLamp_"+i); i+=2)
			{
				Map_AddTimer("DockPoolLamp_"+i, fLampDelay, "TimerSetLampLit");
				Map_AddTimer("DockPoolLamp_"+(i+1), fLampDelay, "TimerSetLampLit");
				fLampDelay += cMath_RandRectf(0.15,0.7);
				Map_AddTimer("DockPoolLamp_"+i, fLampDelay, "TimerStopLampFlicker");
				Map_AddTimer("DockPoolLamp_"+(i+1), fLampDelay, "TimerStopLampFlicker");
			}
			// Light inside the cockpit
			Light_SetBrightness("PointLight_209",2.0f);
		}
		else if (Sequence_DoStepAndPause(1.0f))
		{
			// Cath says the DUNBAT is ready and she's going to unplug
			Dialog_Begin();
				Dialog_AddBranchAndSubject("Addendum_DunbatStarted", "", "Voice_StartDunbatContinue");
			Dialog_End();
		}
		else if (Sequence_DoStepAndWait(0.0f))
		{
			// Cath unplugs
			ReleaseCatherineControlRoom();
		}
		
		Sequence_End();
	}
	
	void FadeUpDunbatRoomPower(const tString &in asTimer)
	{
		Sound_FadeGlobalVolume(1.0f, 10.0f, eSoundEntryType_World);
	}
	
	//-------------------------------------------------------
	
	void Voice_StartDunbatContinue(const tString&in asSubject, bool abStartOfSubject)
	{
		if (abStartOfSubject)
			return;
	
		SequenceStates_Resume("SequenceStartDunbat");
	}

	//-------------------------------------------------------

	/////////////////////////////////////////
	// Scene 2 Event G *Construct vent crawling*
	/////////////////////////////////////////
	
	//-------------------------------------------------------
	
	bool CollisionEnteredControlRoom(const tString &in asParent, const tString &in asChild, int alState)
	{
		if (alState == 1)
		{		
			StopBanter();
			Voice_ClearQueued();
			StartDunbatCamera();
		}
		else
		{
			StopDunbatCamera();
			StartBanter(15.0f);
		}
		return true;
	}			

	//-------------------------------------------------------

	/////////////////////////////////////////
	// Scene 2 Event H *Simon Comments*
	/////////////////////////////////////////

	//-------------------------------------------------------
	
	bool CollisionLeftAirlock(const tString &in asParent, const tString &in asChild, int alState)
	{
		Voice_Play("2_LeftAirlockComment", -1, "OnEntryLineDone" );
		
		Lamp_SetLit("HubRoomLamp_Ceiling_2", true, true);
		Lamp_SetLit("HubRoomLamp_Ceiling_4", true, true);
		Map_AddTimer("HubRoomLamp_Ceiling_1", 0.75, "TimerSetLampLit");
		Map_AddTimer("HubRoomLamp_Ceiling_3", 0.75, "TimerSetLampLit");
		
		Lamp_SetFlickerActive("ThetaSignLamp",true);
		Map_AddTimer("ThetaSignLamp", 1.25, "TimerSetLampLit");
		Map_AddTimer("ThetaSignLamp", 2.00, "TimerStopLampFlicker");
		
		/////////////////////////
		///Play Enter Theta Sweetener
		Sound_CreateAtEntity("EnterThetaSweetener", "02_05_theta/sweeteners/enter_theta", "Player", 0.0f, false, 1.0f);
		
		return false;
	}
	
	//-------------------------------------------------------
	
	void OnEntryLineDone(const tString&in asScene, const tString&in asSubject)
	{
		Map_AddTimer("TimerAutoSave",1,"TimerAutoSave");
	}
	
	//-------------------------------------------------------
	
	void TimerAutoSave(const tString& in asName)
	{
		Game_AutoSave();
	}

	//-------------------------------------------------------
	
	//} END SCENE 2

	/////////////////////////////////////////
	// ==============
	// SCENE 3 *MANIPULATE BRAINSCAN; RETRIEVE CODE*
	// ==============
	//{//////////////////////////////////////

	//-------------------------------------------------------
	
	bool mbKnowsAboutBrandon = false;
	bool mbUsedSimulator = false;
	bool mbCopiedScanRoom = false;
	bool mbKnowsAliceWasAtScan = false;
	int mlCluesFound = 0;

	//-------------------------------------------------------
	
	void SetupManipulateBrainScan()
	{
		Entity_SetPlayerInteractCallback("BrokenChip_*", "InteractBrokenChip", true);
		
		Entity_SetVarString("SimulationSlot_Right", "Terminal", "BrainScanSimulationTerminal");
		Entity_SetVarString("SimulationSlot_Left", "Terminal", "BrainScanSimulationTerminal");
		Entity_SetVarString("ScanRoomSlot", "Terminal", "ScanRoomTerminal");
	}

	//-------------------------------------------------------

	/////////////////////////////////////////
	// Scene 3 Event A *Head for Simulation Room (dialog)*
	/////////////////////////////////////////

	//-------------------------------------------------------
	
	bool CollisionActivateCorridorLamps(const tString &in asParent, const tString &in asChild, int alState)
	{		
		cLux_AddTodoMessage("Sound: Corridor lights turning on.");
		
		/////////////////////////////////////////
		//Start Ambient Music
		Map_AddTimer("StartAmbient",  cMath_RandRectf(3.0f, 5.0f), "AmbientMusicHandler");
		
		////////////////////////////////////////
		// Turn on lamps with some delay
		for (int i = 1; Entity_Exists("CorridorBigLamp_" + i); i++)
		{
			Map_RemoveTimer("CorridorBigLamp_" + i);
			float fMaxDelay = cMath_Min(i*1, 4);
			Map_AddTimer("CorridorBigLamp_" + i, cMath_RandRectf(0, fMaxDelay), "TimerSetLampLit");
		}
		
		//////////////////////////////////
		//Play Lights on Sweetener
		Sound_CreateAtEntity("LightsOnSweetener", "02_05_theta/sweeteners/lights_on", "Player", 0.0f, false, 1.0f);
			
		for (int i = 1; Entity_Exists("CorridorSmallLamp_" + i); i++)
		{
			Map_RemoveTimer("CorridorSmallLamp_" + i);
			Map_AddTimer("CorridorSmallLamp_" + i, cMath_RandRectf(0.5, 3), "TimerSetLampLit");
		}
		
		return false;
	}

	//-------------------------------------------------------

	void OnDrainedHallFlower(const tString &in asEntity)
	{
		Map_AddTimer("LightsOutFlower", 2.5f, "LightsOutFlower");
	}
	
	//-------------------------------------------------------

	void LightsOutFlower(const tString &in asTimer)
	{
		for (int i = 1; Entity_Exists("CorridorBigLamp_" + i); i++)
		{
			Map_RemoveTimer("CorridorBigLamp_" + i);
			float fMaxDelay = i*0.1;
			Map_AddTimer("CorridorBigLamp_" + i, cMath_RandRectf(0, fMaxDelay), "TimerSetLampUnlit");
		}
		for (int i = 1; Entity_Exists("CorridorSmallLamp_" + i); i++)
		{
			Map_RemoveTimer("CorridorSmallLamp_" + i);
			Map_AddTimer("CorridorSmallLamp_" + i, cMath_RandRectf(0.1, 0.4), "TimerSetLampUnlit");
		}
		
		Sound_Stop("LightsOnSweetener", 2.0f);
		Sound_CreateAtEntity("LightsOut", "02_05_theta/sweeteners/wau_flower_lights_out", "Player");
	}

	//-------------------------------------------------------
	
	/////////////////////////////////////////
	// Scene 3 Event B *Look for Brain Scan Memory Chip (dialog)*
	/////////////////////////////////////////

	//-------------------------------------------------------
	
	int lCylindersTurned = 0;
	int mlCylinderButtonsPressed = 0;

	//-------------------------------------------------------
	
	void OnChangeRotateCylinderRight(const tString &in asEntity, int alState)
	{
		Entity_SetEffectsActive(asEntity, alState==1, true);
		
		if (alState == -1) return;
		
		mlCylinderButtonsPressed++;
		if (mlCylinderButtonsPressed==2)
		{
			Entity_SetActive("InteractAux_Storage_*",false);
		}
		
		int lCylinderIndex = cString_GetNumericSuffixInt(asEntity);
		Entity_SetVarFloat("BrainScanCylinder_" + lCylinderIndex, "Torque", 750);
		Map_AddTimer("BrainScanCylinder_" + lCylinderIndex, 0.1, "TimerRotateCylinder");
		
		MovingButton_SetSwitchedOn("BrainScanRotateLeft_"+lCylinderIndex, false, true);
		
		Sound_CreateAtEntity("TurnLeft", "Entities_Station/object/memchip_cylinder/memchip_cylinder_turn", asEntity, 0.0f, false, 1.0f);
	}

	//-------------------------------------------------------
	
	void OnChangeRotateCylinderLeft(const tString &in asEntity, int alState)
	{
		Entity_SetEffectsActive(asEntity, alState==1, true);
		
		if (alState == -1) return;
		
		mlCylinderButtonsPressed++;
		if (mlCylinderButtonsPressed==2)
		{
			Entity_SetActive("InteractAux_Storage_*",false);
		}
		
		int lCylinderIndex = cString_GetNumericSuffixInt(asEntity);
		Entity_SetVarFloat("BrainScanCylinder_" + lCylinderIndex, "Torque", -750);
		Map_AddTimer("BrainScanCylinder_" + lCylinderIndex, 0.1, "TimerRotateCylinder");
		
		MovingButton_SetSwitchedOn("BrainScanRotateRight_"+lCylinderIndex, false, true);
		
		Sound_CreateAtEntity("TurnRight", "Entities_Station/object/memchip_cylinder/memchip_cylinder_turn", asEntity, 0.0f, false, 1.0f);
		
	}

	//-------------------------------------------------------
	
	void TimerRotateCylinder(const tString &in asTimer)
	{
		float fTorque = Entity_GetVarFloat(asTimer, "Torque");
		Entity_AddTorque(asTimer, cVector3f_Up*fTorque, true, true);
		
		/////////////////////////////////
		// Decrease torque added
		Entity_SetVarFloat(asTimer, "Torque", cMath_InterpolateLinear(fTorque, cMath_Sign(fTorque)*50, 0.2));
		
		Map_AddTimer(asTimer, 0.1, "TimerRotateCylinder");
	}

	//-------------------------------------------------------
	
	void TimerSlowCylinderRotation(const tString &in asTimer)
	{
		Entity_AddTorque(asTimer, Entity_GetVarVector3f(asTimer, "Torque")*-1, true, true);
		Map_AddTimer(asTimer, 0.1, "TimerSlowCylinderRotation");
	}

	//-------------------------------------------------------
	
	bool CollisionCylinderRotationDone(const tString &in asParent, const tString &in asChild, int alState)
	{
		if (alState == -1) return true;
		
		int lCylinderIndex = cString_GetNumericSuffixInt(asChild);
		Map_RemoveTimer("BrainScanCylinder_" + lCylinderIndex);
		
		MovingButton_SetSwitchedOn("BrainScanRotateRight_"+lCylinderIndex, false, true);
		MovingButton_SetSwitchedOn("BrainScanRotateLeft_"+lCylinderIndex, false, true);
		
		return true;
	}

	//-------------------------------------------------------
	
	bool CollisionBrainScanCylinderTurned(const tString &in asParent, const tString &in asChild, int alState)
	{
		if (alState == 1) return true;
		
		lCylindersTurned++;
		if (lCylindersTurned != 2)
		{
			//////////////////////////////////////
			// Just make this a normal burnt chip
			Entity_SetPlayerInteractCallback(asChild, "InteractBrokenChip", true);
			return false;
		}
		
		/////////////////////////////////////////////////////////////
		// Enough cylinders are turned, the unburnt chip appears
		int lCylinderIndex = cString_GetNumericSuffixInt(asChild);
		
		Entity_SetActive(asChild, false);
		Entity_SetActive("BrainScanChip", true);
		Entity_PlaceAtEntity("BrainScanChip", asChild, cVector3f_Zero, true);
		Entity_AttachToEntity("BrainScanChip", "BrainScanCylinder_" + lCylinderIndex, "", true, false);
		
		return false;
	}

	//-------------------------------------------------------
	
	bool mbFoundScanChip = false;
	
	bool PickupBrainScanChip(const tString &in asTool)
	{
		cLux_AddDebugMessage("Found chip");
		Map_AddTimer("3_FoundUnburntChip",1.5f,"TimerPlayComment");
		mbFoundScanChip = true;
		return true;
	}
	
	//-------------------------------------------------------
	
	void InteractBrokenChip(const tString &in asEntity)
	{
		//////////////////////////////////////////////////////////////////////
		// Easier to maintain than 90 extra chip entities in the map file.
		Entity_CreateAtEntity(asEntity+"_Grab", "02_05_computer_scan_chip_damaged.ent", asEntity, false);
		
		Entity_SetActive(asEntity, false);
		Entity_CallEntityInteract(asEntity+"_Grab");
		
		if (!Map_TimerExists("Timer_GrabbedBrokenChip"))
		{
			if (!Map_TimeHasPassed("GrabbedChipAlert",3.0f))
				return;
				
			Map_AddTimer("Timer_GrabbedBrokenChip", cMath_RandRectf(1.0f,2.0f), "Timer_GrabbedBrokenChip");
		}
	}
	
	//-------------------------------------------------------
	
	void Timer_GrabbedBrokenChip(const tString& in asName)
	{
		Voice_Play("3_GrabbedBrokenChip");
	}

	//-------------------------------------------------------

	/////////////////////////////////////////
	// Scene 3 Event C *Find scanned person that know pass-code (dialog)*
	/////////////////////////////////////////

	//-------------------------------------------------------
	
	bool mbPlayHintAfterTroubleshooting = false;
	bool mbServerErrorHintGiven = false;
	bool mbBanterEnabled = false;

	//-------------------------------------------------------
	
	bool CanUseChip(const tString &in asTool, const tString &in asEntityIn)
	{
		tString asEntity = ChipGetInteractName(asEntityIn);
		
		if (asEntity != "SimulationSlot_Right" && 
			asEntity != "SimulationSlot_Left" && 
			asEntity != "ScanRoomSlot")
			return false;
			
		if (asTool == "BrainScanChip" && (asEntity == "SimulationSlot_Left"||asEntity=="ScanRoomSlot") )
			return false;
			
		if (asTool == "EnvironmentChip" && asEntity == "SimulationSlot_Right")
			return false;
		
		//////////////////////////////////////
		// Check if chip already inserted
		return !Entity_IsActive(asEntity+"_Chip");
	}
	
	//-------------------------------------------------------
	
	void OnLookAtBrainSlot(const tString &in asEntity, int alState)
	{
		Entity_SetActive("BrainScanSimulationToolArea_2", (alState==1));
	}
	
	//-------------------------------------------------------
	
	void OnLookAtEnvSlot(const tString &in asEntity, int alState)
	{
		Entity_SetActive("BrainScanSimulationToolArea", (alState==1));
	}
		
	//-------------------------------------------------------
		
	tString ChipGetInteractName(const tString &in asEntity)
	{
		tString asStub = cString_Sub(asEntity,asEntity.length()-8);
		if (asStub=="Interact")
			return cString_Sub(asEntity,0,asEntity.length()-9);
		return asEntity;
	}

	//-------------------------------------------------------
	
	bool OnUseChip(const tString &in asTool, const tString &in asEntityIn)
	{
		tString asEntity = ChipGetInteractName(asEntityIn);
			
		/////////////////////////////
		// Slide in chip
		Entity_PlaceAtEntity(asEntity+"_Chip", asEntity+"_OutPos");
		Entity_SetActive(asEntity+"_Chip", true);
		Prop_MoveLinearTo(asEntity+"_Chip", asEntity+"_InPos", 0.4, 0.3, 0, true);
		
		// Lamp
		Lamp_SetLit(asEntity+"_Empty", false, true);
		Lamp_SetLit(asEntity+"_Full", true, true);
		
		Entity_SetVarString(asTool, "Slot", asEntity);
		Map_AddTimer(asTool, 1, "TimerSimulatorChipIn");
		
		///////////////////////////
		//Chip Insert Sound
		if(asTool=="BrainScanChip")
		{
			//Brian scan chip
			Sound_CreateAtEntity("ChipInsert"+asEntity, "Entities_Station/object/memchip/insert_idle", asEntity+"_Chip", 0.0f, false, 1.0f);
			Sound_CreateAtEntity("ChipInsert"+asEntity, "Entities_Station/object/memchip/insert", asEntity+"_Chip", 0.0f, false, 1.0f);
		}
		else if(asTool=="EnvironmentChip")
		{
			//Environment Chip
			Sound_CreateAtEntity("ChipInsert"+asEntity, "Entities_Station/object/memchip/env_chip/insert", asEntity+"_Chip", 0.0f, false, 1.0f);
		}

		return true;
	}

	//-------------------------------------------------------
	
	bool mbEnvChipUsed = false;
	
	void TimerSimulatorChipIn(const tString &in asTimer)
	{
		//////////////////////////////////////////////////
		// Tell terminal a new chip has been inserted
		tString sSlot = Entity_GetVarString(asTimer, "Slot");
		tString sTerminal = Entity_GetVarString(sSlot, "Terminal");
		AddChip(sTerminal, asTimer);
		
		if (asTimer=="EnvironmentChip")
		{
			mbEnvChipUsed = true;
			EnvChipCopySoundStart("ScanRoomSlot_Chip");
		}
		
		///////////////////////////
		// Allow removal of chip
		Entity_SetActive(sSlot+"_Interact",false);
		Entity_SetPlayerInteractCallback(sSlot, "InteractChipSlot", true);
		
		///////////////////////////////
		// Server error sound
		if (!mbFixedServer)
		{
			Depth_Audio_Terminal_Error(sTerminal);
		}
		
		//////////////////////////////
		// Play hints
		if (!mbFixedServer && !mbServerErrorHintGiven)
		{
			mbServerErrorHintGiven = true;
			if (mbTroubleshot)
			{
				Map_AddTimer("3_InsertChipBeforeServerFix_Troubleshot", 0.6, "TimerPlayVoice");
			}
			else
			{
				mbPlayHintAfterTroubleshooting = true;
				Map_AddTimer("3_InsertChipBeforeServerFix_NoTroubleshoot_1", 0.6, "TimerPlayVoice");
			}
		}
	}

	//-------------------------------------------------------
	
	void InteractChipSlot(const tString&in asEntity)
	{
		tString sChip = "";
		if (Entity_GetVarString("BrainScanChip", "Slot") == asEntity)
			sChip = "BrainScanChip";
		else
			sChip = "EnvironmentChip";
			
		cLux_AddDebugMessage("InteractChipSlot "+sChip);
		
		// Lamp
		Lamp_SetLit(asEntity+"_Full", false, true);
		Lamp_SetLit(asEntity+"_Empty", true, true);
				
		Entity_SetVarString(sChip, "Slot", "");
		Tool_SetAutoHideAfterPickup(sChip, false);
		Entity_SetActive(asEntity+"_Chip", false);
		Map_AddTimer(sChip, 0, "TimerDelayedChipPickup");
		
		//////////////////////////////
		// Remove data from terminal
		tString sTerminal = Entity_GetVarString(asEntity, "Terminal");
		RemoveChip(sTerminal, sChip);
		
		///////////////////////////////////
		//Remove chip sound
		if(asEntity=="SimulationSlot_Right")
		{
			//Brain scan chip
			Sound_CreateAtEntity("ChipRemove", "Entities_Station/object/memchip/remove", asEntity, 0.0f, false, 1.0f);
			Sound_Stop("ChipInsert"+asEntity, 0.0f);
		}
		else if(asEntity=="SimulationSlot_Left" || asEntity=="ScanRoomSlot")
		{
			//environment chip
			Sound_CreateAtEntity("ChipRemove", "Entities_Station/object/memchip/env_chip/remove", asEntity, 0.0f, false, 1.0f);
			EnvChipCopySoundStop(asEntity);
		}

		Entity_SetActive(asEntity+"_Interact",true);
	}

	//-------------------------------------------------------
	
	void TimerDelayedChipPickup(const tString &in asTimer)
	{
		////////////////////////////////////////////////////////////////////////////////////
		// Fixes problem with chip being used on the slot instantly when picked up
		Entity_CallEntityInteract(asTimer);
	}
	
	//-------------------------------------------------------
	
	bool OnTriggerBanter(const tString &in asArea, const tString &in asEntity, int alState)
	{
		if (alState==1)
		{
			StartBanter();
		}
		else if (alState==-1)
		{
			StopBanter();
		}
		return true;
	}
	
	//-------------------------------------------------------
	
	bool OnTriggerSuppressBanter(const tString &in asParent, const tString &in asChild, int alState)
	{
		if (alState==1)
		{
			StopBanter();
			Voice_ClearQueued();
		}
		else if (alState==-1)
		{
			StartBanter();
		}
		return true;
	}

	//-------------------------------------------------------

	void StartBanter(float fDelay = -1)
	{
		cLux_AddDebugMessage("Starting banter");
		mbBanterRunning = true;
		if (Map_TimerExists("TimerBanter"))
			Map_RemoveTimer("TimerBanter");
		float fTime = cMath_RandRectf(gvBanterTimespans.x,gvBanterTimespans.y);
		if (fDelay>0)
			fTime+=fDelay;
		Map_AddTimer("TimerBanter", fTime, "TimerBanter");
	}
	
	//-------------------------------------------------------
	
	int mlPostLearnSimonSubject = 0;
	int mlPostBrandonScan = 0;
	int mlWhereIsEveryoneLevel = 0;
	bool mbKnowsServerNeedsFixed = false;
	int mlCheckoutBrandon=1;
	bool mbBanterRunning=false;
	tString msLastBanterPlayed="";
	
	void TimerBanter(const tString& in asName)
	{
		cLux_AddDebugMessage("Banter timer");
		if (!Voice_AnySceneIsActive()&&!Player_IsInteracting()&&mbBanterEnabled)
		{
			tString sSubject="";
			if (mbUsedSimulator&&!mbFoundBrandonsRoom)
			{
				if (mlCheckoutBrandon<3)
				{
					sSubject="Cath_CheckoutBrandon"+mlCheckoutBrandon;
					mlCheckoutBrandon++;
				}
			}
			if (mbKnowsServerNeedsFixed&&!mbTriggeredServerNoises)
			{
				sSubject="4_HeadingToServersNoCritters";
				mbTriggeredServerNoises = true;
			}
			if ((sSubject=="")&&mbKnowsSimonHistory)
			{
				mlPostLearnSimonSubject++;
				sSubject = "3_PostLearnSimon_"+mlPostLearnSimonSubject;
				cLux_AddDebugMessage("Checking for subject:"+sSubject);
				if (!Voice_SubjectExists(sSubject))
					sSubject="";
			}
			if ((sSubject=="")&&mbGotBackdoorPassword)
			{
				mlPostBrandonScan++;
				sSubject = "3_PostBrandonScan_"+mlPostBrandonScan;
				cLux_AddDebugMessage("Checking for subject:"+sSubject);
				if (!Voice_SubjectExists(sSubject))
					sSubject="";
			}
			if (sSubject=="")
			{
				mlWhereIsEveryoneLevel++;
				if (mbStatusTerminalTriggeredComment)
					sSubject = "2_WhereIsEveryoneSeenMap_"+mlWhereIsEveryoneLevel;
				else
					sSubject = "2_WhereIsEveryone_"+mlWhereIsEveryoneLevel;
				if (!Voice_SubjectExists(sSubject))
					sSubject="";
			}
			
			if (sSubject!="")
			{
				cLux_AddDebugMessage("Playing subject:"+sSubject);
				msLastBanterPlayed = sSubject;
				Voice_PlayWhenPossible(sSubject, "CanPlayBanter", 60.0f, 5.0f, "OnBanterDone", -1);
				return;
			}
		}
		
		if (mbBanterRunning)
			Map_AddTimer("TimerBanter", cMath_RandRectf(gvBanterTimespans.x,gvBanterTimespans.y), "TimerBanter");
	}
	
	//-------------------------------------------------------
	
	void KillActiveBanter()
	{
		if (msLastBanterPlayed=="")
			return;
			
		Voice_AbortIfQueued(msLastBanterPlayed);
		if (Voice_SubjectIsPlaying(msLastBanterPlayed))
			Voice_Stop("Dialog");
		msLastBanterPlayed="";
	}
	
	//-------------------------------------------------------
	
	bool CanPlayBanter(const tString& in asSubject)
	{
		return true;
	}
	 
	//-------------------------------------------------------
	
	void OnBanterDone(const tString&in asScene, const tString&in asSubject)
	{
		if (asSubject==msLastBanterPlayed)
			msLastBanterPlayed="";
			
		if (mbBanterRunning)
		{
			cLux_AddDebugMessage("Restart banter timer");
			Map_AddTimer("TimerBanter", cMath_RandRectf(gvBanterTimespans.x,gvBanterTimespans.y), "TimerBanter");
		}
	}
	
	//-------------------------------------------------------
	
	void StopBanter()
	{
		cLux_AddDebugMessage("Stopping banter");
		mbBanterRunning=false;
		Map_RemoveTimer("TimerBanter");
	}

	//-------------------------------------------------------

	/////////////////////////////////////////
	// Scene 3 Event D *Simulate Brandon (dialog)*
	/////////////////////////////////////////

	//-------------------------------------------------------
	
	tString msCurrentSequence;
	tString msSimScene;
	cSequenceStatesData mSimulatorSequence;
	cVector3f mvSimSceneCameraPos;
	bool mbPromptedAboutAlice = false;

	//-------------------------------------------------------

	void SetupSimulation()
	{
		Gui_CreateCameraTexture("SimCamera", cVector2l(768, 613), 30, 60.0f, 0.1, 120);
		Entity_SetVarVector3f("SimCameraArea_Void", "StartPos", Map_GetEntity("SimCameraArea_Void").GetPosition());
		Entity_SetVarVector3f("SimCameraArea_ScanRoom", "StartPos", Map_GetEntity("SimCameraArea_ScanRoom").GetPosition());
		Entity_SetVarVector3f("SimCameraArea_Beach", "StartPos", Map_GetEntity("SimCameraArea_Beach").GetPosition());
		Entity_SetVarVector3f("SimCameraArea_Cabin", "StartPos", Map_GetEntity("SimCameraArea_Cabin").GetPosition());
	}

	//-------------------------------------------------------
	
	void StartBrandonSimulation(const tString &in asSequenceFunc, const tString &in asScene, bool abAlice=false)
	{
		Sequence_Begin(asSequenceFunc, mSimulatorSequence);
		
			//////////////////////////////////////
			// First steps of all simulations
			if (Sequence_DoStepAndWait(1.5))
			{
				Voice_StopAll();
				Voice_ClearQueued();
		
				Terminal_SetImGuiStateFloat("BrainScanSimulationTerminal","ShowSimFail",0.0f);
				msCurrentSequence = asSequenceFunc;
				msSimScene = asScene;
				msSimBrandon="Brandon_"+asScene;
				tString sSimAlice="Alice_"+asScene;
				mbUsedSimulator = true;
				
				Depth_Audio_Terminal_Forward("BrainScanSimulationTerminal");
				Sound_CreateAtEntity("ScanStart", "02_05_theta/sfx/events/brandon_scan/scan_start", "BrainScanSimulationTerminal");
				Map_AddTimer("StopAmbientMusicQuickly", 1.0f, "AmbientMusicHandler");
				mbAmbientMusicAllowed = false; 
				
				Entity_SetActive(msSimBrandon,true);
				Entity_SetActive(sSimAlice,abAlice);
				
				// Anims
				NPC_SetMainAnimation(msSimBrandon,"sit_calm");
				NPC_SetMainAnimation(sSimAlice, "stand_calm");
				
				// These are dummies to make the lipsync work
				Voice_SetSource("Wan",msSimBrandon,1000, 1000, true, 1000);
				Voice_SetSource("Alice",sSimAlice,1000, 1000, true, 1000);
				
				mvSimSceneCameraPos = Entity_GetVarVector3f("SimCameraArea_"+asScene, "StartPos");
				Terminal_SetImGuiStateVector3f("BrainScanSimulationTerminal", "CameraPos", mvSimSceneCameraPos);
				cVector3f vDirection = Map_GetEntity("SimCameraTarget_"+asScene).GetPosition()- mvSimSceneCameraPos;
				vDirection.Normalize();
				Terminal_FadeImGuiStateVector3f("BrainScanSimulationTerminal", "CameraPos", mvSimSceneCameraPos+vDirection*2.0f,60.0f);
				Gui_AttachCameraTextureToEntity("SimCamera", "SimCameraArea_"+asScene);
			}
			else if (Sequence_DoStepAndContinue())
			{
				Terminal_FadeImGuiStateFloat("BrainScanSimulationTerminal", "ForegroundAlpha", 0, 2);
			}
	}

	//-------------------------------------------------------
	
	int mlSimulationEndVoiceLine = 0;
	int mlSimulationSameVoiceLine = 0;
	bool mbFirstSimulationCompleted = false;
	
	void EndBrandonSimulation(const tString &in asSimulation)
	{
		if (Sequence_DoStepAndWait(2))
		{
			mbFirstSimulationCompleted = true;
			
			Terminal_FadeImGuiStateFloat("BrainScanSimulationTerminal", "ForegroundAlpha", 1, 1);
			if (!mbGotBackdoorPassword)
			{
				Terminal_SetImGuiStateFloat("BrainScanSimulationTerminal","ShowSimFail",1.0f);
				Terminal_FadeImGuiStateFloat("BrainScanSimulationTerminal","ShowSimFail",0.0f,2.0f);
				
				mbAmbientMusicAllowed = true;
				Map_AddTimer("StartAmbient", cMath_RandRectf(5.0f,10.0f), "AmbientMusicHandler");
				Sound_CreateAtEntity("ScanEnd", "02_05_theta/sfx/events/brandon_scan/scan_end", "BrainScanSimulationTerminal");
				Sound_Stop("ScanStart", 0.25f);
			}
		}
		if (Sequence_DoStepAndWait(0.25))
		{
			Player_SetActive(true);
			mSimulationTerminalState = eSimulationTerminalState_SimulationSetup;
			
			mbSimulationDisabled = true;
			
			Entity_SetActive(msSimBrandon,false);
			Entity_SetActive("Alice_"+msSimScene,false);
			
			if (mbGotBackdoorPassword)
			{
				Player_ChangeStateToNormal();
			}
		}
		
		////////////////////////
		// Play voice
		else if (Sequence_DoStepAndWait(0))
		{
			bool bDoneThisOneBefore = cScript_GetGlobalVarBool("Scanned_"+asSimulation);
			cScript_SetGlobalVarBool("Scanned_"+asSimulation, true);
		
			tString sSubject;
			if (bDoneThisOneBefore)
			{
				mlSimulationSameVoiceLine++;
				sSubject = "3_SimulationSame_"+mlSimulationSameVoiceLine;
				if (!Voice_SubjectExists(sSubject))
				{
					sSubject = "3_SimulationSame_Generic";
				}

			}
			else
			{
				mlSimulationEndVoiceLine++;
				sSubject = "3_SimulationDone_"+mlSimulationEndVoiceLine;
				if (!Voice_SubjectExists(sSubject))
				{
					sSubject = "3_SimulationDone_Generic";
				}
			}
			
			if (!mbPromptedAboutAlice)
			{
				bool bSimHasAlice = (cString_Sub(asSimulation,0,5)=="Alice");
				if ( (mlCluesFound == 2)&&!bSimHasAlice ) 
				{
					sSubject = "3_Simulation_UseAlice";
					mbPromptedAboutAlice = true;
				}
			}
			
			if (mbGotBackdoorPassword)
			{
				SimulationSuccessful();
			}
			else
			{
				Voice_Play(sSubject, -1, "VoiceSimulationFailed");
			}
				
			Entity_SetVarBool("BrainScanSimulationTerminal", asSimulation, true);
			
			// Check whether we should prompt the player to go to Brandon's Room
			// Have we been to Brandon's room?
			if (!mbFoundBrandonsRoom)
			{
				if (!Map_TimerExists("TimerPromptAboutBrandonsRoom"))
				{
					// Have we played all the sims?
					if ( 	cScript_GetGlobalVarBool("Scanned_AloneVoid") &&
							cScript_GetGlobalVarBool("Scanned_AloneCabin") &&
							cScript_GetGlobalVarBool("Scanned_AloneBeach") &&
							cScript_GetGlobalVarBool("Scanned_AloneScanRoom")==false)
					{
						Map_AddTimer("TimerPromptAboutBrandonsRoom", 300.0f, "TimerPromptAboutBrandonsRoom");
						
						LastOnSoma_SetText("02_05_theta_inside_4");
					}
				}
			}
			else
			{
				// Have we played all the sims?
				if (	cScript_GetGlobalVarBool("Scanned_AliceVoid") &&
						cScript_GetGlobalVarBool("Scanned_AliceCabin") &&
						cScript_GetGlobalVarBool("Scanned_AliceBeach") &&
						cScript_GetGlobalVarBool("Scanned_AliceScanRoom")==false)
				{
					LastOnSoma_SetText("02_05_theta_inside_5");
				}
			}
		}
	
		Sequence_End();
	}
	
	//-------------------------------------------------------
	
	void TimerPromptAboutBrandonsRooms(const tString& in asName)
	{
		Voice_PlayWhenPossible("3_Simulation_PromptBrandonsRoom");
	}

	//-------------------------------------------------------
	
	void StartSimulationDialog(const tString &in asName, int alSubjectCount)
	{
		Dialog_Begin();
			Dialog_AddBranch(asName);
			for(int i=1; i<=alSubjectCount; i++)
			{
				tString sCallback = i==alSubjectCount ? "SubjectSimulation" : "";
				Dialog_AddSubject(asName + "_" + i, sCallback);
			}
		Dialog_End();
	}

	//-------------------------------------------------------
	
	cSequenceStatesData mAbortSimulationSequence;
		
	void SequenceAbortSimulation(const tString &in asTimer)
	{
		Sequence_Begin("SequenceAbortSimulation", mAbortSimulationSequence);
			
		if (Sequence_DoStepAndWait(0.3))
		{
			Depth_Audio_Terminal_Forward("BrainScanSimulationTerminal");
			
			Dialog_Stop("Simulation");
			SequenceStates_Stop(msCurrentSequence);
			mSimulatorSequence.mlStateCounter = 0;
			Terminal_FadeImGuiStateFloat("BrainScanSimulationTerminal", "ForegroundAlpha", 1, 0.3);
			
			//End scan sound
			Sound_CreateAtEntity("ScanEnd", "02_05_theta/sfx/events/brandon_scan/scan_end", "BrainScanSimulationTerminal");
			Sound_Stop("ScanStart", 0.25f);
		}
		if (Sequence_DoStepAndWait(0.25))
		{
			Player_SetActive(true);
			mSimulationTerminalState = eSimulationTerminalState_SimulationSetup;
			
			mbSimulationDisabled = true;
			
			if (mbGotBackdoorPassword)
			{
				Player_ChangeStateToNormal();
			}
		}
		else if (Sequence_DoStepAndWait(0))
		{
			if (mbGotBackdoorPassword)
			{
				SimulationSuccessful();
			}
			else
			{
				Voice_Play("3_PlayerAbortedSimulation", -1, "VoiceSimulationFailed");
				mbAmbientMusicAllowed = true;
				Map_AddTimer("StartAmbient", cMath_RandRectf(5.0f,10.0f), "AmbientMusicHandler");
			}
		}
		Sequence_End();
	}

	//-------------------------------------------------------
		
	tString msSimBrandon;
	
	void SequenceBrandonAloneInVoid(const tString &in asTimer)
	{			
		StartBrandonSimulation("SequenceBrandonAloneInVoid", "Void");
		if (Sequence_DoStepAndWait(1))
		{
			Entity_SetActive("Alice_Void",false);
		}
		else if (Sequence_DoStepAndPause(0.0))
		{
			Dialog_Begin("Simulation");
				Dialog_AddBranch("3_AloneVoid");
					Dialog_AddSubject("3_AloneVoid_1", "SimCallback_AloneVoid");
					Dialog_AddSubject("3_AloneVoid_2", "SimCallback_AloneVoid");
					Dialog_AddSubject("3_AloneVoid_3", "SimCallback_AloneVoid");
					Dialog_AddSubject("3_AloneVoid_4", "SimCallback_AloneVoid");
					Dialog_AddSubject("3_AloneVoid_5", "SimCallback_AloneVoid");
					Dialog_AddSubject("3_AloneVoid_6", "SimCallback_AloneVoid");
					Dialog_AddSubject("3_AloneVoid_7", "SimCallback_AloneVoid");
			Dialog_End();
		}
		
		EndBrandonSimulation("AloneVoid");
	}
	
	//-------------------------------------------------------
	
	void SimCallback_AloneVoid(const tString &in asSubject, bool abStartOfSubject)
	{
		if (asSubject=="3_AloneVoid_1")
		{
			if (abStartOfSubject)
			{
				FadeSimStressLevel(0.3f);
				Map_AddTimer("sit_confused",0.5f,"TimerBrandonSetMainAnimation");
				//Map_AddTimer("sit_confused_extra01",0.75f,"TimerBrandonPlayExtraAnimation");
			}
		}
		else if (asSubject=="3_AloneVoid_2")
		{
			if (abStartOfSubject)
				FadeSimStressLevel(0.4f);
		}
		else if (asSubject=="3_AloneVoid_3")
		{
			if (abStartOfSubject)
			{
				FadeSimStressLevel(0.5f);
				NPC_PlayExtraAnimation("Brandon_Void", "sit_confused_extra02");
			}
		}
		else if (asSubject=="3_AloneVoid_4")
		{
			if (abStartOfSubject)
			{
				FadeSimStressLevel(0.6f);
				Map_AddTimer("sit_confused_extra02",0.01f,"TimerBrandonPlayExtraAnimation");
				Map_AddTimer("sit_panic",0.5f,"TimerBrandonSetMainAnimation");
			}
		}
		else if (asSubject=="3_AloneVoid_5")
		{
			if (abStartOfSubject)
			{
				FadeSimStressLevel(0.7f);
			}
		}
		else if (asSubject=="3_AloneVoid_6")
		{
			if (abStartOfSubject)
			{
				Map_AddTimer("sit_panic_extra02",1.0f,"TimerBrandonPlayExtraAnimation");
				FadeSimStressLevel(0.8f);
			}
		}
		else if (asSubject=="3_AloneVoid_7")
		{
			if (abStartOfSubject)
			{
				NPC_PlayExtraAnimation("Brandon_Void", "sit_panic_extra01");
				FadeSimStressLevel(0.9f);
				Map_AddTimer("sit_angry",4.0f,"TimerBrandonSetMainAnimation");
				Map_AddTimer("sit_about_to_leave",6.25f,"TimerBrandonSetMainAnimation");
			}
			else
				SequenceStates_Resume(msCurrentSequence);
		}
	}
	
	//-------------------------------------------------------
	
	void TimerBrandonSetMainAnimation(const tString& in asAnimation)
	{
		NPC_SetMainAnimation(msSimBrandon, asAnimation);
	}
	
	//-------------------------------------------------------
	
	void TimerBrandonPlayExtraAnimation(const tString& in asAnimation)
	{
		NPC_PlayExtraAnimation(msSimBrandon, asAnimation);
	}

	//-------------------------------------------------------
		
	void SequenceBrandonAloneInCabin(const tString &in asTimer)
	{			
		StartBrandonSimulation("SequenceBrandonAloneInCabin", "Cabin");
		if (Sequence_DoStepAndWait(1))
		{
			Entity_SetActive("Alice_Cabin",false);
		}
		else if (Sequence_DoStepAndPause(0.0))
		{
			Dialog_Begin("Simulation");
				Dialog_AddBranch("3_AloneCabin");
					Dialog_AddSubject("3_AloneCabin_1", "SimCallback_AloneCabin");
					Dialog_AddSubject("3_AloneCabin_2", "SimCallback_AloneCabin");
					Dialog_AddSubject("3_AloneCabin_3", "SimCallback_AloneCabin");
					Dialog_AddSubject("3_AloneCabin_4", "SimCallback_AloneCabin");
					Dialog_AddSubject("3_AloneCabin_5", "SimCallback_AloneCabin");
					Dialog_AddSubject("3_AloneCabin_6", "SimCallback_AloneCabin");
					Dialog_AddSubject("3_AloneCabin_7", "SimCallback_AloneCabin");
			Dialog_End();
		}
		
		EndBrandonSimulation("AloneCabin");
	}
	
	//-------------------------------------------------------
	
	void SimCallback_AloneCabin(const tString &in asSubject, bool abStartOfSubject)
	{
		if (asSubject=="3_AloneCabin_1")
		{
			if (abStartOfSubject)
			{
				FadeSimStressLevel(0.3f);
				Map_AddTimer("sit_confused",0.5f,"TimerBrandonSetMainAnimation");
				//Map_AddTimer("sit_confused_extra01",0.75f,"TimerBrandonPlayExtraAnimation");
			}
		}
		else if (asSubject=="3_AloneCabin_2")
		{
			if (abStartOfSubject)
				FadeSimStressLevel(0.4f);
		}
		else if (asSubject=="3_AloneCabin_3")
		{
			if (abStartOfSubject)
			{
				FadeSimStressLevel(0.5f);
				NPC_PlayExtraAnimation("Brandon_Cabin", "sit_confused_extra02");
			}
		}
		else if (asSubject=="3_AloneCabin_4")
		{
			if (abStartOfSubject)
			{
				FadeSimStressLevel(0.6f);
				Map_AddTimer("sit_angry",0.5f,"TimerBrandonSetMainAnimation");
			}
		}
		else if (asSubject=="3_AloneCabin_5")
		{
			if (abStartOfSubject)
				FadeSimStressLevel(0.7f);
		}
		else if (asSubject=="3_AloneCabin_6")
		{
			if (abStartOfSubject)
			{
				FadeSimStressLevel(0.8f);
				Map_AddTimer("sit_angry_extra02",1.0f,"TimerBrandonPlayExtraAnimation");
			}
		}
		else if (asSubject=="3_AloneCabin_7")
		{
			if (abStartOfSubject)
			{
				FadeSimStressLevel(0.9f);
				NPC_PlayExtraAnimation("Brandon_Cabin", "sit_angry_extra01");
				Map_AddTimer("sit_about_to_leave",6.25f,"TimerBrandonSetMainAnimation");
			}
			else
				SequenceStates_Resume(msCurrentSequence);
		}
	}

	//-------------------------------------------------------
		
	void SequenceBrandonAloneOnBeach(const tString &in asTimer)
	{
		StartBrandonSimulation("SequenceBrandonAloneOnBeach", "Beach");
		if (Sequence_DoStepAndWait(1))
		{
			Entity_SetActive("Alice_Beach",false);
		}
		else if (Sequence_DoStepAndPause(0.0f))
		{
			Dialog_Begin("Simulation");
				Dialog_AddBranch("3_AloneBeach");
					Dialog_AddSubject("3_AloneBeach_1", "SimCallback_AloneBeach"); // How did I get here?
					Dialog_AddSubject("3_AloneBeach_2", "SimCallback_AloneBeach"); // Hi!
					Dialog_AddSubject("3_AloneBeach_3", "SimCallback_AloneBeach"); // Who's there?
					Dialog_AddSubject("3_AloneBeach_4", "SimCallback_AloneBeach"); // Please, Mr. Wan...
					Dialog_AddSubject("3_AloneBeach_5", "SimCallback_AloneBeach"); // *Scream*
			Dialog_End();
		}
		
		EndBrandonSimulation("AloneBeach");
	}
	
	//-------------------------------------------------------
	
	void SimCallback_AloneBeach(const tString &in asSubject, bool abStartOfSubject)
	{
		if (asSubject=="3_AloneBeach_1")
		{
			if (abStartOfSubject)
			{
				FadeSimStressLevel(0.3f);
				Map_AddTimer("sit_confused",0.5f,"TimerBrandonSetMainAnimation");
				//Map_AddTimer("sit_confused_extra01",0.75f,"TimerBrandonPlayExtraAnimation");
			}
		}
		else if (asSubject=="3_AloneBeach_2")
		{
			if (abStartOfSubject)
				FadeSimStressLevel(0.45f);
		}
		else if (asSubject=="3_AloneBeach_3")
		{
			if (abStartOfSubject)
			{
				FadeSimStressLevel(0.6f);
				Map_AddTimer("sit_confused_extra02",4.0f,"TimerBrandonPlayExtraAnimation");
				NPC_PlayExtraAnimation("Brandon_Beach", "sit_confused_extra03");
			}
		}
		else if (asSubject=="3_AloneBeach_4")
		{
			if (abStartOfSubject)
			{
				FadeSimStressLevel(0.75f);
				Map_AddTimer("sit_panic",4.0f,"TimerBrandonSetMainAnimation");
			}
		}
		else if (asSubject=="3_AloneBeach_5")
		{
			if (abStartOfSubject)
			{
				FadeSimStressLevel(0.9f);
				Map_AddTimer("sit_panic_extra02",3.0f,"TimerBrandonPlayExtraAnimation");
				Map_AddTimer("sit_panic_extra03",7.0f,"TimerBrandonPlayExtraAnimation");
				Map_AddTimer("sit_panic_extra01",10.0f,"TimerBrandonPlayExtraAnimation");
			}
			else
				SequenceStates_Resume(msCurrentSequence);
		}
	}

	//-------------------------------------------------------
		
	void SequenceBrandonAloneInScanRoom(const tString &in asTimer)
	{
		StartBrandonSimulation("SequenceBrandonAloneInScanRoom", "ScanRoom");
		if (Sequence_DoStepAndWait(1))
		{
			Entity_SetActive("Alice_ScanRoom",false);
		}
		else if (Sequence_DoStepAndPause(0.0f))
		{
			Dialog_Begin("Simulation");
				Dialog_AddBranch("3_AloneScanRoom");
					Dialog_AddSubject("3_AloneScanRoom_1", "SimCallback_AloneScanRoom"); // Where did Alice go?
					Dialog_AddSubject("3_AloneScanRoom_2", "SimCallback_AloneScanRoom"); // It's over now
					Dialog_AddSubject("3_AloneScanRoom_3", "SimCallback_AloneScanRoom"); // Chun? I feel strange.
					Dialog_AddSubject("3_AloneScanRoom_4", "SimCallback_AloneScanRoom"); // I need the cipher for the mainframe.
					Dialog_AddSubject("3_AloneScanRoom_5", "SimCallback_AloneScanRoom"); // This is a trick!
					Dialog_AddSubject("3_AloneScanRoom_6", "SimCallback_AloneScanRoom"); // Please, Mr. Wan...
					Dialog_AddSubject("3_AloneScanRoom_7", "SimCallback_AloneScanRoom"); // *Scream*
			Dialog_End();
		}
		
		EndBrandonSimulation("AloneScanRoom");
	}
	
	//-------------------------------------------------------
	
	void SimCallback_AloneScanRoom(const tString &in asSubject, bool abStartOfSubject)
	{
		if (asSubject=="3_AloneScanRoom_1")
		{
			if (abStartOfSubject)
			{
				FadeSimStressLevel(0.3f);
				Map_AddTimer("sit_confused",0.5f,"TimerBrandonSetMainAnimation");
				//Map_AddTimer("sit_confused_extra01",0.75f,"TimerBrandonPlayExtraAnimation");
			}
		}
		else if (asSubject=="3_AloneScanRoom_2")
		{
			if (abStartOfSubject)
			{
				FadeSimStressLevel(0.3f);
				Map_AddTimer("sit_confused_extra03", 3.0f, "TimerBrandonPlayExtraAnimation");
			}
		}
		else if (asSubject=="3_AloneScanRoom_3")
		{
			if (abStartOfSubject)
			{
				FadeSimStressLevel(0.4f);
				Map_AddTimer("sit_confused_extra02",4.0f,"TimerBrandonPlayExtraAnimation");
			}
		}
		else if (asSubject=="3_AloneScanRoom_4")
		{
			if (abStartOfSubject)
				FadeSimStressLevel(0.5f);
		}
		else if (asSubject=="3_AloneScanRoom_5")
		{
			if (abStartOfSubject)
			{
				FadeSimStressLevel(0.7f);
				NPC_SetMainAnimation("Brandon_ScanRoom", "sit_angry");
				Map_AddTimer("sit_angry_extra02",3.5f,"TimerBrandonPlayExtraAnimation");
			}
		}
		else if (asSubject=="3_AloneScanRoom_6")
		{
			if (abStartOfSubject)
				FadeSimStressLevel(0.8f);
		}
		else if (asSubject=="3_AloneScanRoom_7")
		{
			if (abStartOfSubject)
			{
				FadeSimStressLevel(0.9f);
				Map_AddTimer("sit_angry_extra01",0.01f,"TimerBrandonPlayExtraAnimation");
				Map_AddTimer("sit_about_to_leave",5.0f,"TimerBrandonSetMainAnimation");
			}
			else
				SequenceStates_Resume(msCurrentSequence);
		}
	}

	//-------------------------------------------------------
		
	void SequenceBrandonAndAliceInVoid(const tString &in asTimer)
	{
		StartBrandonSimulation("SequenceBrandonAndAliceInVoid", "Void");
		if (Sequence_DoStepAndWait(1))
		{
			Entity_SetActive("Alice_Void",true);
		}
		else if (Sequence_DoStepAndPause(0.0f))
		{
			Dialog_Begin("Simulation");
				Dialog_AddBranch("3_AliceVoid");
					Dialog_AddSubject("3_AliceVoid_1", "SimCallback_AliceVoid"); // That wasn't so bad.
					Dialog_AddSubject("3_AliceVoid_2", "SimCallback_AliceVoid"); // Glad to hear
					Dialog_AddSubject("3_AliceVoid_3", "SimCallback_AliceVoid"); // What happened to this place?
					Dialog_AddSubject("3_AliceVoid_4", "SimCallback_AliceVoid"); // Nothing
					Dialog_AddSubject("3_AliceVoid_5", "SimCallback_AliceVoid"); // Why are you acting like that?
					Dialog_AddSubject("3_AliceVoid_6", "SimCallback_AliceVoid"); // Why are YOU acting like THAT?
					Dialog_AddSubject("3_AliceVoid_7", "SimCallback_AliceVoid"); // What have you done to me?
					Dialog_AddSubject("3_AliceVoid_8", "SimCallback_AliceVoid"); // It's all right!
					Dialog_AddSubject("3_AliceVoid_9", "SimCallback_AliceVoid"); // Help! Help! *Screams*
			Dialog_End();
		}
		
		EndBrandonSimulation("AliceVoid");
	}
	
	//-------------------------------------------------------
	
	void SimCallback_AliceVoid(const tString &in asSubject, bool abStartOfSubject)
	{
		if (asSubject=="3_AliceVoid_1")
		{
			if (abStartOfSubject)
			{
				FadeSimStressLevel(0.3f);
			}
		}
		else if (asSubject=="3_AliceVoid_2")
		{
			if (abStartOfSubject)
			{
				FadeSimStressLevel(0.35f);
				NPC_PlayExtraAnimation("Alice_Void", "stand_calm_talking_extra01");
				Map_AddTimer("sit_confused",4.0f,"TimerBrandonSetMainAnimation");
			}
		}
		else if (asSubject=="3_AliceVoid_3")
		{
			if (abStartOfSubject)
			{
				//NPC_PlayExtraAnimation("Brandon_Void", "sit_confused_extra01");
				FadeSimStressLevel(0.4f);
			}
		}
		else if (asSubject=="3_AliceVoid_4")
		{
			if (abStartOfSubject)
			{
				FadeSimStressLevel(0.45f);
				NPC_PlayExtraAnimation("Alice_Void", "stand_calm_talking_extra02");
			}
		}
		else if (asSubject=="3_AliceVoid_5")
		{
			if (abStartOfSubject)
			{
				FadeSimStressLevel(0.5f);
				NPC_PlayExtraAnimation("Brandon_Void", "sit_confused_extra02");
			}
		}
		else if (asSubject=="3_AliceVoid_6")
		{
			if (abStartOfSubject)
			{
				FadeSimStressLevel(0.6f);
				NPC_SetMainAnimation("Alice_Void", "stand_reassuring");
				NPC_PlayExtraAnimation("Alice_Void", "stand_reassuring_talking_extra01");
				Map_AddTimer("sit_angry",4.0f,"TimerBrandonSetMainAnimation");
			}
		}
		else if (asSubject=="3_AliceVoid_7")
		{
			if (abStartOfSubject)
			{
				FadeSimStressLevel(0.7f);
				NPC_PlayExtraAnimation("Brandon_Void", "sit_angry_extra01");
			}
		}
		else if (asSubject=="3_AliceVoid_8")
		{
			if (abStartOfSubject)
			{
				FadeSimStressLevel(0.8f);
				NPC_PlayExtraAnimation("Alice_Void", "stand_reassuring_talking_extra03");
			}
		}
		else if (asSubject=="3_AliceVoid_9")
		{
			if (abStartOfSubject)
			{
				FadeSimStressLevel(0.9f);
				Map_AddTimer("sit_angry_extra02",0.01f,"TimerBrandonPlayExtraAnimation");
				Map_AddTimer("sit_about_to_leave",9.0f,"TimerBrandonSetMainAnimation");
			}
			else
				SequenceStates_Resume(msCurrentSequence);
		}
	}

	//-------------------------------------------------------
		
	void SequenceBrandonAndAliceInCabin(const tString &in asTimer)
	{
		StartBrandonSimulation("SequenceBrandonAndAliceInCabin", "Cabin");
		if (Sequence_DoStepAndWait(1))
		{
			Entity_SetActive("Alice_Cabin",true);
		}
		else if (Sequence_DoStepAndPause(1.0f))
		{
			Dialog_Begin("Simulation");
				Dialog_AddBranch("3_AliceCabin");
					Dialog_AddSubject("3_AliceCabin_1", "SimCallback_AliceCabin"); // That wasn't so bad
					Dialog_AddSubject("3_AliceCabin_2", "SimCallback_AliceCabin"); // That's nice
					Dialog_AddSubject("3_AliceCabin_3", "SimCallback_AliceCabin"); // Alice, where are we?
					Dialog_AddSubject("3_AliceCabin_4", "SimCallback_AliceCabin"); // Isn't it great?
					Dialog_AddSubject("3_AliceCabin_5", "SimCallback_AliceCabin"); // Why are you lying?
					Dialog_AddSubject("3_AliceCabin_6", "SimCallback_AliceCabin"); // Tell me the cipher
					Dialog_AddSubject("3_AliceCabin_7", "SimCallback_AliceCabin"); // Get away from me! *screams*
			Dialog_End();
		}
		
		EndBrandonSimulation("AliceCabin");
	}
	
	//-------------------------------------------------------
	
	void SimCallback_AliceCabin(const tString &in asSubject, bool abStartOfSubject)
	{
		if (asSubject=="3_AliceCabin_1")
		{
			if (abStartOfSubject)
			{
				FadeSimStressLevel(0.3f);
				Map_AddTimer("sit_confused",6.0f,"TimerBrandonSetMainAnimation");
				Map_AddTimer("sit_confused_extra03",6.5f,"TimerBrandonPlayExtraAnimation");
			}
		}
		else if (asSubject=="3_AliceCabin_2")
		{
			if (abStartOfSubject)
			{
				FadeSimStressLevel(0.3f);
				NPC_PlayExtraAnimation("Alice_Cabin", "stand_calm_talking_extra01");
			}
		}
		else if (asSubject=="3_AliceCabin_3")
		{
			if (abStartOfSubject)
			{
				FadeSimStressLevel(0.4f);
				Map_AddTimer("sit_confused_extra02",0.1f,"TimerBrandonPlayExtraAnimation");
			}
		}
		else if (asSubject=="3_AliceCabin_4")
		{
			if (abStartOfSubject)
			{
				FadeSimStressLevel(0.5f);
				NPC_PlayExtraAnimation("Alice_Cabin", "stand_calm_talking_extra03");
				Map_AddTimer("sit_panic",4.0f,"TimerBrandonSetMainAnimation");
			}
		}
		else if (asSubject=="3_AliceCabin_5")
		{
			if (abStartOfSubject)
				FadeSimStressLevel(0.6f);
		}
		else if (asSubject=="3_AliceCabin_6")
		{
			if (abStartOfSubject)
			{
				FadeSimStressLevel(0.75f);
				NPC_SetMainAnimation("Alice_Cabin", "stand_reassuring");
				NPC_PlayExtraAnimation("Alice_Cabin", "stand_reassuring_talking_extra01");
			}
		}
		else if (asSubject=="3_AliceCabin_7")
		{
			if (abStartOfSubject)
			{
				FadeSimStressLevel(0.9f);
				Map_AddTimer("sit_angry",0.1f,"TimerBrandonSetMainAnimation");
				Map_AddTimer("sit_angry_extra01",3.0f,"TimerBrandonPlayExtraAnimation");
				Map_AddTimer("sit_angry_extra02",7.0f,"TimerBrandonPlayExtraAnimation");
			}
			else
				SequenceStates_Resume(msCurrentSequence);
		}
	}

	//-------------------------------------------------------
		
	void SequenceBrandonAndAliceOnBeach(const tString &in asTimer)
	{
		StartBrandonSimulation("SequenceBrandonAndAliceOnBeach", "Beach");
		if (Sequence_DoStepAndWait(1))
		{
			Entity_SetActive("Alice_Beach",true);
		}
		else if (Sequence_DoStepAndPause(1.0f))
		{
			Dialog_Begin("Simulation");
				Dialog_AddBranch("3_AliceBeach");
					Dialog_AddSubject("3_AliceBeach_1", "SimCallback_AliceBeach"); // That wasn't so bad
					Dialog_AddSubject("3_AliceBeach_2", "SimCallback_AliceBeach"); // Brandon Wan
					Dialog_AddSubject("3_AliceBeach_3", "SimCallback_AliceBeach"); // What are we doing here?
					Dialog_AddSubject("3_AliceBeach_4", "SimCallback_AliceBeach"); // Welcome to the ark!
					Dialog_AddSubject("3_AliceBeach_5", "SimCallback_AliceBeach"); // Really? It feels so strange.
					Dialog_AddSubject("3_AliceBeach_6", "SimCallback_AliceBeach"); // It sure is different.
					Dialog_AddSubject("3_AliceBeach_7", "SimCallback_AliceBeach"); // I just got scanned
					Dialog_AddSubject("3_AliceBeach_8", "SimCallback_AliceBeach"); // That's how it works
					Dialog_AddSubject("3_AliceBeach_9", "SimCallback_AliceBeach"); // So we made it?
					Dialog_AddSubject("3_AliceBeach_10", "SimCallback_AliceBeach"); // Do you remember the cipher?
					Dialog_AddSubject("3_AliceBeach_11", "SimCallback_AliceBeach"); // What do you mean?
					Dialog_AddSubject("3_AliceBeach_12", "SimCallback_AliceBeach"); // To access the Theta systems
					Dialog_AddSubject("3_AliceBeach_13", "SimCallback_AliceBeach"); // Why would you need that? You're lying!
					Dialog_AddSubject("3_AliceBeach_14", "SimCallback_AliceBeach"); // Please, it's important!
					Dialog_AddSubject("3_AliceBeach_15", "SimCallback_AliceBeach"); // No, please let me go! *screams*
			Dialog_End();
		}
		
		EndBrandonSimulation("AliceBeach");
	}
	
	//-------------------------------------------------------
	
	void SimCallback_AliceBeach(const tString &in asSubject, bool abStartOfSubject)
	{
		if (asSubject=="3_AliceBeach_1")
		{
			if (abStartOfSubject)
			{
				FadeSimStressLevel(0.3f);
				Map_AddTimer("sit_confused",6.0f,"TimerBrandonSetMainAnimation");
				Map_AddTimer("sit_confused_extra03",6.5f,"TimerBrandonPlayExtraAnimation");
			}
		}
		else if (asSubject=="3_AliceBeach_2")
		{
			if (abStartOfSubject)
			{
				NPC_PlayExtraAnimation("Alice_Beach", "stand_calm_talking_extra02");
			}
		}
		else if (asSubject=="3_AliceBeach_3")
		{
			if (abStartOfSubject)
			{
				FadeSimStressLevel(0.3f);
				//Map_AddTimer("sit_confused_extra01",0.2f,"TimerBrandonPlayExtraAnimation");
			}
		}
		else if (asSubject=="3_AliceBeach_4")
		{
			if (abStartOfSubject)
			{
				NPC_PlayExtraAnimation("Alice_Beach", "stand_calm_talking_extra01");
			}
		}
		else if (asSubject=="3_AliceBeach_5")
		{
			if (abStartOfSubject)
			{
				FadeSimStressLevel(0.4f);
				Map_AddTimer("sit_confused_extra03",0.3f,"TimerBrandonPlayExtraAnimation");
			}
		}
		else if (asSubject=="3_AliceBeach_6")
		{
			if (abStartOfSubject)
			{
				NPC_PlayExtraAnimation("Alice_Beach", "stand_calm_talking_extra03");
			}
		}
		else if (asSubject=="3_AliceBeach_7")
		{
			if (abStartOfSubject)
			{
				FadeSimStressLevel(0.5f);
				Map_AddTimer("sit_calm",0.2f,"TimerBrandonSetMainAnimation");
			}
		}
		else if (asSubject=="3_AliceBeach_8")
		{
			if (abStartOfSubject)
			{
				NPC_PlayExtraAnimation("Alice_Beach", "stand_calm_talking_extra02");
			}
		}
		else if (asSubject=="3_AliceBeach_9")
		{
			if (abStartOfSubject)
			{
				FadeSimStressLevel(0.6f);
				Map_AddTimer("sit_panic",0.65f,"TimerBrandonSetMainAnimation");
				Map_AddTimer("sit_panic_extra02",0.7f,"TimerBrandonPlayExtraAnimation");
			}
		}
		else if (asSubject=="3_AliceBeach_10")
		{
			if (abStartOfSubject)
			{
				NPC_SetMainAnimation("Alice_Beach", "stand_reassuring");
				NPC_PlayExtraAnimation("Alice_Beach", "stand_reassuring_talking_extra02");
			}
		}
		else if (asSubject=="3_AliceBeach_11")
		{
			if (abStartOfSubject)
			{
				FadeSimStressLevel(0.7f);
				Map_AddTimer("sit_angry",0.2f,"TimerBrandonSetMainAnimation");
				Map_AddTimer("sit_angry_extra02",4.0f,"TimerBrandonPlayExtraAnimation");
			}
		}
		else if (asSubject=="3_AliceBeach_12")
		{
			if (abStartOfSubject)
			{
				NPC_PlayExtraAnimation("Alice_Beach", "stand_reassuring_talking_extra03");
			}
		}
		else if (asSubject=="3_AliceBeach_13")
		{
			if (abStartOfSubject)
			{
				FadeSimStressLevel(0.8f);
				Map_AddTimer("sit_angry_extra01",0.2f,"TimerBrandonPlayExtraAnimation");
			}
		}
		else if (asSubject=="3_AliceBeach_14")
		{
			if (abStartOfSubject)
			{
				NPC_PlayExtraAnimation("Alice_Beach", "stand_reassuring_talking_extra01");
			}
		}
		else if (asSubject=="3_AliceBeach_15")
		{
			if (abStartOfSubject)
			{
				FadeSimStressLevel(0.9f);
				Map_AddTimer("sit_angry_extra01",0.5f,"TimerBrandonPlayExtraAnimation");
				Map_AddTimer("sit_angry_extra02",5.5f,"TimerBrandonPlayExtraAnimation");
				Map_AddTimer("sit_about_to_leave",10.0f,"TimerBrandonSetMainAnimation");
			}
			else
				SequenceStates_Resume(msCurrentSequence);
		}
	}

	//-------------------------------------------------------
		
	void SequenceBrandonAndAliceInScanRoom(const tString &in asTimer)
	{
		StartBrandonSimulation("SequenceBrandonAndAliceInScanRoom", "ScanRoom");
		if (Sequence_DoStepAndWait(1))
		{
			Entity_SetActive("Alice_ScanRoom",true);
		}
		else if (Sequence_DoStepAndPause(0.0f))
		{
			Dialog_Begin("Simulation");
				Dialog_AddBranch("3_AliceScanRoom");
					Dialog_AddSubject("3_AliceScanRoom_1", "SimCallback_AliceScanRoom");
					Dialog_AddSubject("3_AliceScanRoom_2", "SimCallback_AliceScanRoom");
					Dialog_AddSubject("3_AliceScanRoom_3", "SimCallback_AliceScanRoom");
			Dialog_End();
		}
		
		EndBrandonSimulation("AliceScanRoom");
	}
	
	//-------------------------------------------------------
	
	void SimCallback_AliceScanRoom(const tString &in asSubject, bool abStartOfSubject)
	{
		if (asSubject=="3_AliceScanRoom_1")
		{
			if (abStartOfSubject)
			{
				FadeSimStressLevel(0.4f);
				Map_AddTimer("sit_calm_extra02",5.0f,"TimerBrandonPlayExtraAnimation");
				Map_AddTimer("sit_calm_extra03",15.0f,"TimerBrandonPlayExtraAnimation");
				Map_AddTimer("sit_calm_extra02",27.0f,"TimerBrandonPlayExtraAnimation");
				Map_AddTimer("sit_calm_extra01",32.0f,"TimerBrandonPlayExtraAnimation");
			}
			else
			{
				mbGotBackdoorPassword = true;
				mbSimonRealisationMusicAllowed = false;
				mbBanterEnabled = false;	// Turn off banter until we get back from Cath
				
				Entity_SetActive("TriggerSaveAfterPuzzle",true);
				
				SlideDoor_SetClosed("ServerAreaDoor_Door", true);
				Button_SetLocked("ServerAreaDoor_Outside", true, true);
				
				LastOnSoma_SetText("02_05_theta_inside_6");
			}
		}
		else if (asSubject=="3_AliceScanRoom_2")
		{
			if (abStartOfSubject)
			{
				FadeSimStressLevel(0.4f);
			}
			else
			{
				Entity_SetActive("Alice_*",false);
			}
		}
		else if (asSubject=="3_AliceScanRoom_3")
		{
			if (abStartOfSubject)
			{
				FadeSimStressLevel(0.8f);
				Map_AddTimer("sit_panic",0.1f,"TimerBrandonSetMainAnimation");
				Map_AddTimer("sit_panic_extra02",0.2f,"TimerBrandonPlayExtraAnimation");
			}
			else
				SequenceStates_Resume(msCurrentSequence);
		}
	}
	
	//-------------------------------------------------------
	
	void Line_AliceScanRoomCalm(const tString &in asParent, const tString &in asChild, int alState, bool abStart)
	{
		if (!abStart)
			return;
		NPC_PlayExtraAnimation("Alice_ScanRoom", "stand_calm_talking_extra0"+cMath_RandRectl(1,3));
	}
	
	//-------------------------------------------------------
	
	void VoiceSimulationFailed(const tString&in asScene, const tString&in asSubject)
	{
		mbSimulationDisabled = false;
		SetChipSlotInteractionDisabled(Entity_GetVarString("BrainScanChip", "Slot"),false);
	}

	//-------------------------------------------------------

	/////////////////////////////////////////
	// Scene 3 Event E *Find and use environment chip (dialog)*
	/////////////////////////////////////////

	//-------------------------------------------------------

	//-------------------------------------------------------

	/////////////////////////////////////////
	// Scene 3 Event F *Find Brandon's room (dialog)*
	/////////////////////////////////////////

	//-------------------------------------------------------
	
	void OnDrainedBedroomFlower(const tString &in asEntity)
	{
		Lamp_SetLit("desk_lamp_theta_1", false, true);
	}

	//-------------------------------------------------------

	bool mbFoundBrandonsRoom = false;
	bool mbAllCluesFound = false;
	
	bool OnBrandonDoorTrigger(const tString &in asParent, const tString &in asChild, int alState)
	{
		if (mbKnowsAboutBrandon&&!mbFoundBrandonsRoom)
		{
			Map_AddTimer("TimerUnlocksBrandonDoor_Voice", 0.5, "TimerUnlocksBrandonDoor");
			Map_AddTimer("TimerUnlocksBrandonDoor_Unlock", 5, "TimerUnlocksBrandonDoor");
			Map_AddTimer("TimerUnlocksBrandonDoor_Sound", 5, "TimerUnlocksBrandonDoorSound");
			
			Map_RemoveTimer("TimerPromptAboutBrandonsRoom");
			Voice_AbortIfQueued("3_Simulation_PromptBrandonsRoom");
			
			mbFoundBrandonsRoom = true;
			
			Terminal_ForceCacheUpdate("BrandonTerminal");
			
			// Event for return to 2.5
			StartEventAkersAtUpperDoor();
			
			return false;
		}
		return true;
	}

	//-------------------------------------------------------
	
	void TimerUnlocksBrandonDoor(const tString &in asTimer)
	{
		if (asTimer == "TimerUnlocksBrandonDoor_Voice")
			Voice_Play("3_CathUnlocksBrandonsDoor", -1, "", 3);
		else
		{
			// Unlock all doors now
			Button_SetLocked("BrandonsRoomDoor_Outside", false, true);
		}
	}

	//-------------------------------------------------------
	
	void TimerUnlocksBrandonDoorSound(const tString &in asTimer)
	{
		///////////////////////
		///Sound of Brandons Door unlocking
		Sound_CreateAtEntity("ThetaDoorUnlockSound", "Entities_Station/doors/theta_door/unlock", "BrandonsRoomDoor_Door", 0.0f, false, 1.0f);
	}

	//-------------------------------------------------------
	
	bool mbEnteredBrandonsRoom = false;
	
	bool OnDoorwayBrandonsRoom(const tString &in asArea, const tString &in asEntity, int alState)
	{
		if (alState==1)
		{
			cLux_AddDebugMessage("Entered Brandon's Room");
			StopBanter();
			if (!mbEnteredBrandonsRoom)
			{
				// Player entered room, play hint voice
				tString sVoice = mbUsedSimulator ? "3_InBrandonsRoomFailedSimulation"
													: "3_InBrandonsRoomNoFailedSimulation";
				KillActiveBanter();
				Voice_PlayWhenPossible(sVoice);
			}
			mbEnteredBrandonsRoom = true;
		}
		else
		{
			cLux_AddDebugMessage("Left Brandon's Room");
			StartBanter();
		}
		return true;
	}

	//-------------------------------------------------------

	/////////////////////////////////////////
	// Scene 3 Event G *Search Brandon's room for clues (dialog)*
	/////////////////////////////////////////

	//-------------------------------------------------------
	
	void CloseAlicePhoto(const tString &in asEntity)
	{		
		KillActiveBanter();
		Voice_PlayWhenPossible("3_LookAtAlicePhoto", "", 10.0f, 1.0f, "", 5+mlCluesFound);
			
		Readable_SetCloseCallback(asEntity, "");
	}

	//-------------------------------------------------------
	
	void CloseReadableLoveLetter(const tString &in asEntity)
	{
		KillActiveBanter();
		if (mbAllCluesFound)
		{
			Voice_PlayWhenPossible("3_FoundRedundantLastClue");
		}
		else if (!mbKnowsAliceWasAtScan)
		{
			if (mlCluesFound==0)
				Voice_PlayWhenPossible("3_ReadLoveLetterFirst", "", 60.0f, 1.0f, "VoiceCheckForAllClues", 5+mlCluesFound);
			else
				Voice_PlayWhenPossible("3_ReadLoveLetter", "", 60.0f, 1.0f, "VoiceCheckForAllClues", 5+mlCluesFound);
				
			mlCluesFound++;
		}
		else
		{
			Voice_PlayWhenPossible("3_ReadLoveLetterKnowingAliceAtScan", "", 60.0f, 1.0f, "", 5+mlCluesFound);
		}
		mbKnowsAliceWasAtScan = true;
		
		Readable_SetCloseCallback(asEntity, "");
	}

	//-------------------------------------------------------
	
	void SubjectDataminedIntercom(const tString &in asScene, const tString &in asSubject)
	{
		KillActiveBanter();
		if (mbAllCluesFound)
			Voice_PlayWhenPossible("3_FoundRedundantLastClue");
		else if (mlCluesFound==0)
			Voice_PlayWhenPossible("3_AfterDataminingIntercomFirst", "", 60.0f, 1.0f, "VoiceCheckForAllClues", 5+mlCluesFound);
		else
			Voice_PlayWhenPossible("3_AfterDataminingIntercom", "", 60.0f, 1.0f, "VoiceCheckForAllClues", 5+mlCluesFound);
			
		mlCluesFound++;
		Datamine_SetFinalSubjectCallback("BrandonIntercom", "");
	}

	//-------------------------------------------------------
	
	void CloseReadableBrandonBadge(const tString &in asEntity)
	{
	//	Voice_PlayWhenPossible("3_LookAtBrandonsBadge");
		Readable_SetCloseCallback(asEntity, "");
	}

	//-------------------------------------------------------
	
	void VoiceCheckForAllClues(const tString&in asScene, const tString&in asSubject)
	{
		/* Cut, as it was very repetitive of previous stuff.
		if (mlCluesFound==1)
		{
			Voice_PlayWhenPossible("Addendum_ClueAboutAlice","", 60.0f, 1.0f, "", 10);
		}*/
		
		if (mlCluesFound < 2) return;
		
		if (!mbAllCluesFound)
		{
			KillActiveBanter();
			mbAllCluesFound = true;
			Readable_SetCloseCallback("BrandonBadge", "");
			Voice_PlayWhenPossible("3_AllBrandonCluesFound");
		
			Entity_AddCollideCallback("Player", "SimulationAreaTrigger", "CollisionSimAreaAliceFound");
		}
	}

	//-------------------------------------------------------

	/////////////////////////////////////////
	// Scene 3 Event H *Datamine Brandon's Computer (dialog)*
	/////////////////////////////////////////

	//-------------------------------------------------------

	//-------------------------------------------------------

	/////////////////////////////////////////
	// Scene 3 Event I *Read love letter (text)*
	/////////////////////////////////////////

	//-------------------------------------------------------

	//-------------------------------------------------------

	/////////////////////////////////////////
	// Scene 3 Event J *Datamine Brandon's intercom (dialog)*
	/////////////////////////////////////////

	//-------------------------------------------------------

	//-------------------------------------------------------

	/////////////////////////////////////////
	// Scene 3 Event K *Code retrieved, Catherine burns memory chip (dialog)*
	/////////////////////////////////////////

	//-------------------------------------------------------
	
	void SimulationSuccessful()
	{
		Depth_Audio_Terminal_Forward("BrainScanSimulationTerminal");
		Sound_CreateAtEntity("ScanEnd", "02_05_theta/sfx/events/brandon_scan/scan_end", "BrainScanSimulationTerminal");
		Sound_Stop("ScanStart", 0.25f);
		
		mSimulationTerminalState = eSimulationTerminalState_DeleteMenu;
		
		Entity_SetPlayerInteractCallback("SimulationSlot_Right", "InteractBrokenScanChip", true);
		Entity_SetCustomInteractIcon("SimulationSlot_Right", eCrossHairState_CarryOneHanded);
		SetChipSlotInteractionDisabled("SimulationSlot_Right",false);
		
		Entity_SetPlayerInteractCallback("SimulationSlot_Left", "InteractBrokenScanChip", true);
		Entity_SetCustomInteractIcon("SimulationSlot_Left", eCrossHairState_CarryOneHanded);
		SetChipSlotInteractionDisabled("SimulationSlot_Left",false);
			
		Dialog_Begin();
			Dialog_AddBranch("3_AliceScanRoomDone");
				Dialog_AddSubject("3_AliceScanRoomDone_1");
				Dialog_AddSubject("3_AliceScanRoomDone_2");
				Dialog_AddSubject("3_SimulationDone_DestroyChip");
		Dialog_End();
	}

	//-------------------------------------------------------

	/////////////////////////////////////////
	// Scene 3 Event L *Read Scan-logs paper (text)*
	/////////////////////////////////////////

	//-------------------------------------------------------

	//-------------------------------------------------------

	/////////////////////////////////////////
	// Scene 3 Event M *Datamine Cath Work Computer (dialog)*
	/////////////////////////////////////////

	//-------------------------------------------------------

	//-------------------------------------------------------

	/////////////////////////////////////////
	// Scene 3 Event N *Turn on lights*
	/////////////////////////////////////////

	//-------------------------------------------------------

	//-------------------------------------------------------

	/////////////////////////////////////////
	// Scene 3 Event O *Go back along corridor (dialog)*
	/////////////////////////////////////////

	//-------------------------------------------------------

	//-------------------------------------------------------

	/////////////////////////////////////////
	// Scene 3 Event P *Splash in Women's Toilet*
	/////////////////////////////////////////

	//-------------------------------------------------------

	//-------------------------------------------------------

	/////////////////////////////////////////
	// Scene 3 Event Q *Devoured Crew Transmission (dialog)*
	/////////////////////////////////////////

	//-------------------------------------------------------

	//-------------------------------------------------------

	/////////////////////////////////////////
	// Scene 3 Event R *Running footsteps*
	/////////////////////////////////////////

	//-------------------------------------------------------
	bool OnCollisionAkersTrigger(const tString &in asParent, const tString &in asChild, int alState)
	{
		if (cLux_GetExplorationModeActive())
		{
			SlideDoor_SetOpenableByAgent("slidedoor_medium_interlock_24_17", false);
			Entity_SetVarBool("Akers", "ExplorationMode_SkipAvoid", true);
		}
		
		cLux_AddDebugMessage("Akers event start");
		Pathfinder_Track_Clear("Akers");
		Pathfinder_Track_Add("Akers", "PathNodeArea_58",4.0f,4.0f);
		Pathfinder_Track_Add("Akers", "PathNodeArea_183",4.0f,4.0f);
		Pathfinder_Track_Start("Akers",false,1.0f,"OnAkersFinishedPath1");
		Entity_SetActive("Akers", true);
		BarkMachine_SetActive("Akers", false);
		Sound_CreateAtEntity("AkersEvent", "02_05_theta/sweeteners/akers_tomfoolery/akers_closed_corridor_door", "Akers");
		return false;
	}

	//-------------------------------------------------------

	void OnAkersFinishedPath1(const tString& in asEntityName)
	{
		cLux_AddDebugMessage("Akers finished path 1");
		Map_AddTimer("TimerAkersPath2",1.0f,"TimerAkersPath2");
	}
	
	//-------------------------------------------------------

	void TimerAkersPath2(const tString& in asName)
	{
		cLux_AddDebugMessage("Start Akers path 2");

		Pathfinder_Track_Clear("Akers");
		Pathfinder_Track_Add("Akers", "PathNodeArea_183");
		Pathfinder_Track_Start("Akers",false,1.0f,"OnAkersFinishedPath2");
	}
	
	//-------------------------------------------------------
	
	void OnAkersFinishedPath2(const tString& in asEntityName)
	{
		Entity_SetActive("Akers",false);
	}
 
	//-------------------------------------------------------

	/////////////////////////////////////////
	// Scene 3 Event S *Simon Comments (dialog)*
	/////////////////////////////////////////

	//-------------------------------------------------------
	
	bool CollisionSimulationArea(const tString &in asParent, const tString &in asChild, int alState)
	{
		Voice_PlayWhenPossible("3_EnterSimulationRoom");
		mbVisitedSimRoom = true;
		
		
		Entity_RemoveCollideCallback("Player", "ControlRoomWindowTrigger_*");
		Entity_AddCollideCallback("Player", "ControlRoomWindowTrigger_*", "CollisionControlRoomHint");
		
		return false;
	}

	//-------------------------------------------------------
	
	void InteractBrokenScanChip(const tString &in asEntity)
	{
		if (asEntity=="SimulationSlot_Right")
		{
			RemoveChip("BrainScanSimulationTerminal", "BrainScanChip");
		}
		
		/////////////
		// Grab chip
		Prop_SetStaticPhysics(asEntity+"_Chip", false);
		Entity_CallEntityInteract(asEntity+"_Chip");
	}
	
	//-------------------------------------------------------
	
	void InteractBrokenBrandonChip(const tString &in asEntity)
	{
		/////////////
		// Grab chip
		Prop_SetStaticPhysics(asEntity+"_Chip", false);
		Entity_CallEntityInteract(asEntity+"_Chip");
		
		//////////////////
		// Play comment
		if (mbKnowsSimonHistory) Voice_PlayWhenPossible("3_InteractBrokenChipComment_Scene5Done");
		else		    		 Voice_PlayWhenPossible("3_InteractBrokenChipComment");
	}

	//-------------------------------------------------------

	/////////////////////////////////////////
	// Scene 3 Event T *Catherine Comments (dialog)*
	/////////////////////////////////////////

	//-------------------------------------------------------
	
	bool mbEnteredChipStorage = false;

	//-------------------------------------------------------
	
	bool CollisionCommonRoom(const tString &in asParent, const tString &in asChild, int alState)
	{
		Voice_PlayWhenPossible("3_EnterCommonRoom");
		return false;
	}

	//-------------------------------------------------------
	
	bool CollisionScanStorageArea(const tString &in asParent, const tString &in asChild, int alState)
	{
		mbEnteredChipStorage = true;
		Voice_PlayWhenPossible("3_EnterScanStorage", "", 60.0f, 1.0f, "OnFinishedScanStorageComment");
		return false;
	}
	
	//-------------------------------------------------------
	
	void OnFinishedScanStorageComment(const tString&in asScene, const tString&in asSubject)
	{
		if (mbSeenSimonScan)
		{
			Voice_PlayWhenPossible("3_EnterScanStorage_BeenToLegacy");
		}
		else
		{
			Voice_PlayWhenPossible("3_EnterScanStorage_NotBeenToLegacy");
		}
	}

	//-------------------------------------------------------
	
	bool CollisionSimAreaServersFixed(const tString &in asParent, const tString &in asChild, int alState)
	{
		tString sScanChipSlot = Entity_GetVarString("BrainScanChip", "Slot");
		if (sScanChipSlot == "SimulationSlot_Left" || sScanChipSlot == "SimulationSlot_Right")
		{
			Voice_PlayWhenPossible("3_EnterSimRoomFixedServers_ChipIn");
		}
		else if (Player_ToolIsInInventory("BrainScanChip"))
		{
			Voice_PlayWhenPossible("3_EnterSimRoomFixedServers_TookChip");
		}
		else if (mbEnteredChipStorage)
		{
			Voice_PlayWhenPossible("3_EnterSimRoomFixedServers_FoundChipRoom");
		}
			
		return false;
	}

	//-------------------------------------------------------
	
	bool CollisionSimAreaAliceFound(const tString &in asParent, const tString &in asChild, int alState)
	{
		if (!mbUseSinceSolvedBrandon)
			Voice_PlayWhenPossible("3_EnterSimRoomAliceModuleReady", "CheckMentionAliceModule");
		return false;
	}
	
	//-------------------------------------------------------
	
	bool CheckMentionAliceModule(const tString& in asSubject)
	{
		return !mbUseSinceSolvedBrandon;
	}
	
	//-------------------------------------------------------
	
	//} END SCENE 3
	
	/////////////////////////////////////////
	// ==============
	// ADDENDUM: Other people's rooms
	// ==============
	//{/////////////////////////////////////
	
	//-------------------------------------------------------
	
	bool OnTriggerEnterCathsRoom(const tString &in asParent, const tString &in asChild, int alState)
	{
		Voice_PlayWhenPossible("3_EnterCathsRoom");
        
		return false;
	}
	
    void CathNoticesRoom(const tString&in asScene, const tString&in asSubject, int alLineIndex, bool abStart)
    {
        if(abStart) return;
        
        CathRoomSting();
    }
    
	//-------------------------------------------------------
	
	bool OnDoorwayCathsRoom(const tString &in asArea, const tString &in asEntity, int alState)
	{
		if (alState==1)
		{
			cLux_AddDebugMessage("Entered Cath's Room");
			StopBanter();
			Voice_ClearQueued();
			StartCathBanter();
		}
		else
		{
			cLux_AddDebugMessage("Left Cath's Room");
			StopCathBanter();
			StartBanter();
		}
		return true;
	}
	
	//-------------------------------------------------------
	
	bool mbBeenInCathsRoomBefore = false;
	
	void StartCathBanter()
	{
		mbCathBanterRunning = true;
		if (!mbBeenInCathsRoomBefore)
		{
			Map_AddTimer("TimerCathBanter", cMath_RandRectf(15.0f,20.0f), "TimerCathBanter");
			mbBeenInCathsRoomBefore = true;
		}
		else
		{
			Map_AddTimer("TimerCathBanter", cMath_RandRectf(15.0f,20.0f), "TimerCathBanter");
		}
	}
	
	//-------------------------------------------------------
	
	int mlCathRoomBanterLine = 1;
	bool mbCathBanterRunning = false;
	
	//-------------------------------------------------------
	
	void TimerCathBanter(const tString& in asName)
	{
		tString sSubject = "CathRoom_Banter"+mlCathRoomBanterLine;
		if (!Voice_SubjectExists(sSubject))
			return;
		mlCathRoomBanterLine++;
		if (mbCathBanterRunning)
			Voice_PlayWhenPossible(sSubject, "OnCanDoCathBanter", 60.0f, 10.0f, "CathBanter_LineDone",0);
	}
	
	//-------------------------------------------------------
	
	bool OnCanDoCathBanter(const tString& in asSubject)
	{
		if (Player_GetCurrentStateName() == "State_Interact_HandheldTerminal")
			return false;
		return true;
	}
	
	//-------------------------------------------------------
	
	void CathBanter_LineDone(const tString&in asScene, const tString&in asSubject)
	{
		if (mbCathBanterRunning)
			Map_AddTimer("TimerCathBanter", cMath_RandRectf(20.0f,30.0f), "TimerCathBanter");
	}
	
	//-------------------------------------------------------
	
	void StopCathBanter()
	{
		mbCathBanterRunning = false;
		Map_RemoveTimer("TimerCathBanter");
		for (int i=1;i<10;i++)
		{
			tString sSubject = "CathRoom_Banter"+i;
			if (!Voice_SubjectExists(sSubject))
				return;
			Voice_AbortIfQueued(sSubject);
		}
	}
	
	//-------------------------------------------------------
	
	void OnGuiCathsDatapad(const tString&in asEntityName, float afTimeStep)
	{
		ImGui_SetTransCategory("02_05_theta_inside");
		
		StationGuiBG_Scanlines();
		StationGuiBG_DatapadTaskbar();
		
		bool bDrawBackButton = true;
		int lActiveApp = StationGui_GetActiveApp(-1);
		switch (lActiveApp)
		{	
			case -1:
				StationGui_AddApp("CathsDataPad_Diary");
				StationGui_AddApp("CathsDataPad_Notes");
				StationGui_MainMenu();
				ImGui_SetStateInt("ArticleID",0);
				bDrawBackButton = false;
			break;
			
			case 0:
				Depth_ImGui_AddTextFile("CatherineEntryFileName_1", "CatherineEntry_1");
				Depth_ImGui_AddTextFile("CatherineEntryFileName_2", "CatherineEntry_2");
				Depth_ImGui_AddTextFile("CatherineEntryFileName_3", "CatherineEntry_3");
				Depth_ImGui_AddTextFile("CatherineEntryFileName_4", "CatherineEntry_4");
				Depth_ImGui_AddTextFile("CatherineEntryFileName_5", "CatherineEntry_5");
				Depth_ImGui_AddTextFile("CatherineEntryFileName_6", "CatherineEntry_6");
				StationGui_DatapadMultiReader();
			break;
			
			case 1:
				Depth_ImGui_AddTextFile("CathDiary_Title", "CathDiary_Body");
				StationGui_TextReaderSingle();
			break;
		}
		
		StationGui_DatapadBackButton(bDrawBackButton);
	}
	
	//-------------------------------------------------------
	// Stuff in Cath's room...
	void OnInteractCathToy(const tString &in asEntity)
	{
		if (Map_TimerExists(asEntity))
			return;
			
		Map_AddTimer(asEntity,1.0f,"TimerCathTalkAboutToy");
		
		if (asEntity=="CathTeddyBear")
		{
			Audio_InteractCathBear();
		}
	}
	
	//-------------------------------------------------------
	
	void TimerCathTalkAboutToy(const tString& in asName)
	{
		Voice_PlayWhenPossible("Addendum_CathStuff_"+asName,"",20.0f,2.0f);
	}

	//-------------------------------------------------------
	bool mbSarangeLogActive = false;
	void OnSarangAudioLogStateChange(const tString &in asEntity, int alState)
	{
		if (alState == 1)
		{
			StartSarangeLog();
			Entity_SetEffectsActive("SarangAudioLog", true, true);
		}
		
		if (alState == -1)
		{
			StopSarangeLog();
			Entity_SetEffectsActive("SarangAudioLog", false, false);
		}
	}
		
	//-------------------------------------------------------
	
	//{ Sarang Audio Log--------------------------------------
	
	void StartSarangeLog()
	{
		cLux_AddDebugMessage("Starting audio log");
		
		//Slight delay for pacing
		Map_AddTimer("SarangLogVoiceStart", 1.f, "SarangLogVoiceStart");
			
		//Sound
		Sound_CreateAtEntity("TapeStart", "Entities_Station/object/tape_recorder/start","SarangAudioLog");
		Sound_CreateAtEntity("TapeLoop", "Entities_Station/object/tape_recorder/loop", "SarangAudioLog");
		mbSarangeLogActive = true;
			
		//Set interaction disbaled for 1 second to stop from sound spamming
		Entity_SetInteractionDisabled("SarangAudioLog", true);
		Map_AddTimer("ReEnableTapePlayerInteraction", 1.f, "Timer_TapePlayerInteractionEnable");
	}
			
	//-------------------------------------------------------
	
	void SarangLogVoiceStart(const tString &in asTimer)
	{
		Voice_Play("3_SarangMemo");
	}
		
	//-------------------------------------------------------
	
	void StopSarangeLog()
	{
		cLux_AddDebugMessage("Stopping audio log");
		Voice_Stop("3_SarangMemo");
		Voice_Stop("Recording");
		Map_RemoveTimer("SarangLogVoiceStart");
		
		Sound_Stop("TapeLoop", 0.05f);
		Sound_Stop("TapeStart", 0.05f);
		Sound_CreateAtEntity("TapeStop", "Entities_Station/object/tape_recorder/stop", "SarangAudioLog");
		Sound_CreateAtEntity("TapeLoopEnd", "Entities_Station/object/tape_recorder/loop_end", "SarangAudioLog");
		mbSarangeLogActive = false;
				
		//Set interaction disbaled for 0.5 seconds to stop from sound spamming
		Entity_SetInteractionDisabled("SarangAudioLog", true);
		Map_AddTimer("ReEnableTapePlayerInteraction", 0.5f, "Timer_TapePlayerInteractionEnable");
	}
	
	//-------------------------------------------------------
	
	void LineOver_StopSarangLog(const tString&in asScene, const tString&in asSubject, int alLineIndex, bool abStart)
	{
		if (abStart) return;
		StopSarangeLog();
	}
		
	//-------------------------------------------------------
	
	void Timer_TapePlayerInteractionEnable(const tString &in asTimer)
	{
		Entity_SetInteractionDisabled("SarangAudioLog", false);
	}
		
	//} End Sarang Audio Log--------------------------------------
		
	//-------------------------------------------------------
	
	//} END ADDENDUM OTHER PEOPLE'S ROOMS
	
	//-------------------------------------------------------
	
	/////////////////////////////////////////
	// Event: Flickering Lights
	//{//////////////////////////////////////

	//-------------------------------------------------------
	
	int mlCommonRoomFlickerCount = 0;
	
	void CommonRoom_SetFlickerActive(bool abActive)
	{
		if (abActive)
		{
			cLux_AddTodoMessage("SOUND: Flicker sounds?");
			Lamp_SetupFlicker("CommonRoomLamp_*", 0.1f, 0.25f, 0.05f, 0.1f, false);
			
			if(Sound_Exists("CommonRoomLightsLoop")==false)
			{
				Sound_CreateAtEntity("CommonRoomLightsStart", "02_05_theta/sweeteners/light_flicker_event/start", "CommonRoomLightsSoundSource");
				Sound_CreateAtEntity("CommonRoomLightsLoop", "02_05_theta/sweeteners/light_flicker_event/loop", "CommonRoomLightsSoundSource", 1.0f, false, 1.0f);
			}
			
			if (mlCommonRoomFlickerCount>2)
			{
				Sound_CreateAtEntity("CommonRoomLightsDie", "02_05_theta/sweeteners/light_flicker_event/die", "CommonRoomLightsSoundSource");
			}
			
			Sound_CreateAtEntity("TVBurst_Repeatable", "02_05_theta/sweeteners/tv_scare_random", "computer_panel_large_GUI_2");
		}
		Lamp_SetFlickerActive("CommonRoomLamp_*", abActive);
	}
	
	//-------------------------------------------------------
	
	void CommonRoom_StartFlickering(float alWaitTime, float alFlickerTime)
	{
		if (Map_TimerExists("TimerCommonRoomFlickerEnd"))
			return;
		if (Map_TimerExists("TimerCommonRoomFlickerStart"))
			return;

		Map_AddTimer("TimerCommonRoomFlickerStart", alWaitTime, "TimerCommonRoomFlickerStart");
		Map_AddTimer("TimerCommonRoomFlickerEnd", alWaitTime+alFlickerTime, "TimerCommonRoomFlickerEnd");
	}
	
	//-------------------------------------------------------
	
	void TimerCommonRoomFlickerStart(const tString& in asName)
	{
		CommonRoom_SetFlickerActive(true);
	}
	
	//-------------------------------------------------------
	
	void TimerCommonRoomFlickerEnd(const tString& in asName)
	{
		CommonRoom_SetFlickerActive(false);
		
		Sound_Stop("CommonRoomLightsLoop", 0.05f);
		Sound_CreateAtEntity("CommonRoomLightsEnd", "02_05_theta/sweeteners/light_flicker_event/end", "CommonRoomLightsSoundSource");
		
		if (mlCommonRoomFlickerCount>2)
		{
			CommonRoom_KillLights();
		}
	}
	
	//-------------------------------------------------------
	
	void CommonRoom_KillLights()
	{
		Lamp_SetLit("CommonRoomLamp_*",false,false);
		Button_SetSwitchedOn("CommonRoomLightSwitch",false,false);
		Button_SetLocked("CommonRoomLightSwitch",true);
	}
	
	//-------------------------------------------------------
	
	bool OnTriggerCommonRoomFlicker(const tString &in asParent, const tString &in asChild, int alState)
	{
		if (alState!=1)
			return true;
			
		mlCommonRoomFlickerCount++;
		
		float afCooldownTime = cMath_RandRectf(30.0f, 45.0f);
		
		//Set entity false for cooldown so player can't spam event
		cLux_AddDebugMessage("Set comm room flicker area false to stop from spam, returning in this many seconds - "+afCooldownTime);
		Entity_SetActive("TriggerControlRoomFlicker", false);
		Map_AddTimer("FlickerAreaCooldownRestored", afCooldownTime, "Timer_FlickerAreaActive");
		
		Sound_PreloadGroup("02_05_theta/sweeteners/light_flicker_event", true);
		
		if (mlCommonRoomFlickerCount==1)
		{
			CommonRoom_StartFlickering(1.0f,1.5f);
			return true;
		}
		else if (mlCommonRoomFlickerCount==2)
		{
			CommonRoom_StartFlickering(2.0f,3.0f);
			return true;
		}
		else if (mlCommonRoomFlickerCount==3)
		{
			CommonRoom_StartFlickering(0.5f,1.0f);
			return false;
		}
		return false;
	}
	
	void Timer_FlickerAreaActive(const tString &in asTimer)
	{
		Entity_SetActive("TriggerControlRoomFlicker", true);
		cLux_AddDebugMessage("Flicker Area Active Again");
	}
	
	//-------------------------------------------------------
	
	/////////////////////////////////////////
	// Event: Akers Effects
	//{//////////////////////////////////////

	//-------------------------------------------------------
	bool mbAkersHangarSoundPlayed = false;
	void Timer_EventAkersAtLowerDoor(const tString& in asName)
	{
		if(mbAkersHangarSoundPlayed==false)
		{
			SlideDoor_SetOpenAmount("HangarDoor",0.1f,true);
			Entity_SetActive("AkersCounter", true);
			Entity_SetActive("HangarGooSplat_*",true);
			Lamp_SetLit("HangarDoor_Lamp_Behind", true, true);
			Entity_SetActive("TriggerStopHangarEvent",true);
			Sound_CreateAtEntity("HangarStartSound", "02_05_theta/sweeteners/akers_tomfoolery/akers_big_door_sick","HangarEventSoundSource",1.0f, true);
			Entity_SetActive("AkersHallRoomSoundControl", true);
			mbAkersHangarSoundPlayed = true;
		}
	}
	
	//-------------------------------------------------------
	
	bool OnTriggerStopHangarEvent(const tString &in asParent, const tString &in asChild, int alState)
	{
		StopHangarEvent();
		return false;
	}
		
	//-------------------------------------------------------
	
	void StopHangarEvent()
	{
		
		if(Entity_GetCollide("Player", "AkersCounter"))
		{
			Sound_CreateAtEntity("HangarStopSound", "02_05_theta/sweeteners/akers_tomfoolery/akers_big_door_sick_end","HangarEventSoundSource",1.0f, true);
		}
		
		Sound_Stop("HangarStartSound",0.5f);
		Entity_SetActive("TriggerStopHangarEvent",false);
		Entity_SetActive("AkersHallRoomSoundControl",false);
		Entity_SetActive("AkersCounter", false);
		Map_RemoveTimer("Timer_AkersEventSoundControl");
	}
	
	int mlAkersCounter = 0;
	
	bool AkersCounter(const tString &in asParent, const tString &in asChild, int alState)
	{
		if(alState==1)
		{
			mlAkersCounter ++;
			if(mlAkersCounter==3)
			{
				StopHangarEvent();
			}
		}
		return true;
	}
	
	//-------------------------------------------------------
	
	bool AkersHangarEventSoundControl(const tString &in asParent, const tString &in asChild, int alState)
	{
		if(alState==1)
		{
			Map_AddTimer("Timer_AkersEventSoundControl", 0.25f, "Timer_AkersEventSoundControl");
		}
		else
		{
			Map_RemoveTimer("Timer_AkersEventSoundControl");
			Sound_Fade("HangarStartSound", 1.0f, 1.0f);
		}
		return true;
	}
	
	void Timer_AkersEventSoundControl(const tString &in asTimer)
	{
		Map_AddTimer("Timer_AkersEventSoundControl", 0.25f, "Timer_AkersEventSoundControl");
		
		if(SlideDoor_GetOpenAmount("ServerAreaDoor_Door") < 0.5)
		{
			Sound_Fade("HangarStartSound", 0.0f, 1.0f);
			cLux_AddDebugMessage("Fading Akers sound down");
		}
		else
		{
			if(Sound_Exists("HangarStartSound"))
			{
				Sound_Fade("HangarStartSound", 1.0f, 1.0f);
				cLux_AddDebugMessage("Fading Akers sound up");
			}
		}
	}
		
	//-------------------------------------------------------
	bool mbAkersUpperDoorSoundPlayed = false;
	void StartEventAkersAtUpperDoor()
	{
		if(mbAkersUpperDoorSoundPlayed==false)
		{
			SlideDoor_SetOpenAmount("ThetaLabDoor",0.3f,true);
			//Entity_SetActive("HangarGooSplat_*",true);
			Entity_SetActive("TriggerStopUpperDoorEvent",true);
			Sound_CreateAtEntity("UpperDoorStartSound", "02_05_theta/sweeteners/akers_tomfoolery/akers_small_door","UpperDoorEventSoundSource",1.0f, true);
			mbAkersUpperDoorSoundPlayed = true;
		}
	}
	
	//-------------------------------------------------------
	
	bool OnTriggerStopUpperDoorEvent(const tString &in asParent, const tString &in asChild, int alState)
	{
		StopAkersUpperDoor();
		return false;
	}
	
	void StopAkersUpperDoor()
	{
		Sound_Stop("UpperDoorStartSound",0.5f);
		Entity_SetActive("TriggerStopUpperDoorEvent",false);
		
		if(Entity_GetCollide("Player", "AkersSmallDoorArea"))
		{
			Sound_CreateAtEntity("UpperDoorStopSound", "02_05_theta/sweeteners/akers_tomfoolery/akers_small_door_end","UpperDoorEventSoundSource",1.0f, true);
		}
	}
	
	//-------------------------------------------------------
	
	/////////////////////////////////////////
	// ==============
	// SCENE 4 *SURVIVE CONSTRUCT ATTACK, REPAIR SERVERS*
	// ==============
	//{//////////////////////////////////////

	//-------------------------------------------------------
	
		/////////////////////////////////////////
		// Setup
		//{//////////////////////////////////////
		
		//-------------------------------------------------------
	
		bool mbHasEncounteredPuppet = false;
		bool mbServerRoomCheckpointDone=false;
		bool mbServerMusicStarted=false;
		
		//-------------------------------------------------------
		
		void SetupServerRoom()
		{
			Light_SetFlickerActive("PointLight_10", false);
			Light_SetCheapGobo("server_theta_hanging*", true);
		}

		//-------------------------------------------------------
		
		//} END Setup
		
		//-------------------------------------------------------
		
		/////////////////////////////////////////
		// Event: Enter Server Room Area
		//{//////////////////////////////////////

		//-------------------------------------------------------
		
		bool mbTriggeredServerNoises = false;
		
		//-------------------------------------------------------
		
		bool CollisionToServerArea(const tString &in asParent, const tString &in asChild, int alState)
		{
			if (alState == 1) return true;
			
			if(mbConstructNoisesActive==true)
			{
				Sound_Fade("AkersStairsStart", 1.0f, 2.0f);
				Sound_FadeGlobalVolume(0.65f, 3.0f, eSoundEntryType_World);
			}
			
			Map_AddTimer("StopAmbientMusic", 2.0f, "AmbientMusicHandler");
			
			if (Entity_PlayerIsInFront(asChild))
			{
				
				if (!mbTriggeredServerNoises)
				{
					Voice_PlayWhenPossible("4_HeadingToServersShort");
					mbTriggeredServerNoises = true;
				}
				
				/////////////////////////
				///Stop exploration music
				Music_Stop(5.0f, eMusicPrio_BgAmb);
			}
			else
			{
				cLux_AddTodoMessage("Sound: Stop puppet sounds fade out.");
			}
			return true;
		}

		//-------------------------------------------------------
		
		//} END Enter Server Room Ara

		/////////////////////////////////////////
		// Event: Walk down stairs
		//{//////////////////////////////////////

		//-------------------------------------------------------
		
		bool CollisionServerAreaMusicTrigger(const tString &in asParent, const tString &in asChild, int alState)
		{
			if (alState != 1) return true;
			if(mbServerMusicStarted) return true;
			
			mbServerMusicStarted = true;
			
			if(mbHasEncounteredPuppet==false)
				Music_PlayOverlay("02_05_enterserverroom", 0.65f);
			
			Music_PlayExt("02_05_serverroom_encounter", true, 0.55, 1.0f, 10.0f, 0.0f, eMusicPrio_MinorEvent, true);
			
			return true;
		}
		
		//-------------------------------------------------------
		
		bool CollisionStopServerMusic(const tString &in asParent, const tString &in asChild, int alState)
		{
			if(mbServerMusicStarted==true && mbFixedServer==true)
			{
				mbServerMusicStarted = false;
				Music_Stop(3.0f, eMusicPrio_MinorEvent);
				Music_Stop(5.0f, eMusicPrio_AgentAmb);
				Music_Stop(5.0f, eMusicPrio_AgentAlert);
				cLux_AddDebugMessage("Server Fixed, player safe, stopping server amb");
			}
			return true;
		}

		//-------------------------------------------------------
		bool mbConstructNoisesActive = false;
		bool CollisionStaircaseConstructNoises(const tString &in asParent, const tString &in asChild, int alState)
		{
			Sound_CreateAtEntity("AkersStairsStart", "02_05_theta/sweeteners/akers_tomfoolery/akers_stairs_loop", "ServerRoomDoor");
			Sound_FadeGlobalVolume(0.65f, 3.0f, eSoundEntryType_World);
			mbConstructNoisesActive = true;
			return false;
		}
		
		bool CollisionStaircaseConstructNoiseStop(const tString &in asParent, const tString &in asChild, int alState)
		{
			Sound_CreateAtEntity("AkersStairsStop", "02_05_theta/sweeteners/akers_tomfoolery/akers_stairs_end", "ServerRoomDoor");
			Sound_Stop("AkersStairsStart", 1.0f);
			Sound_FadeGlobalVolume(1.0f, 3.0f, eSoundEntryType_World);
			mbConstructNoisesActive = false;
			return false;
		}
		
		//-------------------------------------------------------
		
		bool CollideHearPuppetInServerRoom(const tString &in asParent, const tString &in asChild, int alState)
		{
			Sound_CreateAtEntity("TriggerEnablePuppet", "02_05_theta/sweeteners/akers_tomfoolery/akers_bottom_cave_sweet", "ServerRoomDoor", 0, false, 1);
			Sound_FadeGlobalVolume(0.65f, 3.0f, eSoundEntryType_World);
			Music_FadeVolumeMul(0.65f, 3.0f);
			Map_AddTimer("FadeUpAkersHitting", 4.0f, "FadeUpAkersHitting");
			Sound_Stop("AkersStairsStop", 3.0f);
			return false;
		}
		
		void FadeUpAkersHitting(const tString &in asTimer)
		{
			Sound_FadeGlobalVolume(1.0f, 3.0f, eSoundEntryType_World);
			Music_FadeVolumeMul(1.0f, 3.0f);
		}
		
		//} END Event Walk down stairs
		
		/////////////////////////////////////////
		// Event: Checkpoint setup
		//{//////////////////////////////////////

		//-------------------------------------------------------
		
		bool CollisionServerRoomCheckpoint(const tString &in asParent, const tString &in asChild, int alState)
		{	
			if (alState != 1) return true;
			
			if (mbFixedServer)
			{
				return false;
			}
				
			if(mbServerRoomCheckpointDone) return true;
			
			mbServerRoomCheckpointDone=true;
				
			CheckPoint_Setup("CheckpointServerRoom");
			
			return true;
		}
		
		//-------------------------------------------------------
		
		void CheckpointServerRoom(int alRecentDeaths, const tString&in asDeathSource)
		{
			
		}
		
		//-------------------------------------------------------
		
		//} END Event Checkpoint setup
		
		/////////////////////////////////////////
		// Event: Puppet Control
		//{//////////////////////////////////////
		
		//-------------------------------------------------------
		
		int mlPuppetCurrentPatrolPath=-1;
		
		//-------------------------------------------------------
		
		void RenablePuppetIfNeeded()
		{
			if(Entity_IsActive("Puppet")) return;
			
			Entity_PlaceAtEntity("Puppet", "RenablePuppetPos", cVector3f_Zero,false);	
			Entity_SetActive("Puppet", true);
			AttackMeter_SetAttackerTeleportPosition("Spawn_Server_Puppet_*");
			
		}
		
		//-------------------------------------------------------
		
		void SetPuppetPatrolPath_ServerRoom()
		{
			if(mlPuppetCurrentPatrolPath==0) return;
			mlPuppetCurrentPatrolPath =0;
			
			RenablePuppetIfNeeded();
			
			cLux_AddDebugMessage("Puppet ServerRoom PatrolPath Selected!");
			Pathfinder_Track_Clear("Puppet");
			Pathfinder_Track_Add("Puppet", "PathNodeArea_174", 1, 9);
			Pathfinder_Track_Add("Puppet", "PathNodeArea_238", 1, 9);
			Pathfinder_Track_Add("Puppet", "PathNodeArea_246", 1, 9);
			Pathfinder_Track_Add("Puppet", "PathNodeArea_196", 1, 9);
			Pathfinder_Track_Add("Puppet", "PathNodeArea_190", 1, 9);
			Pathfinder_Track_Add("Puppet", "PathNodeArea_8", 1, 9);
			Pathfinder_Track_Add("Puppet", "PathNodeArea_144", 1, 9);
			Pathfinder_Track_Add("Puppet", "PathNodeArea_172", 1, 9);
			Pathfinder_Track_Add("Puppet", "PathNodeArea_252", 1, 9);
			Pathfinder_Track_Start("Puppet", true);
		}
		
		void SetPuppetPatrolPath_WauRoom()
		{
			if(mlPuppetCurrentPatrolPath==1) return;
			mlPuppetCurrentPatrolPath =1;
			
			RenablePuppetIfNeeded();
			
			cLux_AddDebugMessage("Puppet WauRoom PatrolPath Selected!");
			Pathfinder_Track_Clear("Puppet");
			Pathfinder_Track_Add("Puppet", "PathNodeArea_103", 1, 5);
			Pathfinder_Track_Add("Puppet", "PathNodeArea_348", 1, 5);
			Pathfinder_Track_Add("Puppet", "PathNodeArea_80", 1, 5);
			Pathfinder_Track_Add("Puppet", "PathNodeArea_293", 1, 5);
			Pathfinder_Track_Add("Puppet", "PathNodeArea_129", 1, 5);
			Pathfinder_Track_Add("Puppet", "PathNodeArea_228", 1, 5);
			Pathfinder_Track_Add("Puppet", "PathNodeArea_298", 1, 5);
			Pathfinder_Track_Start("Puppet", true);
		}
		
		void SetPuppetPatrolPath_HubRoom()
		{
			if(mlPuppetCurrentPatrolPath==2) return;
			mlPuppetCurrentPatrolPath =2;
			
			RenablePuppetIfNeeded();
			
			cLux_AddDebugMessage("Puppet HubRoom PatrolPath Selected!");
			Pathfinder_Track_Clear("Puppet");
			Pathfinder_Track_Add("Puppet", "PathNodeArea_42", 1, 5);
			Pathfinder_Track_Add("Puppet", "PathNodeArea_98", 1, 5);
			Pathfinder_Track_Add("Puppet", "PathNodeArea_54", 1, 5);
			Pathfinder_Track_Add("Puppet", "PathNodeArea_39", 1, 5);
			Pathfinder_Track_Add("Puppet", "PathNodeArea_231", 1, 5);
			Pathfinder_Track_Add("Puppet", "PathNodeArea_306", 1, 5);
			Pathfinder_Track_Add("Puppet", "PathNodeArea_43", 1, 5);
			Pathfinder_Track_Add("Puppet", "PathNodeArea_49", 1, 5);
			Pathfinder_Track_Start("Puppet", true);
		}
				
		//-------------------------------------------------------
		
		bool OnTriggerEnablePuppet(const tString &in asParent, const tString &in asChild, int alState)
		{
			cLux_AddDebugMessage("Puppet enabled!");
			
			Entity_SetActive("Puppet", true);
			
			mbHasEncounteredPuppet=true;
			
			SetPuppetPatrolPath_ServerRoom();
			
			AttackMeter_SetAttackerTeleportPosition("Spawn_Server_Puppet_*");
			
						
			Entity_SetActive("TriggerPatrolPath_*", true);
			
			mbHasEncounteredPuppet = true;
			
			Sound_CreateAtEntity("Puppet", "02_05_theta/sweeteners/akers_tomfoolery/akers_server_spawn", "Puppet", 0, false, 1);
			return false;
		}
		
		//-------------------------------------------------------
		
		bool OnTriggerPatrolPath_ServerRoom(const tString &in asParent, const tString &in asChild, int alState)
		{
			if(alState !=1) return true;
			
			cLux_AddDebugMessage("ServerRoom!");
			
			SetPuppetPatrolPath_ServerRoom();
			
			return true;
		}
		
		bool OnTriggerPatrolPath_WauRoom(const tString &in asParent, const tString &in asChild, int alState)
		{
			if(alState !=1) return true;
			
			cLux_AddDebugMessage("WauRoom!");
			
			SetPuppetPatrolPath_WauRoom();
			
			return true;
		}
		
		bool OnTriggerPatrolPath_HubRoom(const tString &in asParent, const tString &in asChild, int alState)
		{
			if(alState !=1) return true;
			
			cLux_AddDebugMessage("HubRoom!");
			
			SetPuppetPatrolPath_HubRoom();
			
			return true;
		}
				
		//-------------------------------------------------------
		
		bool TriggerActivateLowerRepelArea(const tString &in asParent, const tString &in asChild, int alState)
		{
			Entity_SetActive("Area_RepelAgentLower", alState==1);
			
			cLux_AddDebugMessage("LowerRepelAreaActive: "+(alState==1));
			
			return true;
		}
		
		//} END Event Puppet control

		/////////////////////////////////////////
		// Event: Dreamers
		//{//////////////////////////////////////
		
		bool OnTriggerDreamer(const tString &in asParent, const tString &in asChild, int alState)
		{
			if (alState==1)
			{
				// ===============================
				// Start victim
				// ===============================
				
				// Start distortion
				int lDistortionID = Effect_VideoDistortion_Start(0.25f, -1.0f, 1.0f, 1.0f);
				Entity_SetVarInt(asChild, "DistortionID", lDistortionID);
				
			}
			else
			{
				// ===============================
				// Stop victim
				// ===============================
				
				// Stop distortion
				int lDistortionID = Entity_GetVarInt(asChild, "DistortionID");
				Effect_VideoDistortion_FadeOut(lDistortionID, 1.0f);
			}
			return true;
		}
		
		/////////////////////////////////////////
		// Event: Repair Server
		//{//////////////////////////////////////

		//-------------------------------------------------------
		
		bool mbAllowServerReset = false;
		bool mbResetLeverPulledOnce = false;
		       
		//-------------------------------------------------------
		
        void Interact_ServerButtonGlass(const tString &in asEntity)
        {
            Sound_CreateAtEntity("ButtonPress", "Entities_Station/tech/control_board_pplant_button/interact", asEntity);
        }
        
		//-------------------------------------------------------
		
		void panel_solve_basement_OnConnectionStateChange(const tString &in asEntity, int alState)
		{
			// Temp fix for Alpha to solve the puzzle with one button push
			
			if (alState != 1) return;
			
			Entity_SetInteractionDisabled(asEntity,true);
			
			if (mbFixedServer) return;
			SequenceServerFixed("");
		}
		
		//-------------------------------------------------------
		
		void OnServerKeyStateChanged(const tString &in asEntity, int alState)
		{
			if (mbFixedServer || alState==0) return;
			
			//////////////////////////
			// Moved to on
			if (alState==1)
			{
                Sound_CreateAtEntity("SwitchOn", "Entities_Station/object/tape_recorder/start", asEntity);
                
				if (mbAllowServerReset)
					return;
					
				Sound_CreateAtEntity("ServerResetPleaseHold", "02_05_theta/sweeteners/server_lever/server_lever_start", "ServerResetTerminal", 0, false);
				GenericTerminalLoadingSoundStart("ServerResetTerminal");
				Map_AddTimer("ServerResetPreparation", gfServerResetWaitTime, "TimerAllowServerReset");
				Entity_SetVarString("ServerResetTerminal", "ErrorMsg", "");
				
				Sound_CreateAIEventAtEntity(asEntity, 50,3);
				
				mbResetLeverPulledOnce = true;
			}
			
			//////////////////////////
			// Moved to off
			else
			{
                Sound_CreateAtEntity("SwitchOn", "Entities_Station/object/tape_recorder/stop", asEntity);
                
				if (!mbAllowServerReset)
				{
					// Player cancelled preparation
					if (Map_GetTimerTime("ServerResetPreparation") > 0)
					{
						Map_RemoveTimer("ServerResetPreparation");
						
						Entity_SetVarString("ServerResetTerminal", "ErrorMsg", "ServerRepeat_ResetUndone");
						GenericTerminalLoadingSoundStop("ServerResetTerminal");
						cLux_AddTodoMessage("Sound: Server reset error sound.");
						Sound_CreateAtEntity("ServerResetError", "02_05_theta/sweeteners/server_beep/early_pull", "ServerResetTerminal", 0, false);
					}
					return;
				}
				
				if (Map_GetTimerTime("ServerResetWindowWarning") == 0)
				{
					Lamp_SetLit("ServerResetWarning_*", false, true);
					Sound_Stop("ServerResetWarning", 0.25);
				}
				
				Sound_CreateAtEntity("ServerResetComplete", "02_05_theta/sweeteners/server_lever/server_lever_end", "ServerResetTerminal", 0, false);
				GenericTerminalLoadingSoundStop("ServerResetTerminal");
				Map_RemoveTimer("CountdownSound");
				Sound_Stop("ServerAlarm1", 0.1f);
				Sound_Stop("ServerAlarm2", 0.1f);
				
				SequenceServerFixed("");
				
				Sound_CreateAIEventAtEntity(asEntity, 50,3);
				
				ServerKey_LockInPlace();
				Map_RemoveTimer("ServerResetWindowOver");
				Map_RemoveTimer("ServerResetWindowWarning");
				Map_RemoveTimer("ServerResetWindowWarningSound");
			}
		}
		
		//-------------------------------------------------------
		
		void CountdownSound(const tString &in asTimer)
		{
			Map_AddTimer("CountdownSound", 1.0f, "CountdownSound");
			Sound_CreateAtEntity("CountdownBeep", "02_05_theta/sweeteners/server_beep/countdown", "ServerResetTerminal", 0, false);
		}

		//-------------------------------------------------------
		
		void TimerAllowServerReset(const tString &in asTimer)
		{
			cLux_AddDebugMessage("mbAllowServerReset");
			mbAllowServerReset = true;
			Map_AddTimer("ServerResetWindowWarningSound", gfServerResetTimeoutTime-10, "TimerServerResetWindowOver");
			Map_AddTimer("ServerResetWindowWarning", gfServerResetTimeoutTime-5, "TimerServerResetWindowOver");
			Map_AddTimer("ServerResetWindowOver", gfServerResetTimeoutTime, "TimerServerResetWindowOver");
			Map_AddTimer("CountdownSound", 1.0f, "CountdownSound");
			Sound_CreateAtEntity("CountdownBeep", "02_05_theta/sweeteners/server_beep/countdown", "ServerResetTerminal", 0, false);
			GenericTerminalLoadingSoundStop("ServerResetTerminal");
		}

		//-------------------------------------------------------
		
		void TimerServerResetWindowOver(const tString &in asTimer)
		{
			if (asTimer == "ServerResetWindowWarningSound")
			{
				Sound_CreateAtEntity("ServerAlarm1", "02_05_theta/sweeteners/server_beep/alarm_1", "ServerResetTerminal");
			}
			
			else if (asTimer == "ServerResetWindowWarning")
			{
				Sound_CreateAtEntity("ServerAlarm2", "02_05_theta/sweeteners/server_beep/alarm_2", "ServerResetTerminal");
				Lamp_SetLit("ServerResetWarning_*", true, true);
			}
			
			else if(asTimer == "ServerResetWindowOver")
			{
				Lamp_SetLit("ServerResetWarning_*", false, true);
				Sound_Stop("ServerResetWarning", 0.25);
				
				Map_RemoveTimer("CountdownSound");
				Sound_Stop("ServerAlarm1", 0.1f);
				Sound_Stop("ServerAlarm2", 0.1f);
				
				mbAllowServerReset = false;
				
				ServerKey_ReturnToOff();
				
				Entity_SetVarString("ServerResetTerminal", "ErrorMsg", "ServerRepair_ResetExpired");
				
				cLux_AddTodoMessage("Sound: Server error sound, should be audible through most of the server room at least.");
				Sound_CreateAtEntity("ServerResetError", "02_05_theta/sweeteners/server_beep/early_pull", "ServerResetTerminal", 0, false);
			}
		}

		//-------------------------------------------------------

		void ServerKey_ReturnToOff()
		{
			MovingButton_SetReturnToOffTime("ServerKey",0.5f);
			MovingButton_SetSwitchedOn("ServerKey",false,true);
			
			Map_AddTimer("ServerKey_TimerReturnToNormal",1.0f,"ServerKey_TimerReturnToNormal");
		}
		
		//-------------------------------------------------------
		
		void ServerKey_TimerReturnToNormal(const tString& in asName)
		{
			MovingButton_SetReturnToOffTime("ServerKey",-1.0f);
		}
		
		//-------------------------------------------------------
		
		void ServerKey_LockInPlace()
		{
			Map_RemoveTimer("ServerKey_TimerReturnToNormal");
			MovingButton_SetCanBeSwitchedOn("ServerKey", false);
		}
				
		//-------------------------------------------------------
		
		cSequenceStatesData mServerFixedSequence;
			
		void SequenceServerFixed(const tString &in asTimer)
		{
			Sequence_Begin("SequenceServerFixed", mServerFixedSequence);
				
			if (Sequence_DoStepAndWait(0.3f))
			{		
				mlAmbientStage ++;
				
				Entity_SetActive("TriggerSaveFixedServer", true);
				mbFixedServer = true;
				if (mbVisitedSimRoom)
					Entity_AddCollideCallback("Player", "SimulationAreaTrigger", "CollisionSimAreaServersFixed");
			}
			else if (Sequence_DoStepAndWait(0.5))
			{
				Effect_Shake_Start(0.0125, 0.1, 0, 0);
			}
			else if (Sequence_DoStepAndWait(0.5))
			{				
				float fDelay = 0;
				for (int i = 1; Entity_Exists("ServerRoomBrokenServer_"+i); i++)
				{
					fDelay+=cMath_RandRectf(0.09, 0.17);
					Map_AddTimer("ServerRoomBrokenServer_"+i, fDelay, "TimerTurnOnEffects");
				}
			}
			else if (Sequence_DoStepAndWait(0.25) && !Agent_PlayerDetected("Puppet"))
			{			
			}
			else if (Sequence_DoStepAndWait(0))
			{
				// Update all terminals.
				Terminal_ForceCacheUpdate("computer_laptop_modded_2");
				Terminal_ForceCacheUpdate("ControlRoomTerminal_*");
				Terminal_ForceCacheUpdate("BrandonTerminal");
				Terminal_ForceCacheUpdate("LegacyTerminal");
				Terminal_ForceCacheUpdate("datapad_1");
				Terminal_ForceCacheUpdate("StatusTerminal");
				Terminal_ForceCacheUpdate("ServerMaintenanceComputer");
			}
			Sequence_End();
		}

		//-------------------------------------------------------

		bool OnTriggerAutoSave(const tString &in asParent, const tString &in asChild, int alState)
		{
			Game_AutoSave();
			return false;
		}
		
		//-------------------------------------------------------
		
		//} END Event Repair Server

		/////////////////////////////////////////
		// Event: Leave Server Area
		//{//////////////////////////////////////
		
		//-------------------------------------------------------
		
		bool mbLeaveServerAreaCommentPlayed=false;

		//-------------------------------------------------------
		
		bool CollisionLeavingServerArea(const tString &in asParent, const tString &in asChild, int alState)
		{
			if (alState == 1) return true;
			if (!Entity_PlayerIsInFront(asChild)) return true;
			
			cLux_AddDebugMessage("Leave server area!");
			
			if(Entity_IsActive("Puppet"))
				Agent_SetAutoDisableWhenOutOfSightActive("Puppet", true, 20);
			
			if(mbConstructNoisesActive==true)
			{
				Sound_Fade("AkersStairsStart", 0.0f, 3.0f);
				Sound_FadeGlobalVolume(1.0f, 3.0f, eSoundEntryType_World);
			}
			
			mbServerRoomCheckpointDone = false;
			mlPuppetCurrentPatrolPath=-1;
			
			if(mbFixedServer==true || mbVisitedServerRoom==false)
			{
				Map_AddTimer("StartAmbient", cMath_RandRectf(3.0f,5.0f), "AmbientMusicHandler");
				cLux_AddDebugMessage("Starting ambient music");
			}
			
			if(mbServerMusicStarted)
			{
				mbServerMusicStarted = false;
				Music_Stop(3.0f, eMusicPrio_MinorEvent);
			}
			
			if (mbFixedServer && mbLeaveServerAreaCommentPlayed==false)
			{
				mbLeaveServerAreaCommentPlayed = true;
				
				Voice_PlayWhenPossible("4_FixedServersAndLeftArea");
				return false;
			}
					
			return true;
		}

		//-------------------------------------------------------
		
		//} END Event Leave Server Ara

	//} END SCENE 4 SERVER ROOM

	/////////////////////////////////////////
	// ==============
	// SCENE 5 *FIND BACK-UP SERVER; DISCOVER SIMON'S HISTORY*
	// ==============
	//{//////////////////////////////////////

	//-------------------------------------------------------
	
	bool mbKnowsSimonHistory = false;
	bool mbTriggerSimonAddendum = false;
	bool mbPlayerUsingScanTerminal = false;

	//-------------------------------------------------------
	
	void OnChangeScanRoomLightSwitch(const tString &in asEntity, int alState)
	{
		OnChangeLightSwitch(asEntity, alState);
		
		Map_RemoveTimer("ScannerLamp_*");
		Map_AddTimer("ScannerLamp_*", 1.25, alState==1 ? "TimerSetLampLit" : "TimerSetLampUnlit");
	}

	//-------------------------------------------------------

	/////////////////////////////////////////
	// Scene 5 Event A *Head for Scan Room (dialog)*
	/////////////////////////////////////////

	//-------------------------------------------------------
	
	// SKIPPED

	//-------------------------------------------------------

	/////////////////////////////////////////
	// Scene 5 Event B *Datamine Intercom (dialog)*
	/////////////////////////////////////////

	//-------------------------------------------------------

	//-------------------------------------------------------

	/////////////////////////////////////////
	// Scene 5 Event C *Read Scan Testament (text)*
	/////////////////////////////////////////

	//-------------------------------------------------------

	//-------------------------------------------------------

	/////////////////////////////////////////
	// Scene 5 Event D *Interact with backup computer (dialog)*
	/////////////////////////////////////////

	//-------------------------------------------------------
	
	// See terminal: Back-up Interface

	//-------------------------------------------------------

	/////////////////////////////////////////
	// Scene 5 Event E *Find chip; retrieve backup data (dialog)*
	/////////////////////////////////////////

	//-------------------------------------------------------

	//-------------------------------------------------------

	/////////////////////////////////////////
	// Scene 5 Event F *Learn Simon's history (dialog)*
	/////////////////////////////////////////

	//-------------------------------------------------------

	bool OnTriggerLegacyRoomDoorway(const tString &in asArea, const tString &in asEntity, int alState)
	{
		Voice_PlayWhenPossible("Legacy_Enter");
		return false;
	}

	//-------------------------------------------------------

	/////////////////////////////////////////
	// Scene 5 Event G *Exit when knowing history (dialog)*
	/////////////////////////////////////////

	//-------------------------------------------------------
	
	bool CollisionScanRoomDoor(const tString &in asParent, const tString &in asChild, int alState)
	{
		if (alState==1) return true;
		
		if (Entity_PlayerIsInFront(asChild))
		{
			Voice_PlayWhenPossible("5_EnteredScanRoom");
		}
		else if (mbKnowsSimonHistory)
		{
			return false;			
		}
		
		return true;
	}

	//-------------------------------------------------------

	/////////////////////////////////////////
	// Scene 5 Event H *Go back along corridor (dialog)*
	/////////////////////////////////////////

	//-------------------------------------------------------
	
	// SKIPPED

	//-------------------------------------------------------

	/////////////////////////////////////////
	// Scene 5 Event I *Captured Construct (dialog)*
	/////////////////////////////////////////

	//-------------------------------------------------------

	// SKIPPED

	//-------------------------------------------------------

	/////////////////////////////////////////
	// Scene 5 Event J *Distant footsteps*
	/////////////////////////////////////////

	//-------------------------------------------------------

	//-------------------------------------------------------

	/////////////////////////////////////////
	// Scene 5 Event K *Catherine Comments*
	/////////////////////////////////////////

	//-------------------------------------------------------

	//-------------------------------------------------------
	
	//} END SCENE 5

	
	/////////////////////////////////////////
	// ==============
	// SCENE 7 *START LARGE ROBOT; FAILURE; HEAR CREW CALL FOR HELP.*
	// ==============
	//{//////////////////////////////////////

	//-------------------------------------------------------
	
	void SetupStartLargeRobot()
	{
		Wheel_SetStuckState("DunbatControls_*", -1, false);
		Entity_SetEffectsActive("Dunbat", false, false);
	}

	//-------------------------------------------------------

	/////////////////////////////////////////
	// Scene 7 Event A *Pick up Catherine; Dock door opens up*
	/////////////////////////////////////////
	
	//-------------------------------------------------------
	
	void UnlockDunbatDoor()
	{
		mbDockDoorUnlocked = true;
		cLux_AddDebugMessage("Unlock Dunbat door");
	}
	
	//-------------------------------------------------------
	
	void ReleaseCatherineControlRoom()
	{
		cLux_AddDebugMessage("RELEASE CATH");
		CathTool_AllowDetach("CathTool");
		Entity_SetPlayerInteractCallback("CathTool","InteractPickupControlRoomCath",true);
		Entity_SetActive("CathToolArea_1",false);
		
		/////////////////////////
		// Setup hub room
		Terminal_SetGuiActive("ControlRoomTerminal_*", false, 0.3f);
		Lamp_SetLit("ControlRoomTerminal_*", false, true);
	}

	//-------------------------------------------------------
	
	void InteractPickupControlRoomCath(const tString &in asEntity)
	{
		cLux_AddDebugMessage("Pick up Cath!");
		mbCathPluggedIn = false;
		mbBanterEnabled = false; // Turn off banter
		
		Sound_CreateAtEntity("PickUpCath", "Entities_Station/object/cathtool/remove_cathtool_nonunderwater", "cath_terminal_1", 0.0f, false, 1.0f);
		
		Sound_Stop("CathStage1", 0.25f);
		Sound_Stop("CathComputer2", 0.25f);
		
		Entity_SetActive("CathTool_InteractAux",false);
		UnlockDunbatDoor();
	}

	//-------------------------------------------------------

	/////////////////////////////////////////
	// Scene 7 Event B *Enter The Dock and insert Catherine (dialog)*
	/////////////////////////////////////////
	
	//-------------------------------------------------------
	
	bool CollisionEnteredDocks(const tString &in asArea, const tString &in asEntity, int alState)
	{
		//////////////////////////////////
		/// Kill Ambient Music and Bring up World
		Map_AddTimer("MusicKillAmb", 0.0f, "Music_KillAmbienceWorldMixer");	
		
		////////////////////
		/// Dunbat Music
		Music_Play("02_05_enterdunbatroom", 0.95, false, eMusicPrio_BigEvent);
		
		//////////////////
		//Preload dunbat sequence audio
		Sound_PreloadGroup("02_05_theta/sfx/dunbat", true);
		
		return false;
	}

	//-------------------------------------------------------

	/////////////////////////////////////////
	// Scene 7 Event C *Start-up Robot; Massive Failure (dialog)*
	/////////////////////////////////////////

	//-------------------------------------------------------
	
	int mlDunbatControlsTurned = 0;
	bool mbDunbatBootStepInProgress = false;
	
	void SetupDunbat()
	{
		// Light inside the cockpit
		Light_SetBrightness("PointLight_209",1.0f);
		
		// Set up animation
		Entity_PlayAnimation("Dunbat","idle_before_start");
		
		Entity_SetEffectsActive("DunbatConsole", false, false);
	}
	
	//-------------------------------------------------------
	
	void LineOver_FoundDunbat(const tString &in asParent, const tString &in asChild, int alState, bool abStart)
	{
		if (!abStart)
			return;
			
		Map_AddTimer("TimerSpotlightDunbat",0.5f,"TimerSpotlightDunbat");
	}
	
	//-------------------------------------------------------
	
	void TimerSpotlightDunbat(const tString& in asName)
	{
		Lamp_SetLit("Dunbat_StartLamp_*",true,true);
		
		Sound_PlayGui("02_05_theta/sfx/dunbat_lights_on", 1.0f, eSoundEntryType_Gui);
		Music_Play("02_01_lambdasight", 0.45f, false, eMusicPrio_BigEvent);	
		
		Terminal_SetGuiActive("ControlRoomTerminal_8", true, 0.3);
	}

	//-------------------------------------------------------
	
	void OnTurnOnDunbat(const tString &in asEntity)
	{
		if (mbDunbatAwake)
			return;
			
		if (mbDunbatCableAttached)
		{
			SetDunbatControlsOn(true);
			Sound_CreateAtEntity("ButtonPressDunbat", "02_05_theta/sweeteners/dunbat_panel_red_button", asEntity);
			Sound_PreloadGroup("02_05_theta/sfx/dunbat", true);
		}
		
		Sound_CreateAtEntity("ButtonPress", "Entities_Station/tech/control_board_pplant_button/interact", asEntity);
		Map_AddTimer("DoorSoundControl", 0.025f, "DunbatDoorSoundControl");
		Map_AddTimer("DoorSoundControlStop", 5.0f, "DunbatDoorSoundControlStop");
	}
	
	//-------------------------------------------------------
	
	void DunbatDoorSoundControl(const tString &in asTimer)
	{
		Map_AddTimer("DoorSoundControl", 0.025f, "DunbatDoorSoundControl");
		
		if(Sound_Exists("MoonDoor_SlideDoorStart"))
		{
			Sound_Stop("MoonDoor_SlideDoorStart", 0.05f);
		}
		
		if(Sound_Exists("MoonDoor_SlideDoorLoop"))
		{
			Sound_Stop("MoonDoor_SlideDoorLoop", 0.05f);
		}
		
		if(Sound_Exists("MoonDoor_SlideDoorStop"))
		{
			Sound_Stop("MoonDoor_SlideDoorStop", 0.05f);
		}
	}
	
	void DunbatDoorSoundControlStop(const tString &in asTimer)
	{
		Map_RemoveTimer("DoorSoundControl");
	}
	
	//-------------------------------------------------------
	
	void SetDunbatControlsOn(bool abOn)
	{
		cLux_AddDebugMessage("dbON");
		//////////////////////
		// Activate controls
		Entity_SetEffectBaseColor("DunbatControls_*", abOn?cColor_Red:cColor(0));
		Lamp_SetLit("DunbatControls_*", abOn, true);
		Wheel_SetStuckState("DunbatControls_*", 0, abOn);
		Terminal_SetGuiActive("DunbatInfoTerminal", abOn, 1);
				
		if (abOn)
		{
			Map_AddTimer("TimerCloseDoors",1.0f,"TimerCloseDoors");
		}
	}

	//-------------------------------------------------------
	
	void TimerCloseDoors(const tString &in asName)
	{
		SlideDoor_SetClosed("DockDoor_Door1",true);
		SlideDoor_SetClosed("MoonDoor", false);
	}

	//-------------------------------------------------------
	
	void SetDunbatControlsStuck(bool abState)
	{
		for (int i=1; Entity_Exists("DunbatControls_" + i); i++)
		{
			if (Wheel_GetState("DunbatControls_" + i) == 1) continue;
			
			Wheel_SetStuckState("DunbatControls_" + i, abState ? -1 : 0, false);
			
			Lamp_SetFlickerActive("DunbatControls_" + i + "_Lamp", abState);
		}
	}

	//-------------------------------------------------------
	
	void TimerControlStepDone(const tString &in asTimer)
	{
		Sound_CreateAtEntity("DunbatBeepGeneric", "02_05_theta/sfx/dunbat/beeps/dunbat_panel_beep", "DunbatConsoleLamp");
		mbDunbatBootStepInProgress = false;
		SetDunbatControlsStuck(false);
	}

	//-------------------------------------------------------
	
	void OnChangeDunbatControls(const tString &in asEntity, int alState)
	{
		if (alState != 1) return;
		
		mlDunbatControlsTurned++;
		Entity_SetEffectBaseColor(asEntity+"_Lamp", cColor_Green);
		SetDunbatControlsStuck(true);
		
		switch (mlDunbatControlsTurned)
		{
			case 1:
				Sound_CreateAtEntity("DunbatBeepGeneric", "02_05_theta/sfx/dunbat/beeps/dunbat_panel_beep", "DunbatConsoleLamp");
				Entity_SetEffectsActive("Dunbat", true, true);
				Map_AddTimer("ControlStepDone", 2, "TimerControlStepDone");
				Entity_PlayAnimation("Dunbat", "startup", 0.1f, false, false, "OnDunbatAnimDone");
				Sound_CreateAtEntity("DunbatStartup", "02_05_theta/sfx/dunbat/dunbat_startup", "Dunbat");
				Sound_CreateAtEntity("DunbatHanging", "02_05_theta/sfx/dunbat/dunbat_hanging_loop", "Dunbat", 3.0f, false, 1.0f);
				Sound_CreateAtEntity("DunbatStartupClunk", "02_05_theta/sfx/dunbat/dunbat_clunk_system_active", "Dunbat");
				
				Effect_Rumble_Start(0.2, 0.2);
				
				DunbatAudioEngine();
				break;
			case 2:
				SequenceSecondDunbatControlChanged("");
				Sound_CreateAtEntity("DunbatBeepGeneric", "02_05_theta/sfx/dunbat/beeps/dunbat_panel_beep", "DunbatConsoleLamp");
				break;
			case 3:
				cLux_AddTodoMessage("Sound: Third step in Dunbat start sequence.");
				Sound_CreateAtEntity("DunbatBeepGeneric", "02_05_theta/sfx/dunbat/beeps/dunbat_panel_beep", "DunbatConsoleLamp");
				Sound_CreateAtEntity("DunbatPrepRelease", "02_05_theta/sfx/dunbat/dunbat_clunk_preparing_release", "Dunbat");
				Map_AddTimer("ControlStepDone", 2, "TimerControlStepDone");
				Entity_PlayAnimation("Dunbat", "started_idle", 0.1f, true);
				mbDunbatBootStepInProgress = true;
				break;
			case 4:
				SequenceDunbatFailure("");
				Lamp_SetFlickerActive("DunbatControls_*", false);
				break;
		}
	}

	//-------------------------------------------------------
	
	void OnDunbatAnimDone(const tString&in asEntity, const tString&in asAnim)
	{
		Entity_PlayAnimation("Dunbat", "started_idle", 0.3f, true);
	}
	
	//-------------------------------------------------------
	
	cSequenceStatesData mSecondDunbatControlChangedSequence;
		
	void SequenceSecondDunbatControlChanged(const tString &in asTimer)
	{
		Sequence_Begin("SequenceSecondDunbatControlChanged", mSecondDunbatControlChangedSequence);
			
		if (Sequence_DoStepAndWait(4.0f))
		{
			Sound_CreateAtEntity("DunbatStartupTesting", "02_05_theta/sfx/dunbat/dunbat_startup_testing", "Dunbat");
			Sound_CreateAtEntity("DunbatRunningTests", "02_05_theta/sfx/dunbat/dunbat_clunk_running_tests", "Dunbat");
			mbDunbatBootStepInProgress = true;
			Entity_PlayAnimation("Dunbat", "startup_testing", 0.3f, true);
			Effect_Rumble_Start(0.2, 0.3);
		}
		else if (Sequence_DoStepAndWait(0.5))
		{
			Sound_CreateAtEntity("DunbatBeepOK", "02_05_theta/sfx/dunbat/beeps/dunbat_panel_systems_ok", "DunbatConsoleLamp");
			mbDunbatBootStepInProgress = false;
			SetDunbatControlsStuck(false);
			Entity_PlayAnimation("Dunbat", "started_idle", 0.3f, true);
		}
		Sequence_End();
	}

	//-------------------------------------------------------
	
	cSequenceStatesData mDunbatFailureSequence;
	bool mbDunbatCableAttached = false;
	bool mbDunbatAwake = false;
	
	void SequenceDunbatFailure(const tString &in asTimer)
	{
		Sequence_Begin("SequenceDunbatFailure", mDunbatFailureSequence);
			
		if (Sequence_DoStepAndWait(2))
		{
			mbDunbatBootStepInProgress = true;
			Entity_PlayAnimation("Dunbat", "increased_shaking", 0.3f, true);
			Sound_CreateAtEntity("DunbatIncreasedShaking", "02_05_theta/sfx/dunbat/dunbat_increased_shaking", "Dunbat");
			Sound_CreateAtEntity("DunbatPreparingRelease", "02_05_theta/sfx/dunbat/dunbat_clunk_release_in_progress", "Dunbat");
			Sound_PreloadGroup("02_05_theta/sfx/dunbat/dunbat_starts_frenzying", false);
			mbDunbatAwake = true;
			Effect_Rumble_Start(0.2, 0.2);
		}
		else if (Sequence_DoStepAndWait(0.0))
		{
			StartDunbatAlarm(1);
			Map_AddTimer("DunbatSparksPSArea_3", 0.25, "TimerDunbatSparks");
			Entity_SetEffectsActive("Dunbat",false,true);
			mbDunbatBootStepInProgress = false;
						
			Sound_CreateAtEntity("DunbatFrenzy", "02_05_theta/sfx/dunbat/dunbat_starts_frenzying", "Dunbat");
			DunbatEngineLoopStop(3.0f);
			Sound_Stop("DunbatHanging", 3.0f);
			Entity_PlayAnimation("Dunbat", "frenzy_start", 0.3f, false, true, "OnDunbatAnimComplete");
			
			Sound_FadeGlobalVolume(0.45f, 4.0f, eSoundEntryType_World);
			
			Effect_Rumble_Start(1.0, 5.0, 0.1, 1.5f);
			
			StartPowerFluctuations();
		}
		else if (Sequence_DoStepAndWait(1.5))
		{
			Voice_SetSource("Dunbat", "Dunbat", 2, 30, true, 30);
			Voice_SetCharacterSpeakingCallback("Dunbat","OnDunbatSpeaking");
			Voice_Play("7_DunbatSpeaks", -1, "", 2);
		}
		else if (Sequence_DoStepAndWait(1))
		{
			Map_AddTimer("CableSparksPSArea_1", 0.3, "TimerCableSparks");
			Map_AddTimer("CableSparksPSArea_2", 0.6, "TimerCableSparks");

			Map_AddTimer("DunbatSparksPSArea_2", 1.2, "TimerDunbatSparks");
			
			Wheel_SetStuckState("DunbatControls_*", 0, false);
			Entity_SetConnectionStateChangeCallback("DunbatControls_*", "");
			
			ParticleSystem_CreateAtEntity("DunbatContSparks1", "elec_spark_large_continuous.ps", "DunbatSparksPSArea_6", true);
			ParticleSystem_CreateAtEntity("DunbatContSparks2", "elec_spark_large_continuous.ps", "DunbatSparksPSArea_7", true);
		}
		else if (Sequence_DoStepAndWait(1.5f))
		{
			StartDunbatAlarm(2);
			Effect_Shake_Start(0.0025, 15, 0.2, 0.3);
			
			Map_AddTimer("DunbatSparksPSArea_1", 1.5, "TimerDunbatSparks");
			
			ParticleSystem_CreateAtEntity("DunbatContSparks1", "elec_sparks_sideways_cont.ps", "DunbatSparksPSArea_4", true);
			ParticleSystem_CreateAtEntity("DunbatContSparks2", "elec_sparks_sideways_cont.ps", "DunbatSparksPSArea_5", true);			
			ParticleSystem_CreateAtEntity("DunbatContSparks1", "elec_spark_large_continuous.ps", "DunbatSparksPSArea_8", true);
			ParticleSystem_CreateAtEntity("DunbatContSparks2", "elec_spark_large_continuous.ps", "DunbatSparksPSArea_9", true);
			
			Map_AddTimer("TimerDunbatFrenzyShake",cMath_RandRectf(0.1f,0.3f),"TimerDunbatFrenzyShake");
		}
		else if (Sequence_DoStepAndWait(1.0f))
		{
			Voice_Play("7_DunbatTooLate", -1, "", 3);
		}
		else if (Sequence_DoStepAndWait(5.25f))
		{
			Entity_PlayAnimation("Dunbat", "frenzy_fall", 0.3f, false, true, "");
		}
		else if (Sequence_DoStepAndWait(0.5f))
		{
			///////////////
			// Blow player backwards into darkness
			Effect_Fade_Out(1.0f);
			Player_GiveDamage(0.1f, 0.1f, eDamageType_Electricity, "Dunbat");
			Player_AddBodyForceAwayFromEntity("TriggerDunbatSplash", 40000.0f);
			Player_FadeRollTo(-37.0f,35.0f,35.0f);
			Player_SetCrouching(true, true, true);
			Player_SetActive(false);
			
			Effect_Rumble_Start(0.9, 0.7);
			
			Sound_CreateAtEntity("PlayerHitFloor", "02_05_theta/sfx/dunbat/player_hit_floor", "Player");
			Sound_FadeGlobalVolume(0.35f, 0.35f, eSoundEntryType_GuiWorld);
			
			cLux_AddTodoMessage("Sound: Dunbat crashing into water");
			
			StopDunbatAlarm();
			
			Effect_Shake_Start(0.05, 0.7, 0.0, 0.3);
			ParticleSystem_CreateAtEntityExt("SplashEffect", "02_05_splash_dunbat.ps", "SplashPSArea", true, cColor(0.85,1,0.85,1));
			
			Map_RemoveTimer("TimerDunbatFrenzyShake");
			Map_RemoveTimer("TimerDunbatFlash");
		}
		else if (Sequence_DoStepAndWait(6.0f))
		{
			// Go dark
			StopPowerFluctuations();
			Sound_FadeGlobalVolume(1.0f, 6.0f, eSoundEntryType_GuiWorld);
			
			Effect_Shake_Start(0.025, 0, 0.5, 0.3);
			Entity_SetEffectsActive("Dunbat", false, true);
			Terminal_SetGuiActive("DunbatInfoTerminal", false, 0.5);
			Lamp_SetLit("DunbatControls_*", false, true);
			
			ParticleSystem_Destroy("DunbatContSparks1");
			ParticleSystem_Destroy("DunbatContSparks2");
					
			////////////////////////////////
			// Setup lamps after breakdown
			for (int i = 1; Entity_Exists("DockPoolLamp_"+i);i++)
			{
				Map_AddTimer("DockPoolLamp_"+i, cMath_RandRectf(0, 1), "TimerSetLampUnlit");
			}
			Lamp_SetLit("DockEntranceLamp_*", false, true);
			Light_SetVisible("VentSpot", true);
			Light_SetVisible("VentPoint_*", true);
			Light_SetVisible("DunbatControls_Highlight", false);
			Light_SetVisible("DockElectronics_Light_*", false);
			Lamp_SetLit("DockElectronics_Lamp_*", false, true);
			Entity_SetEffectsActive("DockElectronics_NotLamp_*", false, true);
			
			Lamp_SetLit("DunbatConsoleLamp",false,true);
			Lamp_SetLit("DunbatCableLamp_*",false,true);
			
			// Open Vent
			Button_SetLocked("maintenance_tunnel_hatch_1_panel_1", false);
			Lamp_SetLit("lamp_vent_1",true,true);
			
			Depth_Audio_Fear_MediumIntensity();
		}
		else if (Sequence_DoStepAndWait(1.0f))
		{
			Game_AutoSave();
		}
		else if (Sequence_DoStepAndWait(5.0f))
		{
			// Wake the player up
			Effect_Fade_In(5.0f);
			Sound_Play("dunbat_water_stage2", 3.0f);
			Player_SetActive(true);
			Player_FadeRollTo(0.0f,1.0f,10.0f);
			Sound_FadeGlobalVolume(1.0f, 5.0f, eSoundEntryType_World);
			Map_AddTimer("DunbatFailMusic", 3.0f, "DunbatFailMusic");
			
			LastOnSoma_SetText("02_05_theta_inside_7");
		}
		Sequence_End();
	}
	
	//-------------------------------------------------------
	
	void DunbatFailMusic (const tString &in asTimer)
	{
		Music_Play("02_01_deadconstruct", 0.85f, false, eMusicPrio_BigEvent);
	}
	
	void StartPowerFluctuations()
	{
		Timer_PoolFadeOut("");
	}
	
	//-------------------------------------------------------
	
	void Timer_PoolFadeOut(const tString& in asName)
	{
		for (int i = 1; Entity_Exists("DockPoolLamp_"+i);i++)
		{
			Map_AddTimer("DockPoolLamp_"+i, cMath_RandRectf(-0.05f, 0.05f), "TimerSetLampUnlit");
		}
		Map_AddTimer("Timer_PoolFadeIn",cMath_RandRectf(0.2f,0.5f),"Timer_PoolFadeIn");
	}
	
	//-------------------------------------------------------
	
	void Timer_PoolFadeIn(const tString& in asName)
	{
		for (int i = 1; Entity_Exists("DockPoolLamp_"+i);i++)
		{
			Map_AddTimer("DockPoolLamp_"+i, cMath_RandRectf(-0.05f, 0.05f), "TimerSetLampLit");
		}
		Map_AddTimer("Timer_PoolFadeOut",cMath_RandRectf(0.1f,0.2f),"Timer_PoolFadeOut");
	}
	
	//-------------------------------------------------------
	
	void StopPowerFluctuations()
	{
		Map_RemoveTimer("Timer_PoolFadeOut");
		Map_RemoveTimer("Timer_PoolFadeIn");
	}
	
	//-------------------------------------------------------
	
	bool mbDunbatEffectsActive = false;
	
	bool OnDunbatSpeaking(const tString &in asCharacter, bool abStartedTalking)
	{
		Entity_SetEffectsActive("Dunbat",abStartedTalking,true);
		mbDunbatEffectsActive = abStartedTalking;
		if (abStartedTalking)
		{
			Map_AddTimer("TimerDunbatFlash",cMath_RandRectf(0.1f,0.2f),"TimerDunbatFlash");
		}
		else
		{
			Map_RemoveTimer("TimerDunbatFlash");
		}
		return true;
	}
	
	//-------------------------------------------------------
	
    bool EnteredMaintenanceTunnel(const tString &in asParent, const tString &in asChild, int alState)
	{
	    Player_SetFallDamageActive(false);
		return false;
	}
	
	//-------------------------------------------------------
	
	void TimerDunbatFlash(const tString& in asName)
	{
		Entity_SetEffectsActive("Dunbat",!mbDunbatEffectsActive,true);
		mbDunbatEffectsActive=!mbDunbatEffectsActive;
		Map_RestartCurrentTimer(cMath_RandRectf(0.1f,0.2f));
	}
	
	//-------------------------------------------------------
	
	void TimerDunbatFrenzyShake(const tString& in asName)
	{
		Effect_Shake_Start(cMath_RandRectf(0.05,0.15), cMath_RandRectf(0.1f,0.3f), 0.01f, 0.01f);
		Map_RestartCurrentTimer(cMath_RandRectf(0.1f,0.3f));
	}
	
	//-------------------------------------------------------
	
	bool OnTriggerDunbatSplash(const tString &in asParent, const tString &in asChild, int alState)
	{
		SequenceStates_Resume("SequenceDunbatFailure");
		return false;
	}
	
	//-------------------------------------------------------
	
	void OnDunbatAnimComplete(const tString &in asEntityName, const tString &in asAnimName)
	{
		SequenceStates_Resume("SequenceDunbatFailure");
	}
	
	//-------------------------------------------------------
	
	void OnInteractDunbatCable(const tString &in asEntity)
	{
		
	}
	
	//-------------------------------------------------------
	
	bool OnAttachDunbatCable(const tString &in asStickyArea, const tString &in asBodyName)
	{
		cLux_AddDebugMessage("SOUND: attach cath cable.");
		mbDunbatCableAttached = true;
		Map_AddTimer("TimerLightDunbatConsole", 1.0f, "TimerLightDunbatConsole");
		Sound_CreateAtEntity("ConnectDunbat", "Entities_Station/tech/plug/electric_cable_plug", asStickyArea);
		
		Prop_SetStaticPhysics("DunbatCable", true);
		Entity_SetInteractionDisabled("DunbatCable", true);
		return true;
	}
	
	//-------------------------------------------------------
	
	void TimerLightDunbatConsole(const tString& in asName)
	{
		if (!mbDunbatCableAttached)
			return;
			
		Entity_SetEffectsActive("DunbatConsole", true, true);
		Lamp_SetLit("DunbatConsoleLamp",true,true);
		
		Entity_SetActive("DunbatCableLamp_Off",false);
		Lamp_SetLit("DunbatCableLamp_Off",false,true);
		
		Entity_SetActive("DunbatCableLamp_On",true);
		Lamp_SetLit("DunbatCableLamp_On",true,true);
	}
	
	//-------------------------------------------------------
	
	void OnDetachDunbatCable(const tString &in asStickyArea, const tString &in asBodyName)
	{
		cLux_AddDebugMessage("SOUND: Detach cath cable.");
		ParticleSystem_CreateAtEntity("DunbatCableSpark", "elec_spark_huge_oneshot.ps", "DunbatCableSticky", true);
		mbDunbatCableAttached = false;
		Entity_SetEffectsActive("DunbatConsole", false, true);
		Lamp_SetLit("DunbatConsoleLamp",false,true);
		
		if (!mbDunbatAwake)
		{
			SetDunbatControlsOn(false);
		}
	}

	//-------------------------------------------------------
	
	void TimerDunbatSparks(const tString &in asTimer)
	{
		Effect_Shake_Start(0.0075, 0, 0.1, 0.2);
		ParticleSystem_CreateAtEntity(asTimer+"_Particles", "elec_spark_huge_oneshot.ps", asTimer, false);
		
		cLux_AddTodoMessage("Sound: Part of what's holding the dunbat up breaking.");
		//Sound_CreateAtEntity(asTimer+"_Sound", "File", asTimer, 0, false);
	}

	//-------------------------------------------------------
	
	void TimerCableSparks(const tString &in asTimer)
	{
		ParticleSystem_CreateAtEntity(asTimer+"_Particles", "elec_spark_physics_oneshot.ps", asTimer, false);
		
		cLux_AddTodoMessage("Sound: Electrical sparks");
		Sound_CreateAtEntity(asTimer+"_Sound", "02_05_theta/sfx/dunbat/dunbat_spark_burst", "Dunbat", 0, false);
	}

	//-------------------------------------------------------
	
	void OnGuiDunbatInfo(const tString&in asEntityName, float afTimeStep)
	{
		ImGui_SetTransCategory("02_05_theta_inside");
		
		StationGuiBG_Backdrop();
		StationGuiBG_Scanlines();
		
		///////////////////////////////
		// Widget data
		cImGuiTextFrameData textData = ImGui_GetDefaultTextFrame();
		textData.mFontAlign = eFontAlign_Center;
		textData.mbUseBackgroundGfx = false;
		textData.mFont.mvSize = cVector2f(90, 90);
		
		tString sText;
		cStationGui_BigStatusMessageSettings statusMessage;
		statusMessage.mColor = gStationGuiColor_Normal;
		statusMessage.mfTextSizeMul = 1.25;
		switch (mlDunbatControlsTurned)
		{
			case 0:
				statusMessage.mfTextSizeMul = 1.5;
				sText = "DunbatStatus_1";
				break;
			case 1:
				sText = "DunbatStatus_2";
				break;
			case 2:
				if (mbDunbatBootStepInProgress)
				{
					sText = "DunbatStatus_3_Delay";
					statusMessage.mbBlinking = true;
				}
				else
				{
					sText = "DunbatStatus_3";
				}
				break;
			case 3:
				if (mbDunbatBootStepInProgress)
				{
					sText = "DunbatStatus_4_Delay";
					statusMessage.mbBlinking = true;
				}
				else
				{
					sText = "DunbatStatus_4";
				}
				break;
			case 4:
				if (mbDunbatBootStepInProgress)
				{
					sText = "DunbatStatus_Error_Delay";
					statusMessage.mbBlinking = true;
				}
				else
				{
					sText = "DunbatStatus_Error";
					statusMessage.mColor = gStationGuiColor_Warning;
					statusMessage.mbBlinking = true;
				}
				break;
		}
		StationGui_BigStatusMessage(sText, statusMessage);
	}

	//-------------------------------------------------------

	/////////////////////////////////////////
	// Scene 7 Event D *Emergency Transmission; There is way (dialog)*
	/////////////////////////////////////////
	
	//-------------------------------------------------------

	//-------------------------------------------------------
	
	//} END SCENE 7

	/////////////////////////////////////////
	// ==============
	// SCENE 8 *FIND WAY INTO SURVIVORS*
	// ==============
	//{//////////////////////////////////////

	//-------------------------------------------------------
	
	void SetupFindWayToSurvivors()
	{
		Light_SetVisible("VentSpot", false);
		Light_SetVisible("VentPoint_*", false);
		Light_SetFlickerActive("Hallway_SparkLight", false);
	}

	//-------------------------------------------------------

	/////////////////////////////////////////
	// Scene 8 Event A *Enter Hub Room and find vent (dialog)*
	/////////////////////////////////////////

	//-------------------------------------------------------
	

	//-------------------------------------------------------

	/////////////////////////////////////////
	// Scene 8 Event B *Enter Hub Room and find vent*
	/////////////////////////////////////////
	
	//-------------------------------------------------------
	
	bool CollisionAllowVentClimb(const tString &in asParent, const tString &in asChild, int alState)
	{
		Entity_SetActive("VentLookAt", false);
		
		cLux_AddDebugMessage("CollisionAllowVentClimb " + alState);
		Entity_SetActive("VentClimbInteract", alState==1);
		return true;
	}
	
	//-------------------------------------------------------
	
	void InteractClimbIntoVent(const tString &in asEntity)
	{
		cLux_AddDebugMessage("VentClimbAnim");
		CameraAnimation_Begin("VentClimbAnim", "", true);
	}

	//-------------------------------------------------------
	
	void InteractPushStaircaseTrigger(const tString &in asEntity)
	{
		Entity_CallEntityInteract("RollingStaircase");
	}

	//-------------------------------------------------------

	/////////////////////////////////////////
	// Scene 8 Event B New for transition 
	/////////////////////////////////////////

	//-------------------------------------------------------
	
	/////////////////////
	//Gives a more tumbeling fall and no (or little) player damage.
	bool mbFirstVentfall = false;
	bool CollideVentFall(const tString &in asParent, const tString &in asChild, int alState)
	{
		Map_AddTimer(asChild, 0.2, "TimerRemoveVentFallBlocks");
		
		if(mbFirstVentfall == false)
		{
			Map_AddTimer("VentFall_*", 0.7, "TimerRemoveVentFallBlocks");
			Map_AddTimer("Deload", 0.4, "PreloadTimer");	

			mbFirstVentfall = true;	
		}

		
		return true;
	}

	//-------------------------------------------------------
	
	void TimerRemoveVentFallBlocks(const tString &in asTimer)
	{
		Entity_SetActive(asTimer, false);
	}
	
	//-------------------------------------------------------
	
	bool CollisionEndLevel(const tString &in asParent, const tString &in asChild, int alState)
	{
		PreloadChangeOfMap();

		//Achievement_Unlock(eAchievement_PlanB);
		return false;
	}
    
    bool CollisionVentLand(const tString &in asParent, const tString &in asChild, int alState)
    {
        Sound_CreateAtEntity("VentLand", "01_04_transport_station/SFX/foley/vent_land", "Player");
        Depth_Audio_SimonGasp();
        Map_AddTimer("LandingBreathing", 1.0f, "LevelStart_LandingBreathing");
        return false;
    }
    
    void LevelStart_LandingBreathing(const tString &in asTimer)
    {
        Emotion_StartBackgroundBreath(eBreathType_Normal, 0.6f, 3, 8, 0, 3);
    }

	//-------------------------------------------------------
	
	//} END SCENE 8

	/////////////////////////////////////////
	// ==============
	// PRELOAD
	// ==============
	//{//////////////////////////////////////

	//-------------------------------------------------------


	bool PreloadDisabled(bool abCheckIfPreloading = true)
	{
		if(cLux_ScriptDebugOn())
		{
			cLux_AddDebugMessage("PRELOAD DISABLED!"); 
			
			return true;
		}
		
		if(abCheckIfPreloading && Map_IsPreloading() == false)
			return true;
			
		return false;
	}
	
	//-------------------------------------------------------

	void Preload()
	{
		if(PreloadDisabled(false)) return;
		
		Map_Preload("02_06_theta_tunnels.hpm", eWorldStreamPriority_Low);
	}
	
	//-------------------------------------------------------
	
	void PreloadDeload()
	{
		if(PreloadDisabled()) return;
		
		Map_Deload("Transfer2526");
	}
	
	//-------------------------------------------------------
	
	void PreloadChangeOfMap()
	{
		if(PreloadDisabled()) 
		{
			PreloadManualChangeMap();
			return;
		}
		
		Map_AddTimer("FadeGlobal", 0, "PreloadTimer");
		Map_AddTimer("ChangeMap", 0.7, "PreloadTimer");
		Map_AddTimer("ChangeMapNotReady", 5, "PreloadTimer");
	}
	
	//-------------------------------------------------------
	bool mbGlobalCopyCompleted = false;
	void PreloadTimer(const tString &in asTimer)
	{
		////////////////////////////
		//Preload - Change map globals when possible.
		if(asTimer == "FadeGlobal")
		{
			if(mbGlobalCopyCompleted == false) Map_AddTimer("FadeGlobal", 0.21, "PreloadTimer");
			else
			{
				Map_Preset_Fade("Preset2.6", 0.1);
				return;
			}
			
			mbGlobalCopyCompleted = Map_CopyGlobalSettings(Map_GetPreloadMap(), 0.2);
		}

		if(asTimer == "Deload") PreloadDeload();
		
		////////////////////////////
		//Preload - Change map when possible
		if(asTimer == "ChangeMap")
		{
			if(Map_IsPreloadCompleted())
			{
				Map_RemoveTimer("ChangeMapNotReady");
				
				Description_SetForceFading(true);
				Map_ChangeMap("02_06_theta_tunnels.hpm", "", "Transfer2526", "", "");
			}
			else Map_AddTimer("ChangeMap", 0.25, "PreloadTimer");
		}
		
		if(asTimer == "ChangeMapNotReady")
		{
			Player_SetMoveSpeedMul(0);
			
			Description_Add("02_05_theta_inside", "ScanRoom_Legacy_Loading", 10, false);
			Map_SetPreloadPriority(eWorldStreamPriority_VeryHigh);
		}
	}
	
	//-------------------------------------------------------

	void PreloadManualChangeMap()
	{
		Map_ChangeMap("02_06_theta_tunnels.hpm", "PlayerStartArea_1", "", "");
	}
	

	//-------------------------------------------------------
	
	//} END PRELOAD
	
	/////////////////////////////////////////
	// ==============
	// MUSIC
	// ==============
	//{//////////////////////////////////////
	
	//-------------------------------------------------------

	void LineOver_PlayBrandonCode(const tString &in asParent, const tString &in asChild, int alState, bool abStart)
	{
		if (abStart)
			return;
		/////////////////////////////
		///Play Music once Brandon Puzzle Complete and Fade World
		Music_Play("02_05_brandonscode", 0.85f, false, eMusicPrio_BigEvent);
		StopHangarEvent();
		StopAkersUpperDoor();
	}
	
	//-------------------------------------------------------
	
	void StartScanRoomCompleteAmbientMusic(const tString &in asTimer)
	{
		/////////////////////////////
		///Play Ambient Music between Scan Room and Dunbat Room
	}
	
	//-------------------------------------------------------
	
	void Music_KillAmbienceWorldMixer(const tString &in asTimer)
	{
		//////////////////////////////
		//Kill Ambient Music
		Music_Stop(8.5f, eMusicPrio_BgAmb);
		
		//////////////////////////////
		//Bring Up Ambience
		Sound_FadeGlobalVolume(1.0f, 3.0f, eSoundEntryType_World);
		
		cLux_AddDebugMessage("Fading Ambient Music and Bringing up World");
	}
	
		//-------------------------------------------------------
	
	void LineOver_AfterHearingRecording(const tString &in asParent, const tString &in asChild, int alState, bool abStart)
	{	
		if (abStart)
			return;
		//////////////////////////////
		//Play music after hearing recording
		Music_PlayExt("02_05_recording", false, 0.7f, 1.0f, 3.0f, 0.0f, eMusicPrio_BigEvent, true);
		
		cLux_AddDebugMessage("Play After Recording Piece of Music");
	}
	
	//} END MUSIC
	
	/////////////////////////////////////////
	// ==============
	// TERMINALS
	// ==============
	//{//////////////////////////////////////
	
	//-------------------------------------------------------

	/////////////////////////////////////////
	// *Helpers*
	/////////////////////////////////////////
	
	//-------------------------------------------------------
	
	void DoDialogWindowStart(const tString&in asCaption, const tString&in asText, const cVector2f &in avNrmSize = cVector2f(0.6, 0.2), float afZ=1.5f)
	{
		//////////////////////////////////
		// Setup widget data
		cImGuiWindowData window = StationGui_CreateDefaultWindowData();
		cImGuiTextFrameData textData;
		textData.mbUseBackgroundGfx = false;
		textData.mFont.mvSize = cVector2f(24, 24);
		textData.mFontAlign = eFontAlign_Center;
		textData.mColorText = cColor(0.8, 1);
		
		///////////////////////////////////////
		// Show message 
		ImGui_DoWindowStart(asCaption, window, ImGui_NrmPosGroup(cVector3f((1.f-avNrmSize.x)*0.5, (1.f-avNrmSize.y)*0.5, afZ)), ImGui_NrmSizeGroup(avNrmSize));
			
			ImGui_DoTextFrameExt(asText, ImGui_NrmSizeGroup(cVector2f(0.05, 0)), 0, 0, textData, 
							  ImGui_NrmPosGroup(cVector3f(0.0, 0.1, 1)), ImGui_NrmSizeGroup(cVector2f(1, 1)));
	}

	//-------------------------------------------------------
	
	void DoDialogWindowEnd()
	{
		ImGui_DoWindowEnd();
	}	

	//-------------------------------------------------------
	
	void DoStatusGaugesHorizontal(int alCount, const cVector3f &in avNrmPos, const cVector2f &in avNrmSize, float afThicknessMul = 0.8, float afMinValue = 0.5, 
								  float afMaxValue = 1.0f, const cColor &in aFillColor = cColor(-1), const tString &in asPrefix = "Horizontal")
	{
		cImGuiGaugeData gauge = StationGui_CreateDefaultGaugeData();
		cVector2f vSize = ImGui_NrmSizeGroup(avNrmSize);
		vSize.y = (vSize.y/alCount) * afThicknessMul;
		cVector3f vOffsetPos = cVector3f(0, avNrmSize.y/alCount, 0);
		
		for (int i = 0; i < alCount; i++)
		{
			float fValue =  Depth_ImGui_GetOscillatingSignalValue(asPrefix, i, eEasing_QuadInOut, 0.0f, 1.0f);
		
			if (aFillColor.r==-1)
				gauge.mGfxFill.mColor = gStationGuiColor_Warning * (cMath_Clamp((0.5f-fValue)*2.0f,0.0,1.0f)) +
										gStationGuiColor_Highlight * (0.5f-cMath_Abs(0.5f-fValue))*2.0f + 
										cColor_White * (cMath_Clamp((fValue-0.5f)*2.0f,0.0f,1.0f));
			else
				gauge.mGfxFill.mColor = aFillColor;
			
			ImGui_DoGauge(gauge, afMinValue+fValue*(afMaxValue-afMinValue), ImGui_NrmPosGroup(avNrmPos + vOffsetPos*i), vSize);
		}
	}
	
	//-------------------------------------------------------
	
	void DoStatusGaugesVertical(int alCount, const cVector3f &in avNrmPos, const cVector2f &in avNrmSize, float afThicknessMul = 0.8, float afMinValue = 0.75, 
								float afMaxValue = 1.0f, const cColor &in aFillColor = cColor(-1), const tString &in asPrefix = "Vertical")
	{
		cImGuiGaugeData gauge = StationGui_CreateDefaultGaugeData();
		gauge.mOrientation = eImGuiGaugeOrientation_Vert;
		cVector2f vSize = ImGui_NrmSizeGroup(avNrmSize);
		vSize.x = (vSize.x/alCount) * afThicknessMul;
		cVector3f vOffsetPos = cVector3f(avNrmSize.x/alCount, 0, 0);
		
		for (int i = 0; i < alCount; i++)
		{
			float fValue =  Depth_ImGui_GetOscillatingSignalValue(asPrefix, i, eEasing_QuadInOut, 0.0f, 1.0f);
		
			if (aFillColor.r==-1)
				gauge.mGfxFill.mColor = gStationGuiColor_Warning * (cMath_Clamp((0.5f-fValue)*2.0f,0.0,1.0f)) +
										gStationGuiColor_Highlight * (0.5f-cMath_Abs(0.5f-fValue))*2.0f + 
										cColor_White * (cMath_Clamp((fValue-0.5f)*2.0f,0.0f,1.0f));
			else
				gauge.mGfxFill.mColor = aFillColor;
				
			ImGui_DoGauge(gauge, afMinValue+fValue*(afMaxValue-afMinValue), ImGui_NrmPosGroup(avNrmPos + vOffsetPos*i), vSize);
			
		}
	}

	//-------------------------------------------------------
	
	void DoRandomNumbers(int alColumns, int alRows, const cVector3f &in avNrmPos, const cVector2f &in avSpacing, int alFontSize = 2, 
						 int alMinValue = 100, int alMaxValue = 999, const tString &in asPrefix = "Number")
	{		
		for (int i = 0; i < alRows*alColumns; i++)
		{
			ImGui_DoLabel("" + int(Depth_ImGui_GetOscillatingSignalValue(asPrefix, i, eEasing_QuadInOut, alMinValue, alMaxValue)), 
						  ImGui_NrmPosGroup(avNrmPos + cVector3f(avSpacing.x*(i%alColumns), avSpacing.y*(i/alColumns), 0)), cVector2f_MinusOne, alFontSize);
		}
	}

	//-------------------------------------------------------
		
	bool CheckForAndLoadChip(const tString &in asChipName, const tString &in asText, const tString &in asHDDSoundSource="")
	{
		int lLoadState = ImGui_GetStateInt(asChipName + "_LoadState");
		//////////////////////////////////////
		// Check if chip was inserted
		if (lLoadState==1)
		{
			int lSlot = 1;
			if (Entity_GetVarString(asChipName, "Slot")=="SimulationSlot_Right") lSlot=2;
			
			cGuiDialogBoxSettings dialogBox = StationGui_CreateDefaultDialogBox();
			dialogBox.mvSize = ImGui_NrmSize(0.5, 0.3);
			dialogBox.mType = eGuiDialogBoxType_OK;
			eGuiDialogCode code = Depth_ImGui_DialogBox("", "ChipInserted_"+lSlot, dialogBox);
			if (code == eGuiDialogCode_OK)
			{
				Depth_ImGui_ResetLoadingGauge(asChipName);
				ImGui_IncStateInt(asChipName + "_LoadState", 1);
				Depth_Audio_Terminal_Forward(ImGui_GetName());
			}
		}
		
		//////////////////////////////////////
		// Display loading dialog
		else if (lLoadState==2)
		{
			if (DoLoadingWindow(asChipName, "Loading", asText, 2.0f, true, 1.5f,
								"level_amb_shared_machines/tech/HDD/underload_loop", asHDDSoundSource))
			{
				ImGui_IncStateInt(asChipName + "_LoadState", 1);
				EnvChipCopySoundStop("SimulationSlot_Left");
				EnvChipCopySoundStop("ScanRoomSlot");
				Depth_Audio_Terminal_Confirm(ImGui_GetName());
				return true;
			}
		}
		
		return false;
	}

	//-------------------------------------------------------
	
	bool ChipIsLoading(const tString &in asChipName)
	{
		int lState = ImGui_GetStateInt(asChipName + "_LoadState") ;
		return lState==1 || lState==2;
	}

	//-------------------------------------------------------
	
	bool ChipIsLoaded(const tString &in asChipName)
	{
		return ImGui_GetStateInt(asChipName + "_LoadState")==3;
	}

	//-------------------------------------------------------
	
	void AddChip(const tString &in asTerminal, const tString &in asChipName)
	{
		Terminal_SetImGuiStateInt(asTerminal, asChipName + "_LoadState", 1);
		Depth_Audio_Terminal_Insert(asTerminal);
	}

	//-------------------------------------------------------
	
	void RemoveChip(const tString &in asTerminal, const tString &in asChipName)
	{
		Terminal_SetImGuiStateInt(asTerminal, asChipName + "_LoadState", 0);
		Depth_Audio_Terminal_Remove(asTerminal);
	}

	//-------------------------------------------------------
	
	bool DoLoadingWindow(const tString &in asName, const tString &in asCaption, const tString &in asText, float afLoadTime, bool abReset, float afZ=1.5f,
						 const tString &in asSoundFile="", const tString &in asSoundSource="", float afSoundFadeInTime=0, float afSoundFadeOutTime=0)
	{		
		if (asSoundFile != "" && !Depth_ImGui_LoadingInProgress(asName))
			Sound_CreateAtEntity(ImGui_GetName()+asName+"LoadSound", asSoundFile, asSoundSource == "" ? ImGui_GetName() : asSoundSource, afSoundFadeInTime);
			
		DoDialogWindowStart(asCaption, asText, cVector2f(0.6, 0.2), afZ);
			bool bDone = Depth_ImGui_LoadingGauge(asName, afLoadTime, abReset, ImGui_NrmPosGroup(cVector3f(0.1, 0.5, 1)), 
												  ImGui_NrmSizeGroup(cVector2f(0.8, 0.3)), StationGui_CreateDefaultGaugeData());
		DoDialogWindowEnd();
		
		if (bDone && asSoundFile != "")
			Sound_Stop(ImGui_GetName()+asName+"LoadSound", afSoundFadeOutTime);
		
		return bDone;
	}
	
	//-------------------------------------------------------

	/////////////////////////////////////////
	// Terminal *Control room screens*
	/////////////////////////////////////////
	
	//-------------------------------------------------------
	
	void OnGuiControlRoomTerminal_1(const tString&in asEntityName, float afTimeStep)
	{
		StationGuiBG_Scanlines();
		StationGuiBG_Backdrop();
		
		Depth_ImGui_CathPortrait(afTimeStep);
	}
	
	//-------------------------------------------------------
	
	void OnGuiControlRoomTerminal_6(const tString&in asEntityName, float afTimeStep)
	{
		ImGui_SetTransCategory("");
		
		StationGuiBG_Scanlines();
		StationGuiBG_Backdrop();
		StationGuiBG_OrnamentBottomLeft();
		StationGuiBG_OrnamentBottomRight();
		StationGuiBG_OrnamentTopLeft();
		
		cImGuiWindowData window = StationGui_CreateDefaultWindowData();
		ImGui_DoWindowStart("Status", window, ImGui_NrmPosGroup(cVector3f(0.1, 0.1, 3)), ImGui_NrmSizeGroup(cVector2f(0.8, 0.8)));
		
			DoStatusGaugesHorizontal(8, cVector3f(0.4, 0.1, 1), cVector2f(0.5, 0.8));
			DoRandomNumbers(2, 4, cVector3f(0.1, 0.1, 1), cVector2f(0.1175, 0.23));
							  
		ImGui_DoWindowEnd();
	}

	//-------------------------------------------------------
	
	void OnGuiControlRoomTerminal_7(const tString&in asEntityName, float afTimeStep)
	{
		ImGui_SetTransCategory("");
		
		StationGuiBG_Scanlines();
		StationGuiBG_Backdrop();
		StationGuiBG_OrnamentBottomRight();
		StationGuiBG_OrnamentTopLeft();
		
		cImGuiWindowData window = StationGui_CreateDefaultWindowData();
		ImGui_DoWindowStart("Status", window, ImGui_NrmPosGroup(cVector3f(0.1, 0.1, 3)), ImGui_NrmSizeGroup(cVector2f(0.8, 0.8)));
		
			DoStatusGaugesVertical(4, cVector3f(0.1, 0.1, 1), cVector2f(0.5, 0.3), 0.8, 0.5, 0.9, cColor(0.75, 0.2, 0.2), "Red");
			DoRandomNumbers(3, 1, cVector3f(0.65, 0.25, 1), cVector2f(0.1175, 0.23));
			DoStatusGaugesVertical(4, cVector3f(0.1, 0.6, 1), cVector2f(0.5, 0.3), 0.8, 0.5, 0.9, cColor(0.2, 0.6, 0.2), "Green");
			DoRandomNumbers(3, 1, cVector3f(0.65, 0.75, 1), cVector2f(0.1175, 0.23));
		
		ImGui_DoWindowEnd();
	}

	//-------------------------------------------------------
	
	void OnGuiControlRoomTerminal_8(const tString&in asEntityName, float afTimeStep)
	{
		OnGuiDunbatCamera(asEntityName,afTimeStep);
	}

	//-------------------------------------------------------
	
	void OnGuiControlRoomTerminal_9(const tString&in asEntityName, float afTimeStep)
	{
		ImGui_SetTransCategory("");
		
		StationGuiBG_Scanlines();
		StationGuiBG_Backdrop();
		StationGuiBG_OrnamentTopLeft();
		StationGuiBG_OrnamentTopRight();
		
		cImGuiWindowData window = StationGui_CreateDefaultWindowData();
		ImGui_DoWindowStart("Status", window, ImGui_NrmPosGroup(cVector3f(0.1, 0.1, 3)), ImGui_NrmSizeGroup(cVector2f(0.8, 0.8)));
		
			DoStatusGaugesVertical(12, cVector3f(0.075, 0.075, 1), cVector2f(0.85, 0.3), 0.6, 0.3, 0.9);
			DoRandomNumbers(2, 8, cVector3f(0.075, 0.45, 1), cVector2f(0.05, 0.05), 1);
			DoStatusGaugesVertical(3, cVector3f(0.2, 0.45, 1), cVector2f(0.6, 0.375), 0.8, 0.75, 0.95, cColor(0.75, 0.2, 0.2), "Vertical_Big");
			DoRandomNumbers(2, 8, cVector3f(0.8, 0.45, 1), cVector2f(0.05, 0.05), 1);
							  
		ImGui_DoWindowEnd();
	}

	//-------------------------------------------------------

	/////////////////////////////////////////
	// Terminal *Servers down*
	/////////////////////////////////////////

	//-------------------------------------------------------
	
	bool mbTroubleshot = false;

	//-------------------------------------------------------
	
	void OnGuiServerDown(const tString&in asEntityName, float afTimeStep)
	{
		if (ImGui_InFocus())
			mbKnowsServerNeedsFixed=true;
			
		ImGui_SetTransCategory("02_05_theta_inside");
		
		//////////////////////////////
		// Widget data
		cImGuiWindowData window = StationGui_CreateDefaultWindowData();
		window.mColorBase = gStationGuiColor_Warning;
		
		cImGuiTextFrameData textData = ImGui_GetDefaultTextFrame();
		textData.mbUseBackgroundGfx = false;
		textData.mFont.mvSize = cVector2f(28);
		textData.mFont.mColor = gStationGuiColor_Warning;
		textData.mFontAlign = eFontAlign_Center;
		
		cImGuiButtonData button = StationGui_CreateDefaultButtonData();
		button.mFont.mvSize = ImGui_NrmSizeKeepRatio(0.045);
		button.mColorBase = gStationGuiColor_Warning;
		button.mbClipText = false;
		
		
		int lState = ImGui_GetStateInt("ServerErrorState", 0); //Using a state int allows each terminal to keep track of its own state.
		
		////////////////////////////////
		// Initial error
		if (lState==0)
		{
			cGuiDialogBoxSettings dialogBox = StationGui_CreateDefaultDialogBox();
			dialogBox.mWindow.mColorBase = gStationGuiColor_Warning;
			dialogBox.mTextFrame.mColorText = gStationGuiColor_Warning;
			dialogBox.mbEndWindow = false;
			
			Depth_ImGui_DialogBox("Error", "ConnectionError", dialogBox);
			cVector2f vButtonSize = ImGui_NrmSizeGroup(cVector2f(0.5, 0.3));
			float fMaxWidth = vButtonSize.x*0.85;
			float fTextWidth = GetFontLengthW(button.mFont, 1, "Troubleshoot");
			if (fTextWidth > fMaxWidth) vButtonSize.x += (fTextWidth - fMaxWidth);
			if (ImGui_DoButtonExt("TroubleshootButton", "Troubleshoot", button, 
								  ImGui_NrmPosGroup(cVector3f(0.5, 0.65, 2))-cVector3f_Right*vButtonSize.x*0.5f, vButtonSize))
			{
				ImGui_SetStateInt("ServerErrorState", 1);
				mbTroubleshot = true;
				Terminal_SetUpdateWhenOutOfView(asEntityName, true);
			}
			ImGui_DoWindowEnd();
		}
		
		else if (lState==1)
		{
			RouterTerminalLoadingSoundStart(asEntityName);
			if (DoLoadingWindow("Troubleshooting", "", "Troubleshooting", 3.f, true, 3))
			{
				ImGui_SetStateInt("ServerErrorState", 2);
				
				Depth_Audio_Terminal_Error(asEntityName);
				RouterTerminalLoadingSoundStop(asEntityName);
				
				if (mbPlayHintAfterTroubleshooting)
					Voice_PlayWhenPossible("3_InsertChipBeforeServerFix_NoTroubleshoot_2");
			}
		}
		
		else if (lState==2)
		{
			cGuiDialogBoxSettings dialogBox = StationGui_CreateDefaultDialogBox();
			dialogBox.mWindow.mColorBase = gStationGuiColor_Warning;
			dialogBox.mTextFrame.mColorText = gStationGuiColor_Warning;
			dialogBox.mButton.mColorBase = gStationGuiColor_Warning;
			dialogBox.mvSize = ImGui_NrmSize(0.6, 0.55);
			dialogBox.mType = eGuiDialogBoxType_OK;
			
			eGuiDialogCode code = Depth_ImGui_DialogBox("", "ServerProblem", dialogBox);
			if (code == eGuiDialogCode_OK)
			{
				ImGui_SetStateInt("ServerErrorState", 0);
				Terminal_SetUpdateWhenOutOfView(asEntityName, false);
			}
		}
	}

	//-------------------------------------------------------

	/////////////////////////////////////////
	// Terminal *Brandon and cath's computers*
	/////////////////////////////////////////

	//-------------------------------------------------------
	
	void OnGuiBrandonsComputer(const tString&in asEntityName, float afTimeStep)
	{
		StationGuiBG_Scanlines();
		StationGuiBG_Backdrop();
		StationGuiBG_Taskbar("theta");
			
		//////////////////////////////////////////
		// Check if server still down
		if (!mbFixedServer)
		{
			OnGuiServerDown(asEntityName, afTimeStep);
			return;
		}
		
		int lEntry=StationGui_TextReaderMulti("02_05_theta_inside", "Files", "BrandonEntry", "BrandonEntryFileName", 4);
		if (lEntry==1)
		{
			if (ImGui_GetStateBool("ReadBrandonEntry",false)==false)
			{
				ImGui_SetStateBool("ReadBrandonEntry",true);
				
				Map_AddTimer("TimerBrandonComputerClue", 1.0f, "TimerBrandonComputerClue");
			}
		}
	}
	
	//-------------------------------------------------------
	
	void TimerBrandonComputerClue(const tString& in asName)
	{
		if (mbAllCluesFound)
			Voice_PlayWhenPossible("3_FoundRedundantLastClue");
		else if (!mbKnowsAliceWasAtScan)
		{
			if (mlCluesFound==0)
				Voice_PlayWhenPossible("3_ReadBrandonComputerFirst", "",60.0f,1.0f, "VoiceCheckForAllClues", 5+mlCluesFound);
			else
				Voice_PlayWhenPossible("3_ReadBrandonComputer", "",60.0f,1.0f, "VoiceCheckForAllClues", 5+mlCluesFound);			
			mlCluesFound++;
		}
		else
		{
			Voice_PlayWhenPossible("3_ReadBrandonComputerKnowingAliceAtScan", "",60.0f,1.0f, "", 5+mlCluesFound);
		}
		mbKnowsAliceWasAtScan = true;
	}

	//-------------------------------------------------------
	
	void OnGuiCatherinesComputer(const tString&in asEntityName, float afTimeStep)
	{
		StationGuiBG_Scanlines();
		StationGuiBG_Backdrop();
		StationGuiBG_Taskbar("theta");
			
		//////////////////////////////////////////
		// Check if server still down
		if (!mbFixedServer)
		{
			OnGuiServerDown(asEntityName, afTimeStep);
			return;
		}
		
		StationGui_TextReaderMulti("02_05_theta_inside", "Files", "CathTerminalFile", "CathTerminalEntry", 2);
	}

	//-------------------------------------------------------

	/////////////////////////////////////////
	// Terminal *Brain Scan Simulation*
	/////////////////////////////////////////

	//-------------------------------------------------------
	
	bool mbUploadDisabled = false;
	bool mbSimulationDisabled = false;
	eSimulationTerminalState mSimulationTerminalState = eSimulationTerminalState_NoScanChip;
	eBrainScanEnvironment mSelectedEnvironment = eBrainScanEnvironment_LastEnum;
	int mlGuiSimColumn=0;
	array<bool> mvAttemptedUploads;

	//-------------------------------------------------------
	
	void SetupBrainScanTerminal()
	{
		for (int i=0;i<=3;++i)
		{
			cScript_SetGlobalVarBool("PlayerErasedLegacyData_"+i, false);
		}
		
		for (int i = 0; i < eBrainScanPerson_LastEnum; i++)
			mvAttemptedUploads.push_back(false);
	}

	//-------------------------------------------------------
	bool EnvChipPickUpSound = false;
	
	void PickUpEnvChip(const tString &in asEntity)
	{
		if(EnvChipPickUpSound==false)
		{
			Sound_CreateAtEntity("PickUpEnvChip", "02_05_theta/sfx/chip_pickups/env_chip_pickup", "Player");
			EnvChipPickUpSound = true;
		}
	}
	
	bool ScanChipPickUpSound = false;
	
	void PickUpScanChip(const tString &in asEntity)
	{
		if(ScanChipPickUpSound==false)
		{
			Sound_CreateAtEntity("PickUpScanChip", "02_05_theta/sfx/chip_pickups/datachip_pickup", "Player");
			ScanChipPickUpSound = true;
		}
	}
		
	//-------------------------------------------------------
	
	void OnGuiSimulationComputer(const tString&in asEntityName, float afTimeStep)
	{
		ImGui_SetTransCategory("02_05_theta_inside");
		ImGui_SetDefaultButton(StationGui_CreateDefaultButtonData());
		
		StationGuiBG_Scanlines();
		StationGuiBG_Backdrop();
		
		//////////////////////////////////////////
		// Check if server still down
		if (!mbFixedServer)
		{
			OnGuiServerDown(asEntityName, afTimeStep);
			return;
		}
		
		//////////////////////////////////////////
		// Check for the environment chip
		CheckForAndLoadChip("EnvironmentChip", "LoadingEnvironmentData");
		if (ChipIsLoading("EnvironmentChip")) return;
		
		///////////////
		// States
		switch (mSimulationTerminalState)
		{
			case eSimulationTerminalState_NoScanChip:
				OnGuiSimulationComputer_Idle(asEntityName, afTimeStep);
				break;
			case eSimulationTerminalState_ScanSelection:
				OnGuiSimulationComputer_SelectScan(asEntityName, afTimeStep);
				break;
			case eSimulationTerminalState_ScanUpload:
				OnGuiSimulationComputer_UploadScan(asEntityName, afTimeStep);
				break;
			case eSimulationTerminalState_SimulationSetup:
				OnGuiSimulationComputer_SimulationSetup(asEntityName, afTimeStep);
				break;
			case eSimulationTerminalState_SimulationRunning:
				OnGuiSimulationComputer_SimulationRunning(asEntityName, afTimeStep);
				break;
			case eSimulationTerminalState_DeleteMenu:
				OnGuiSimulationComputer_DeleteMenu(asEntityName, afTimeStep);
				break;
			case eSimulationTerminalState_Shutdown:
				OnGuiSimulationComputer_Shutdown(asEntityName, afTimeStep);
				break;
		}
	}
	
	//-------------------------------------------------------
	
	void OnGuiSimulationComputer_Idle(const tString&in asEntityName, float afTimeStep)
	{
		mlGuiSimColumn=0;
		
		///////////////////////////////////////
		// Wait for chip to be inserted
		if (CheckForAndLoadChip("BrainScanChip", "LoadingScanData"))
		{	
			Voice_Play("3_ScanUploadExplanation");
			mSimulationTerminalState = mbKnowsAboutBrandon ? eSimulationTerminalState_SimulationSetup 
														   : eSimulationTerminalState_ScanSelection;
		}
		if (ChipIsLoading("BrainScanChip"))
			return;
			
		///////////////////////////////////////
		// Show "insert chip" message 
		cGuiDialogBoxSettings dialogBox = StationGui_CreateDefaultDialogBox();
		dialogBox.mvSize = ImGui_NrmSize(0.6, 0.25);
		Depth_ImGui_DialogBox("Error", "NoScanData", dialogBox);
	}

	//-------------------------------------------------------
	
	void OnGuiSimulationComputer_SelectScan(const tString&in asEntityName, float afTimeStep)
	{		
		//////////////////////////////////
		// Setup widget data
		cImGuiWindowData window = StationGui_CreateDefaultWindowData();
		
		cImGuiTextFrameData textData = StationGui_CreateDefaultTextFrameData();
		textData.mFont.mvSize = ImGui_NrmSizeKeepRatio(0.035);
		
		cImGuiButtonData toggleButtonData = StationGui_CreateToggleButtonData();
		toggleButtonData.mFont.mvSize = ImGui_NrmSizeKeepRatio(0.035);
		
		////////////////////////////////////////
		// Check if player removed scan chip
		if (!ChipIsLoaded("BrainScanChip"))
		{
			mSimulationTerminalState = eSimulationTerminalState_NoScanChip;
		}
		
		///////////////////////////////////
		// Scan selection sidebar
		float fSidebarWidth = 0.3;
		ImGui_DoWindowStart("Scans", window, ImGui_NrmPosGroup(cVector3f(0.025, 0.025, 3)), ImGui_NrmSizeGroup(cVector2f(fSidebarWidth, 0.95)));
			ImGui_SetModUseInput(!mbUploadDisabled);
			
			/////////////////////////
			// List of names
			for(int i = 0; i < eBrainScanPerson_LastEnum; i++)
				ImGui_AddItemString("ScanSubject_"+i+"_Name");
			int lSelectedScan = ImGui_DoMultiToggleExt("ScanButtons", 0, 1, cVector2f(0, 5), toggleButtonData, ImGui_NrmPosGroup(cVector3f(0.05, 0.025, 3)), 
													   ImGui_NrmSizeGroup(cVector2f(0.9, eBrainScanPerson_LastEnum*0.117)));
			if (ImGui_PrevUpdated())
				Depth_Audio_Terminal_FolderClick(ImGui_GetName());
			ImGui_SetStateInt("SelectedScan", lSelectedScan);
			
			ImGui_ResetModifiers();
		ImGui_DoWindowEnd();
		
		/////////////////
		// Scan info
		ImGui_DoWindowStart("Info", window, ImGui_NrmPosGroup(cVector3f(fSidebarWidth+0.05, 0.025, 3)), 
										    ImGui_NrmSizeGroup(cVector2f(0.925-fSidebarWidth, 0.95)));
			///////////////////////////////
			// Info
			ImGui_DoTextFrameExt("ScanSubject_"+lSelectedScan+"_Info", ImGui_NrmSizeGroup(cVector2f(0.1, 0.1)), 0, 0, textData, 
								 cVector3f_Zero, ImGui_NrmSizeGroup(cVector2f(1,1)));
			
			/////////////////////////
			// Upload button
			ImGui_SetModUseInput(!mbUploadDisabled);
			ImGui_SetModUISizeVertExpansion(8.75, 0);
			bool bUploadPressed = ImGui_DoButton("UploadTraits", "Upload", ImGui_NrmPosGroup(cVector3f(0.3, 0.85, 2)), ImGui_NrmSizeGroup(cVector2f(0.4, 0.1)));
			ImGui_ResetModifiers();
			
			/////////////////////////
			// Uploading
			if (bUploadPressed)
			{				
				mSimulationTerminalState = eSimulationTerminalState_ScanUpload;
				
				SetChipSlotInteractionDisabled(Entity_GetVarString("BrainScanChip", "Slot"),true);
			}
		ImGui_DoWindowEnd();
	}
	
	//-------------------------------------------------------
	bool mbChipDeleteSound = false;
	bool mbChipDeleted = false;
	
	void OnGuiSimulationComputer_DeleteMenu(const tString&in asEntityName, float afTimeStep)
	{		
		bool bDeleting = false;
		
		//////////////////////////////////
		// Setup widget data
		cImGuiWindowData window = StationGui_CreateDefaultWindowData();
		window.mColorBase = ImGui_FadeOscillateColor("ShutDownColor", gStationGuiColor_Warning, gStationGuiColor_Warning*0.8, 0.3);
		window.mfCaptionSizeMul = 1.2;
		
		cImGuiTextFrameData textData;
		textData.mbUseBackgroundGfx = false;
		textData.mFont.mvSize = cVector2f(28, 28);
		textData.mFontAlign = eFontAlign_Center;
		textData.mColorText = cColor(0.8, 1);
		
		if (ImGui_TimerExists("ChipDeleting"))
		{
			bDeleting = true;
			
			if(mbChipDeleteSound==false)
			{
				mbChipDeleteSound = true;
				Sound_CreateAtEntity("ChipDeleteData", "02_05_theta/sfx/events/brandon_scan/delete_data", "SimulationSlot_Right");
				Sound_CreateAtEntity("ChipDeleteBeep", "02_05_theta/sfx/events/brandon_scan/delete_start_beep", "BrainScanSimulationTerminal");
			}
			
			///////////////////////////////////////
			// Show message 
			ImGui_DoWindowStart("ScanRoomTerminal_DeleteCaption", window, ImGui_NrmPosGroup(cVector3f((1.f-0.6)*0.5, (1.f-0.2)*0.5, 3)), ImGui_NrmSizeGroup(cVector2f(0.6, 0.2)));
				
				ImGui_DoTextFrameExt("ScanRoomTerminal_DeleteBody", ImGui_NrmSizeGroup(cVector2f(0.05, 0)), 0, 0, textData, 
								  ImGui_NrmPosGroup(cVector3f(0.0, 0.25, 4)), ImGui_NrmSizeGroup(cVector2f(1, 1)));
			ImGui_DoWindowEnd();
		}
		
		if (ImGui_TimerOver("ChipDeleting"))
		{
			mbChipDeleted = true;
			Map_AddTimer("3_SimulationDone_ChipDestroyed", 0.25f, "TimerPlayVoice");
			Sound_CreateAtEntity("ChipDeleteBeep", "02_05_theta/sfx/events/brandon_scan/delete_start_end", "BrainScanSimulationTerminal");
			Sound_Stop("ChipDeleteBeep", 0.1f);
			Sound_Stop("ChipDeleteData", 0.1f);
		}
		
		if (!bDeleting)
		{
			
			////////////////////////////////////////
			// Check if player removed scan chip
			bool bScanChipPresent = (ChipIsLoaded("BrainScanChip"));
		
			//////////////////
			// Buttons
			ImGui_DoWindowStart("", StationGui_CreateDefaultWindowData(), ImGui_NrmPosGroup(0.25, 0.3, 2), ImGui_NrmSizeGroup(0.5, 0.4));
				ImGui_SetModUseInput((!mbChipDeleted)&&bScanChipPresent);
				if (ImGui_DoButton("DeleteChip", "ScanRoomTerminal_DeleteChip", ImGui_NrmPosGroup(0.1, 0.14, 2), ImGui_NrmSizeGroup(0.8, 0.255)))
				{
					ImGui_AddTimer("ChipDeleting",4);
					Depth_Audio_Terminal_Confirm(ImGui_GetName());
				}
				ImGui_ResetModifiers();
				if (ImGui_DoButton("ShutDown", "ScanRoomTerminal_ShutDown", ImGui_NrmPosGroup(0.1, 0.46, 2), ImGui_NrmSizeGroup(0.8, 0.255)))
				{
					mSimulationTerminalState = eSimulationTerminalState_Shutdown;
				}
			ImGui_DoWindowEnd();
		}
	}

	//-------------------------------------------------------
	
	void OnGuiSimulationComputer_UploadScan(const tString&in asEntityName, float afTimeStep)
	{
		mlGuiSimColumn=0;
		
		const float fUploadTime = 7.f;
		
		///////////////////////////////
		// Initiate upload
		if (ImGui_GetStateInt("UploadState", 0)==0)
		{
			ImGui_SetStateInt("UploadState", 1);
			Depth_Audio_Terminal_Forward(asEntityName);
			Terminal_SetUpdateWhenOutOfView(asEntityName, true);
		}
		
		///////////////////////////////
		// Upload gauge filling
		if (ImGui_GetStateInt("UploadState", 0)==1)
		{							
			if (DoLoadingWindow("UploadGauge", "", "Uploading", 7.f, true, 1.5f,
								"level_amb_shared_machines/tech/HDD/underload_loop", "BrainScanSimulationTerminal"))
			{
				ImGui_SetStateInt("UploadState", 2);
				Depth_Audio_Terminal_Confirm(ImGui_GetName());
				Terminal_SetUpdateWhenOutOfView(asEntityName, false);
				///////////////////////////////////
				// Player found the right person
				int lSelectedScan = ImGui_GetStateInt("SelectedScan", eBrainScanPerson_LastEnum);
				if (lSelectedScan == eBrainScanPerson_Brandon)
				{
					mbKnowsAboutBrandon = true;
					Voice_StopAll();
					Dialog_Begin();
						Dialog_AddBranch("3_CorrectScanTraitExport");
							Dialog_AddSubject("3_CorrectScanTraitExport_1");
							Dialog_AddPause(2, "");
							Dialog_AddSubject("3_CorrectScanTraitExport_2", "SubjectCorrectScanTraitUpload");
					Dialog_End();
				}
				
				///////////////////////////////////
				// Catherine getting annoyed
				else
				{
					Voice_StopAll();
					if (mvAttemptedUploads[lSelectedScan])
						Voice_Play("3_SameScanUpload", -1, "VoiceIncorrectScanTraitUpload");
					else
						Voice_Play("3_IncorrectScanUpload", -1, "VoiceIncorrectScanTraitUpload");
					
					// Log event
					tString sScanName = cString_To8Char(ImGui_Translate("ScanSubject_"+lSelectedScan+"_Name"));
				}
				mvAttemptedUploads[lSelectedScan] = true;
			}
		}
		
		if (ImGui_GetStateInt("UploadState", 0)==2)
		{
			DoDialogWindowStart("", "UploadComplete");
				ImGui_DoGauge(StationGui_CreateDefaultGaugeData(), 1, 
							  ImGui_NrmPosGroup(cVector3f(0.1, 0.5, 1)), ImGui_NrmSizeGroup(cVector2f(0.8, 0.3)));
			DoDialogWindowEnd();
		}
		
		//////////////////////////////////////
		// Change terminal state
		if (ImGui_GetStateInt("UploadState", 0)==3)
		{
			ImGui_SetStateInt("UploadState", 0);
			
			SetChipSlotInteractionDisabled(Entity_GetVarString("BrainScanChip", "Slot"),false);
			
			if (ImGui_GetStateInt("SelectedScan", eBrainScanPerson_LastEnum) == eBrainScanPerson_Brandon)
				mSimulationTerminalState = eSimulationTerminalState_SimulationSetup;
			else
				mSimulationTerminalState = eSimulationTerminalState_ScanSelection;
		}
	}

	//-------------------------------------------------------
	
	void OnGuiSimulationComputer_SimulationSetup(const tString&in asEntityName, float afTimeStep)
	{	
		// This is reversed because the GUI chooses the wrong focused object
		// to start with.
		if (ImGui_ActionTriggered(eImGuiAction_Right) || ImGui_ActionTriggered(eImGuiAction_Left) )
		{
			if (mlGuiSimColumn==1)
			{
				mlGuiSimColumn=0;
				ImGui_SetFocus("EnvironmentToggle$0");
			}
			else 
			{
				mlGuiSimColumn=1;
				ImGui_SetFocus("SimulationRun");		
			}	
		}
		
		//////////////////////////////////
		// Setup widget data
		cImGuiWindowData window = StationGui_CreateDefaultWindowData();
		cImGuiLabelData label = ImGui_GetDefaultLabel();
		label.mFont.mvSize = cVector2f(20,20);
		cImGuiButtonData runButton = StationGui_CreateDefaultButtonData();
		runButton.mFont.mvSize = cVector2f(30, 30);
		
		cImGuiButtonData toggleButtonData = StationGui_CreateToggleButtonData();
		toggleButtonData.mFont.mvSize = cVector2f(20, 20);
		
		////////////////////////////////////////
		// Check if player removed scan chip
		if (!ChipIsLoaded("BrainScanChip"))
		{
			mSimulationTerminalState = eSimulationTerminalState_NoScanChip;
		}
		
		ImGui_DoWindowStart("ExtraOptions", window, ImGui_NrmPosGroup(cVector3f(0.51, 0.03, 1)), ImGui_NrmSizeGroup(cVector2f(0.44, 0.94)));
			//////////////////////////////////
			// Environment selection
			ImGui_GroupBegin(ImGui_NrmPosGroup(cVector3f(0.075, 0.05, 1)), ImGui_NrmSizeGroup(cVector2f(0.85, 0.55)));
				ImGui_DoLabelExt("Environment", label, ImGui_NrmPosGroup(cVector3f(0.075, 0.0, 1)));
				ImGui_AddItemString("Environment_0");
				int lEnvCount = 1;
				if (ChipIsLoaded("EnvironmentChip"))
				{
					ImGui_AddItemString("Environment_1");
					ImGui_AddItemString("Environment_2");
					lEnvCount += 2;
					if (mbCopiedScanRoom) 
					{
						ImGui_AddItemString("Environment_3");
						lEnvCount++;
					}
				}
				cVector2f vMultiToggleSize = ImGui_NrmSizeGroup(cVector2f(0.9, 0.225*lEnvCount));
				int lSelectedEnvironment = ImGui_DoMultiToggleExt("EnvironmentToggle", 0, 1, cVector2f(0, 5), 
														   toggleButtonData, ImGui_NrmPosGroup(cVector3f(0.05, 0.1, 1)), vMultiToggleSize);
				mSelectedEnvironment = eBrainScanEnvironment(lSelectedEnvironment);
				if (ImGui_PrevUpdated())
					Depth_Audio_Terminal_FolderClick(ImGui_GetName());
				
				ImGui_SetModUseInput(false);
				for (int i = 0; i < 4-lEnvCount; i++)
				{
					ImGui_AddItemString("");
				}
				ImGui_DoMultiToggle("DummyToggle", -1, 1, cVector2f(0, 5), 
									ImGui_NrmPosGroup(cVector3f(0.05, 0.12+0.225*lEnvCount, 1)), ImGui_NrmSizeGroup(cVector2f(0.9, 0.225*(4-lEnvCount))));
				ImGui_SetModUseInput(true);
					
			ImGui_GroupEnd();
			
			//////////////////////////////////
			// Module selection
			ImGui_GroupBegin(ImGui_NrmPosGroup(cVector3f(0.075, 0.65, 1)), ImGui_NrmSizeGroup(cVector2f(0.85, 0.35)));
				vMultiToggleSize = ImGui_NrmSizeGroup(cVector2f(0.9, 0.35));

				ImGui_DoLabelExt("Module", label, ImGui_NrmPosGroup(cVector3f(0.075, 0.0, 1)));
				ImGui_AddItemString("None");
				if (mlCluesFound == 2) //Alice module has been uploaded by Cath
				{
					ImGui_AddItemString("Alice");
					vMultiToggleSize.y *= 2;
				}
				int lSelectedModule = ImGui_DoMultiToggleExt("ModulesToggle", 0, 1, cVector2f(0, 5), 
														  toggleButtonData, ImGui_NrmPosGroup(cVector3f(0.05, 0.15, 1)), vMultiToggleSize);
				bool bAliceSelected = lSelectedModule == 1;
				if (ImGui_PrevUpdated())
					Depth_Audio_Terminal_FolderClick(ImGui_GetName());
				
				if (mlCluesFound < 2)
				{
					ImGui_SetModUseInput(false);
					ImGui_DoButton("DummyModule", "", ImGui_NrmPosGroup(cVector3f(0.05, 0.53, 1)), ImGui_NrmSizeGroup(cVector2f(0.9, 0.35)));
					ImGui_SetModUseInput(true);
				}
			ImGui_GroupEnd();
		ImGui_DoWindowEnd();
		
		ImGui_DoWindowStart("SimulationInfo", window, ImGui_NrmPosGroup(cVector3f(0.05, 0.03, 1)), ImGui_NrmSizeGroup(cVector2f(0.44, 0.7)));
			///////////////////////
			// Mugshot
			ImGui_DoImage(cImGuiGfx("brandon_mugshot"), ImGui_NrmPosGroup(cVector3f(0.3, 0.05, 1)), ImGui_NrmSizeGroup(cVector2f(0.4, 0.5)));
		
			///////////////////////
			// Data labels
			label.mFontAlign = eFontAlign_Center;
			cVector3f vBegin = ImGui_NrmPosGroup(0, 0.575, 1);
			cVector3f vOffset = ImGui_NrmPosGroup(0.0, 0.12, 1);
			cVector2f vLabelSize = ImGui_NrmSizeGroup(1, -1);
			ImGui_DoLabelExt("ScanSubjectLabel", label, vBegin, vLabelSize);
			ImGui_DoLabelExt("EnvironmentLabel", label, vBegin+vOffset*1.25, vLabelSize);
			ImGui_DoLabelExt("ExtraModuleLabel", label, vBegin+vOffset*2.25, vLabelSize);
			
			///////////////////////
			// Data
			vBegin = vBegin + ImGui_NrmPosGroup(0, 0.05, 0);
			ImGui_DoLabelExt("ScanSubject_"+eBrainScanPerson_Brandon+"_Name", label, vBegin, vLabelSize);
			ImGui_DoLabelExt("Environment_" + mSelectedEnvironment, label, vBegin+vOffset*1.25, vLabelSize);
			ImGui_DoLabelExt(bAliceSelected ? "Alice" : "None", label, vBegin+vOffset*2.25, vLabelSize);
		ImGui_DoWindowEnd();
		
		ImGui_SetModUseInput(!mbSimulationDisabled);
		if (ImGui_DoButtonExt("SimulationRun", "RunSimulation", runButton, ImGui_NrmPosGroup(cVector3f(0.15, 0.8, 1)), ImGui_NrmSizeGroup(cVector2f(0.2, 0.13)))
			&& !mbSimulationDisabled)
		{	
			Depth_Audio_Terminal_Confirm(ImGui_GetName());
			/////////////////////////////////////////////////////////////////////////////////
			// Start sequence depending on selected environment and if alice is present
			switch (mSelectedEnvironment)
			{
				case eBrainScanEnvironment_None:
					if (!bAliceSelected) SequenceBrandonAloneInVoid("");
					else				 SequenceBrandonAndAliceInVoid("");
					break;
				case eBrainScanEnvironment_ScanRoom:
					if (!bAliceSelected) SequenceBrandonAloneInScanRoom("");
					else				 SequenceBrandonAndAliceInScanRoom("");
					break;
				case eBrainScanEnvironment_Cabin:
					if (!bAliceSelected) SequenceBrandonAloneInCabin("");
					else				 SequenceBrandonAndAliceInCabin("");
					break;
				case eBrainScanEnvironment_Beach:
					if (!bAliceSelected) SequenceBrandonAloneOnBeach("");
					else				 SequenceBrandonAndAliceOnBeach("");
					break;
			}
			
			ImGui_SetStateInt("SimulationInitialized", 0);
			mSimulationTerminalState = eSimulationTerminalState_SimulationRunning;
			SetChipSlotInteractionDisabled(Entity_GetVarString("BrainScanChip", "Slot"),true);
		}
		ImGui_SetModUseInput(false);
	}

	//-------------------------------------------------------
	
	void VoiceIncorrectScanTraitUpload(const tString&in asScene, const tString&in asSubject)
	{
		Terminal_SetImGuiStateInt("BrainScanSimulationTerminal", "UploadState", 3);
	}

	//-------------------------------------------------------
	
	void SubjectCorrectScanTraitUpload(const tString &in asSubject, bool abStartOfSubject)
	{
		if (abStartOfSubject)
			Terminal_SetImGuiStateInt("BrainScanSimulationTerminal", "UploadState", 3);
		else
			LastOnSoma_SetText("02_05_theta_inside_3");
	}

	//-------------------------------------------------------

	void FadeSimStressLevel(float fGoal)
	{
		Terminal_FadeImGuiStateFloat("BrainScanSimulationTerminal","SimStressLevel",fGoal,1.0f);
	}
	
	//-------------------------------------------------------
	
	void SetSimStressLevel(float fStress)
	{
		Terminal_SetImGuiStateFloat("BrainScanSimulationTerminal","SimStressLevel", fStress);
	}
	
	//-------------------------------------------------------
	
	float GetSimStressLevel()
	{
		return Terminal_GetImGuiStateFloat("BrainScanSimulationTerminal", "SimStressLevel",0.0f);
	}
	
	//-------------------------------------------------------
	
	void OnGuiSimulationComputer_SimulationRunning(const tString&in asEntityName, float afTimeStep)
	{		
		mlGuiSimColumn = 0;
		
		StationGuiBG_Scanlines();
		
		if (ImGui_GetStateInt("SimulationInitialized", 0)==0)
		{
			ImGui_SetStateInt("SimulationInitialized", 1);

			ImGui_SetStateFloat("ForegroundAlpha", 1);
			SetSimStressLevel(0.3f);
		}
		
		ImGui_SetModColorMul(cColor(0, ImGui_GetStateFloat("ForegroundAlpha", 1)));
		ImGui_DoImage(cImGuiGfx(""), cVector3f(0, 0, 9), ImGui_NrmSize(cVector2f(1, 1)));
		ImGui_ResetModifiers();
		
		if (ImGui_GetStateFloat("ShowSimFail",0.0f)>0.0f)
		{
			cImGuiTextFrameData textData = StationGui_CreateDefaultTextFrameData();
			textData.mbUseBackgroundGfx = false;
			textData.mFont.mvSize = cVector2f(40, 40);
			textData.mFontAlign = eFontAlign_Center;
			textData.mColorText = gStationGuiColor_Warning;
			
			ImGui_DoTextFrameExt("StressShutdown", ImGui_NrmSizeGroup(0.05, 0), 0, 0, textData, 
									ImGui_NrmPosGroup(0.1, 0.25, 15), ImGui_NrmSizeGroup(0.8, 1));
		}
		
		/////////////////////////////////////
		// Update camera
		iLuxEntity@ pCameraEntity = Map_GetEntity("SimCameraArea_"+msSimScene);
		if (pCameraEntity !is null)
		{
			float fCameraX=ImGui_FadeOscillateFloat("CameraX",-0.025f,0.025f,3.0f);
			float fCameraY=ImGui_FadeOscillateFloat("CameraY",-0.025f,0.025f,5.0f);
			cVector3f vCameraPos=ImGui_GetStateVector3f("CameraPos", cVector3f_Zero);
			cVector3f vNewCamPos = vCameraPos +
									cLux_GetPlayer().GetCamera().GetRight() * fCameraX +
									cLux_GetPlayer().GetCamera().GetUp() * fCameraY;
			pCameraEntity.SetPosition(vNewCamPos);
		}
		
		/////////////////////////////////////
		// Draw Camera View
		cImGuiGfx sceneTexture("SimCamera", eImGuiGfx_Special);
		ImGui_DrawGfx(sceneTexture, cVector3f(0,0,1.0f), ImGui_GetSize(), cColor(1, 1));
		
		ImGui_DoWindowStart("", StationGui_CreateDefaultWindowData(), ImGui_NrmPosGroup(cVector3f(0.725, 0.025, 5)), ImGui_NrmSizeGroup(cVector2f(0.25, 0.225)));
			if (ImGui_DoButton("AbortSimulation", "Abort", ImGui_NrmPosGroup(cVector3f(0.125, 0.1, 1)), ImGui_NrmSizeGroup(cVector2f(0.75, 0.6))))
			{
				Depth_Audio_Terminal_Negative(ImGui_GetName());
				SequenceAbortSimulation("");
			}
		ImGui_DoWindowEnd();
		
		///////////////////////////////////////
		// Stress Bar
		
		ImGui_DoLabel("SimStress",ImGui_NrmPos(0.02,0.0275,10.0f), cVector2f_MinusOne, 1.1f);
		
		DrawStressMeter(afTimeStep, 0.1, 0.0275, 0.4f, 0.03f, GetSimStressLevel());
	}


	float mfStressMeterTime=0.0f;
	float mfStressMeterVal=0.0f;

	void DrawStressMeter(float afTimeStep, float afX, float afY, float afWidth, float afHeight, float fValue)
	{
		mfStressMeterTime += afTimeStep;
		mfStressMeterVal += afTimeStep*fValue*2.0f;

		float fMaxTime = 2.0f;
		float fHalfHeight = afHeight/2.0f;
			
		cImGuiGfx gfxPlayer = cImGuiGfx("simple_white", eImGuiGfx_Texture);	
		
		cColor frameCol = cColor(1.0f,1.0f,1.0f,.5f);
		ImGui_DrawLine(ImGui_NrmSize(cVector2f(afX,afY)),ImGui_NrmSize(cVector2f(afX+afWidth,afY)),99.0f,1.0f,frameCol);
		ImGui_DrawLine(ImGui_NrmSize(cVector2f(afX,afY+afHeight)),ImGui_NrmSize(cVector2f(afX+afWidth,afY+afHeight)),99.0f,1.0f,frameCol);
			
		for (int i=0; i<=10; i++)
		{
			ImGui_DrawLine(ImGui_NrmSize(cVector2f(afX+(afWidth*(i*0.1f)),afY)),ImGui_NrmSize(cVector2f(afX+(afWidth*(i*0.1f)),afY+afHeight)),99.0f,1.0f,frameCol);
		}
		
		float fPos = 0.5f;
		cVector3f vPos(0,0,10.0f);
		
		ImGui_SetAlignment(eImGuiAlign_CenterCenter);
		
		float fPeakFrequency = 5.0f;
		
		for(int i=-40;i<=40;++i)
		{
			float fCurrPos = fPos+i*0.0125f;
			if (fCurrPos<0.0f)
				fCurrPos+=1.0f;
			else if (fCurrPos>1.0f)
				fCurrPos-=1.0f;
				
			float fValAtPos = cMath_Sin((mfStressMeterVal+fCurrPos)*fPeakFrequency);
				
			vPos.x = afX + (fCurrPos *  afWidth);
			vPos.y = afY+afHeight;

			float fNearPos = cMath_Clamp((1.0f-cMath_Abs(fValAtPos))-0.8f,0,0.2f)*5.0f;
			vPos.y -= afHeight*fNearPos*(fValue*0.5f+0.5f);
			
			float fNearVal=1.0f-cMath_Abs(i)/40.0f;
			ImGui_SetModColorMul(cColor(1.0f,1.0f,1.0f,fNearVal));
			ImGui_DoImage(gfxPlayer,ImGui_NrmPos(vPos),ImGui_NrmSizeGroup(cVector2f(0.0075f)));
		}
		
		ImGui_ResetModifiers();
	}
	
	//-------------------------------------------------------
	
	void OnGuiSimulationComputer_Shutdown(const tString&in asEntityName, float afTimeStep)
	{
		mlGuiSimColumn = 0;
		
		//////////////////////////////////
		// Setup widget data
		cImGuiWindowData window = StationGui_CreateDefaultWindowData();
		window.mColorBase = ImGui_FadeOscillateColor("ShutDownColor", gStationGuiColor_Warning, gStationGuiColor_Warning*0.8, 0.3);
		window.mfCaptionSizeMul = 1.2;
		
		cImGuiTextFrameData textData;
		textData.mbUseBackgroundGfx = false;
		textData.mFont.mvSize = cVector2f(28, 28);
		textData.mFontAlign = eFontAlign_Center;
		textData.mColorText = cColor(0.8, 1);
		
		///////////////////////////////////////
		// Show message 
		ImGui_DoWindowStart("ShutdownCaption", window, ImGui_NrmPosGroup(cVector3f((1.f-0.6)*0.5, (1.f-0.2)*0.5, 1.5)), ImGui_NrmSizeGroup(cVector2f(0.6, 0.2)));
			
			ImGui_DoTextFrameExt("ShutdownBody", ImGui_NrmSizeGroup(cVector2f(0.05, 0)), 0, 0, textData, 
							  ImGui_NrmPosGroup(cVector3f(0.0, 0.25, 1)), ImGui_NrmSizeGroup(cVector2f(1, 1)));
		ImGui_DoWindowEnd();
		
		if (!ImGui_TimerExists("ShutDownTimer"))
		{
			ImGui_AddTimer("ShutDownTimer", 4);
		}
		if (ImGui_TimerOver("ShutDownTimer"))
		{
			////////////////////////////
			// Turn off screen
			Terminal_SetGuiActive(asEntityName, false, 0.4);
			Entity_SetEffectsActive(asEntityName, false, true);
			Light_FadeTo("BrainScanSimulationTerminal_Spot", cColor(0), -1, 0.4);
		}
	}

	//-------------------------------------------------------
	
	void OnLeaveSimulationRunning(const tString&in asEntityName)
	{
		if (mSimulationTerminalState != eSimulationTerminalState_SimulationRunning)
			return;
			
		SequenceAbortSimulation("");
	}

	//-------------------------------------------------------
	
	void SetChipSlotInteractionDisabled(const tString& in asChipSlot, bool abX)
	{
		Entity_SetInteractionDisabled(asChipSlot, abX);
		Entity_SetInteractionDisabled(asChipSlot+"_Interact", abX);
	}

	//-------------------------------------------------------

	/////////////////////////////////////////
	// Terminal *Wau server*
	/////////////////////////////////////////

	//-------------------------------------------------------
	
	void OnGuiWauServer(const tString&in asEntityName, float afTimeStep)
	{
		ImGui_SetTransCategory("02_05_theta_inside");
		
		//////////////////////////////
		// Widget data
		cImGuiWindowData window = StationGui_CreateDefaultWindowData();
		window.mColorBase = gStationGuiColor_Warning;
		cImGuiTextFrameData textData = ImGui_GetDefaultTextFrame();
		textData.mbUseBackgroundGfx = false;
		textData.mFont.mvSize = cVector2f(18);
		textData.mFont.mColor = gStationGuiColor_Warning;
		
		StationGuiBG_Scanlines();
		StationGuiBG_Backdrop();
		
		ImGui_DoWindowStart("", window, ImGui_NrmPosGroup(cVector3f(0.1, 0.2, 1)), ImGui_NrmSizeGroup(cVector2f(0.8, 0.6)));
			ImGui_DoTextFrameExt("DatamineServerMaintenance", ImGui_NrmSizeGroup(cVector2f(0.05, 0.05)), 5, 0, textData, 
								 ImGui_NrmPosGroup(cVector3f(0, 0, 0)), ImGui_NrmSizeGroup(cVector2f(1,1)));
		ImGui_DoWindowEnd();
	}
	
	//-------------------------------------------------------

	/////////////////////////////////////////
	// Terminal *Legacy Scan Terminal*
	/////////////////////////////////////////
		
	//-------------------------------------------------------

	bool mbSimonRecordingActive = false;
	
	//-------------------------------------------------------

	void SetupLegacyTerminal()
	{
		//Voices are set in voicehandler
		Voice_SetSource("David", "LegacyTerminal", 2, 16, true, -1);
		Voice_SetSource("SimonRecording", "LegacyTerminal", 2, 16, true, -1);
	}
	
	//-------------------------------------------------------
	
	bool mbSeenMunshiScan = false;
	bool mbSeenSimonScan = false;
	bool mbDisplayRecordings = false;
	
	void OnGuiLegacyTerminal(const tString&in asEntityName, float afTimeStep)
	{
		ImGui_SetTransCategory("02_05_theta_inside");
		
		cImGuiWindowData windowData = StationGui_CreateDefaultWindowData();
		
		/////////////////////////////
		// Default station stuff
		StationGuiBG_Scanlines();
		StationGuiBG_Backdrop();
		StationGuiBG_Taskbar("theta");
		
		////////////////////
		// Loading
		if (ImGui_GetStateInt("LoadingData",0)>0)
		{
			SOMATerminalLoadingSoundStart();
			
			if (DoLoadingWindow("ScanRoom_Legacy_Loading", "", "ScanRoom_Legacy_Loading", 3.f, true, 3))
			{
				Terminal_SetUpdateWhenOutOfView(ImGui_GetName(), false);
				ImGui_SetStateInt("LoadingData", 0);
				Depth_Audio_Terminal_Forward("SomaTerminalSoundSource");
				SOMATerminalLoadingSoundStop();
			}
			return;
		}
		
		////////////////////
		// Deleting
		else if (ImGui_GetStateInt("ErasingData",0)>0)
		{
			SOMATerminalLoadingSoundStart();
			Voice_Stop("Recording");
			
			if (DoLoadingWindow("ScanRoom_Legacy_Deleting", "", "ScanRoom_Legacy_Deleting", 3.f, true, 3))
			{
				Terminal_SetUpdateWhenOutOfView(ImGui_GetName(), false);
				ImGui_SetStateInt("ErasingData", 0);
				Depth_Audio_Terminal_Confirm("SomaTerminalSoundSource");
				SOMATerminalLoadingSoundStop();
				Map_AddTimer("SimonRealisationMusicCooldown", 25.0f, "SimonRealisationMusicCooldown");
			}
			return;
		}
		
		if (mbDisplayRecordings)
		{
			OnGuiSimonRecordings(windowData);
			if (StationGui_BackButton(true))
			{
				mbDisplayRecordings = false;
				Voice_Stop("Recording");
			}
			return;
		}

		cStationGui_TextReaderSettings textReader;
		textReader.msCustomHeader = "ScanRoom_Legacy_Folder";
		textReader.mfFileListButtonHeight = 0.125f;
		for (int i = 1; i <= 4; i++)
		{
			bool bDeleted = cScript_GetGlobalVarBool("PlayerErasedLegacyData_"+(i-1));
			Depth_ImGui_AddTextFile("ScanRoom_Legacy_File_Name_"+i, bDeleted ? "ScanRoom_Legacy_Deleted" : "ScanRoom_Legacy_File_Info_"+i);
		}
		int lEntry = StationGui_TextReaderMulti(textReader);
		
		int lPrevEntry = ImGui_GetStateInt("Entry",0);

		if (lEntry != lPrevEntry)
		{
			ImGui_SetStateInt("Entry",lEntry);
			ImGui_SetStateInt("LoadingData", 1);
			Terminal_SetUpdateWhenOutOfView(ImGui_GetName(), true);

			// Get rid of brief frame glitch
			cImGuiTextFrameData frm;
			frm.mbUseBackgroundGfx = true;
			ImGui_SetModColorMul(cColor(0));
			ImGui_DoTextFrameExt("",cVector2f_Zero,0,0,frm,ImGui_NrmPosGroup(0.38,0.05,5.0f), ImGui_NrmSizeGroup(0.6f,0.8f));
			ImGui_ResetModifiers();
			
			Voice_Stop("Recording");
			ImGui_SetStateInt("PlayingFile",-1);
					
			return;
		}
		
		///////////////////
		// Handle focus
		int lFocusColumn = ImGui_GetStateInt("Column",0);
		if (lFocusColumn==0)
		{
			if (ImGui_ActionTriggered(eImGuiAction_Right)||ImGui_ActionTriggered(eImGuiAction_Left))
			{
				if (lEntry==3)
					ImGui_SetFocus("RecordingButton_1");
				else
					ImGui_SetFocus("DeleteButton");
				lFocusColumn=1;
			}
		}
		else
		{
			if (ImGui_ActionTriggered(eImGuiAction_Right)||ImGui_ActionTriggered(eImGuiAction_Left))
			{
				ImGui_SetFocus("ScanRoom_Legacy_File_Info_1_FileList$"+(lEntry));
				lFocusColumn=0;
			}
		}
		ImGui_SetStateInt("Column",lFocusColumn);
		
		if (lEntry==-1) return;

		//////////////////
		// Comments
		if (lEntry==2)
		{
			if (!mbSeenSimonScan&&!mbSeenMunshiScan)
			{
				Map_AddTimer("Legacy_MunshiBeforeSimon", 1.5f, "TimerPlayCommentRightNow");
			}
			mbSeenMunshiScan = true;
		}
		if (lEntry==3)
		{
			if (!mbSeenSimonScan)
			{
				Map_AddTimer("Legacy_SeenSimon", 1.5f, "TimerPlayCommentRightNow");
			}
			mbSeenSimonScan = true;
		}
		
		cImGuiButtonData button = StationGui_CreateDefaultButtonData();
		button.mFont.mvSize=cVector2f(24,24);
		
		//////////////////////////
		// Recording buttons
		bool bDeleted = cScript_GetGlobalVarBool("PlayerErasedLegacyData_"+lEntry);
		if (lEntry==3&&!bDeleted)
		{
			//audioButton
			ImGui_SetModUISizeHoriExpansion(2.0f,0.0f);
			if (ImGui_DoButtonExt("AudioButton", "AudioRecordings", button, ImGui_NrmPosGroup(cVector3f(0.6125, 0.6, 6.0f)), ImGui_NrmSizeGroup(cVector2f(0.35, 0.085))))
			{
				Depth_Audio_Terminal_Forward(ImGui_GetName());
				mbDisplayRecordings = true;
			}
			//OnGuiSimonRecordings(windowData);
		}
		
		//////////////////////////
		// Regular screen
		if (!bDeleted)
		{
			ImGui_SetModUISizeHoriExpansion(2.0f,0.0f);
			if (ImGui_DoButtonExt("DeleteButton", "ScanRoom_Legacy_DeleteButton", button, ImGui_NrmPosGroup(cVector3f(0.6125, 0.695, 6.0f)), ImGui_NrmSizeGroup(cVector2f(0.35, 0.085))))
			{
				Terminal_SetUpdateWhenOutOfView(ImGui_GetName(), true);
				cScript_SetGlobalVarBool("PlayerErasedLegacyData_"+lEntry, true);
				ImGui_SetStateInt("ErasingData", 1);
				if (lEntry==3)
					Voice_Stop("Recording");
			}
		}
		
		StationGui_BackButton(false);
	}
	
	//-------------------------------------------------------
	
	void OnGuiSimonRecordings(const cImGuiWindowData &in aWindowData)
	{		
		ImGui_SetTransCategory("02_05_theta_inside");
			
		cImGuiButtonData button = StationGui_CreateDefaultButtonData();
		button.mFont.mvSize=cVector2f(22,22);
		
		///////////////////////
		// Playback window
		ImGui_DoWindowStart("AudioRecordings", aWindowData, ImGui_NrmPosGroup(cVector3f(0.3, 0.25, 4.0f)), ImGui_NrmSizeGroup(cVector2f(0.4, 0.47)));
		
			int lNewFile = -1;
			int lPlayingFile = ImGui_GetStateInt("PlayingFile",-1);
		
			ImGui_SetModUISizeHoriExpansion(2.0f,0.0f);
		
			button.mColorBase = (lPlayingFile==1)?gStationGuiColor_FocusedAndSelected:gStationGuiColor_Normal;
			if (ImGui_DoButtonExt("RecordingButton_1", "SimonRecording_1", button, ImGui_NrmPosGroup(cVector3f(0.05, 0.05, 6.0f)), ImGui_NrmSizeGroup(cVector2f(0.875, 0.2))))
			{
				lNewFile = 1;
			}
			
			ImGui_SetModUISizeHoriExpansion(2.0f,0.0f);
			
			button.mColorBase = (lPlayingFile==2)?gStationGuiColor_FocusedAndSelected:gStationGuiColor_Normal;
			if (ImGui_DoButtonExt("RecordingButton_2", "SimonRecording_2", button, ImGui_NrmPosGroup(cVector3f(0.05, 0.27, 6.0f)), ImGui_NrmSizeGroup(cVector2f(0.875, 0.2))))
			{
				lNewFile = 2;
			}
			
			ImGui_SetModUISizeHoriExpansion(2.0f,0.0f);
			
			button.mColorBase = (lPlayingFile==3)?gStationGuiColor_FocusedAndSelected:gStationGuiColor_Normal;
			if (ImGui_DoButtonExt("RecordingButton_3", "SimonRecording_3", button, ImGui_NrmPosGroup(cVector3f(0.05, 0.49, 6.0f)), ImGui_NrmSizeGroup(cVector2f(0.875, 0.2))))
			{
				lNewFile = 3;
			}
			
			///////////////////////////
			// Selection was changed
			if (lNewFile!=-1)
			{	
				Voice_Stop("Recording");
				if (lNewFile==lPlayingFile)
				{
					ImGui_SetStateInt("PlayingFile",-1);
				}
				else
				{
					ImGui_SetStateInt("PlayingFile",lNewFile);
					mbSimonRecordingActive = true;
					Voice_Play("5_SimonRecording_" + lNewFile, -1, "OnSimonRecordingComplete");
					if (!mbKnowsSimonHistory)
						mbTriggerSimonAddendum = true;
					mbKnowsSimonHistory = true;
				}
			}
			
			ImGui_ResetModifiers();
			
			//////////////////////
			// Frequency bars
			cImGuiGaugeData gaugeData = StationGui_CreateDefaultGaugeData();
			gaugeData.mOrientation = eImGuiGaugeOrientation_Vert;
			gaugeData.mGfxFrame.mGfxCornerTopLeft.mColor = cColor(0.0f, 0.0f);
			gaugeData.mGfxFrame.mGfxCornerTopRight.mColor = cColor(0.0f, 0.0f);
			
			array<float> vSpectrum;
			cLux_GetVoiceHandler().GetSpectrumFromScene("Recording", vSpectrum);

			for (int lBar = 0; lBar < 10; lBar++)
			{
				float fSignal = 0;
				if (vSpectrum.size()>0)
					fSignal = vSpectrum[lBar]*3.0f;
				ImGui_DoGauge(gaugeData, fSignal, ImGui_NrmPosGroup(cVector3f((lBar*0.1f)*0.75f+0.05f, 0.71, 8)), ImGui_NrmSizeGroup(cVector2f(0.075f, 0.23)));
			}

		ImGui_DoWindowEnd();
	}

	//-------------------------------------------------------
	
	void OnSimonRecordingComplete(const tString&in asScene, const tString&in asSubject)
	{
		mbSimonRecordingActive = false;
		Terminal_SetImGuiStateInt("LegacyTerminal","PlayingFile",-1);
	}

	//-------------------------------------------------------
	bool mbPlayedWhatsLegacyScan = false;
	bool mbExitedLegacyTerminal = false;
	bool mbPlayedDeletionMessage = false;
	
	void OnExitLegacyTerminal(const tString&in asEntityName)
	{
		cLux_AddDebugMessage("Exit terminal");
		
		// Not deleted Simon?
		if (!cScript_GetGlobalVarBool("PlayerErasedLegacyData_3"))
		{
			if (mbSeenSimonScan)
			{
				if (!mbPlayedWhatsLegacyScan)
				{
					Map_AddTimer("Legacy_WhatsLegacyScan", 1.0f, "TimerPlayCommentRightNow");
					mbPlayedWhatsLegacyScan = true;
				}
			}
		}
		else
		{
			if (!mbExitedLegacyTerminal)
			{
				if (!mbPlayedDeletionMessage)
				{
					Map_AddTimer("Legacy_DeletedImmediately", 1.0f, "TimerPlayCommentRightNow");
					mbPlayedDeletionMessage = true;
				}
			}
			else
			{
				if (!mbPlayedDeletionMessage)
				{
					Map_AddTimer("Legacy_DeletedOnReturn", 1.0f, "TimerPlayComment");
					mbPlayedDeletionMessage = true;
				}
			}
			mbExitedLegacyTerminal = true;
		}
	}

	//-------------------------------------------------------

	/////////////////////////////////////////
	// Terminal *Scan Room Terminal*
	/////////////////////////////////////////

	//-------------------------------------------------------
	
	int mlScanRoomFile = eScanRoomFile_None;
	bool mbCopyInProgress = false;
	bool mbRootOpen = true;
	bool mbChipOpen = true;
	int mlGuiScanColumn=0;

	//-------------------------------------------------------
	
	void ScanRoomTerminal_GuiEnter(const tString&in asEntityName)
	{
		mbPlayerUsingScanTerminal = true;
		cLux_AddDebugMessage("using terminal : " + mbPlayerUsingScanTerminal);
	}
	
	//-------------------------------------------------------
	
	void ScanRoomTerminal_GuiLeave(const tString&in asEntityName)
	{
		mbPlayerUsingScanTerminal = false;
		cLux_AddDebugMessage("using terminal : " + mbPlayerUsingScanTerminal);
	}

	//-------------------------------------------------------

	bool mbUseSinceSolvedBrandon = false;
	
	void OnUseScanTerminal(const tString &in asEntity)
	{
		if (mbAllCluesFound)
			mbUseSinceSolvedBrandon = true;
	}
	
	//-------------------------------------------------------

	void OnGuiScanRoomTerminal(const tString&in asEntityName, float afTimeStep)
	{
		ImGui_SetTransCategory("02_05_theta_inside");
		
		/////////////////////////////
		// Default station stuff
		StationGuiBG_Scanlines();
		StationGuiBG_Backdrop();
		
		//////////////////////////////////////////
		// Check if server still down
		if (!mbFixedServer)
		{
			OnGuiServerDown(asEntityName, afTimeStep);
			return;
		}
	
		/////////////
		// Data
		cImGuiWindowData windowData = StationGui_CreateDefaultWindowData();
		ImGui_SetDefaultButton(StationGui_CreateDefaultButtonData());
		cImGuiButtonData fileListButton = StationGui_CreateToggleButtonData();
		fileListButton.mbUseFrame = false;
		fileListButton.mColorBase = cColor(0, 0);
		fileListButton.mbUseBackgroundGfx = true;
		fileListButton.mFontAlign = eFontAlign_Left;
		fileListButton.mFont.mvSize = cVector2f(20);
		fileListButton.mfClipAreaPaddingLeft = 0;
		fileListButton.mfClipAreaPaddingRight = 0;
		
		/////////////////////////////////
		// File copy progress
		if (mbCopyInProgress)
		{
			if (!DoLoadingWindow("ScanRoomTransfer", "Transfer", "ChipTransferInProgress", 1, true, 1.5,
								 "level_amb_shared_machines/tech/HDD/underload_loop", "computer_case_1"))
				return;
			
			EnvChipCopySoundStop("ScanRoomSlot");
			mbCopiedScanRoom = true;
			mbCopyInProgress = false;
			return;
		}
		
		if (StationGui_DrawAndCheckErrors()) return;
		
		///////////////////////////////////////
		// Load data from any inserted chip
		CheckForAndLoadChip("BrainScanChip", "LoadingExternalDevice");
		CheckForAndLoadChip("EnvironmentChip", "LoadingExternalDevice");
		if (ChipIsLoading("BrainScanChip") || ChipIsLoading("EnvironmentChip"))
		{
			if(ChipIsLoading("EnvironmentChip"))
			{
				EnvChipCopySoundStart("ScanRoomSlot");
			}
			return;
		}
			
		
		/////////////////////////
		// File listing
		ImGui_GroupBegin(ImGui_NrmPos(cVector3f(0.025, 0.025, 1)), ImGui_NrmSize(cVector2f(0.95, 0.95)));
			cVector2f vButtonSize = cVector2f(0.75,0.04);
			float fY = 0;
			ImGui_DoWindowStart("Files", windowData, cVector3f_Zero, ImGui_NrmSizeGroup(cVector2f(0.4, 1)));
			ImGui_SetDefaultButton(fileListButton);
				mbRootOpen = DoFolderButton("Root", cVector3f(0, 0, 1), vButtonSize, mbRootOpen);
				if (mbRootOpen)
				{
					fY = FolderFileList("Scans", eScanRoomFile_Scans_Start, eScanRoomFile_Scans_End, fY, vButtonSize);
					fY = FolderFileList("Env", eScanRoomFile_Environments_Start, eScanRoomFile_Environments_End, fY, vButtonSize);
				}
				
				if (ChipIsLoaded("BrainScanChip"))
				{
					mbChipOpen = DoFolderButton("EXT_1S", cVector3f(0, fY+vButtonSize.y+0.005, 1), vButtonSize, mbChipOpen);
					if (mbChipOpen)
					{
						fY += vButtonSize.y+0.005;
						fY = FolderFileList("ScanChipScans", eScanRoomFile_ChipScans_Start, eScanRoomFile_ChipScans_End, fY, vButtonSize);
					}
				}
				
				if (ChipIsLoaded("EnvironmentChip"))
				{
					EnvChipCopySoundStop("ScanRoomSlot");
					mbChipOpen = DoFolderButton("EXT_1E"+((mbCopiedScanRoom)?"Copied":""), cVector3f(0, fY+vButtonSize.y+0.005, 1), vButtonSize, mbChipOpen);
					if (mbChipOpen)
					{
						fY += vButtonSize.y+0.005;
						int lEnd = eScanRoomFile_ChipEnvs_End;
						if (!mbCopiedScanRoom) lEnd--;
						fY = FolderFileList("EnvChipEnvironments", eScanRoomFile_ChipEnvs_Start, lEnd, fY, vButtonSize);
					}
				}
			ImGui_DoWindowEnd();
			
			/////////////////////////
			// File contents
			if (mlScanRoomFile != eScanRoomFile_None)
				OnGuiScanRoomFileInfo(windowData);
				
			if (mlScanRoomFile > eScanRoomFile_Environments_Start && mlScanRoomFile < eScanRoomFile_Environments_End)
			{
				OnGuiEnvironmentTransfer(windowData);
			}
			else
			{
				mlGuiScanColumn = 0;
			}
		ImGui_GroupEnd();
	}

	//-------------------------------------------------------
	
	//////////////////////////////////
	// Draws the folder name and its icons
	bool DoFolderButton(const tString &in asName, const cVector3f avPos, const cVector2f &in avSize, bool mbDefaultChecked = false)
	{	
		bool bPrevOpen = ImGui_GetStateBool("FOLDEROPEN_"+asName, mbDefaultChecked);
		bool bOpen = ImGui_DoToggleButton(asName+"FolderButton", "ScanRoom_"+asName+"_Folder", mbDefaultChecked, 
										  ImGui_NrmPosGroup(avPos+cVector3f_Right*0.1), ImGui_NrmSizeGroup(avSize));
		if (bOpen!=bPrevOpen)
			Depth_Audio_Terminal_FolderClick(ImGui_GetName());
		ImGui_SetStateBool("FOLDEROPEN_"+asName, bOpen);
		ImGui_DoImage(cImGuiGfx(bOpen ? "folder_open_icon" : "folder_icon"), ImGui_NrmPosGroup(avPos), ImGui_NrmSizeGroupKeepRatio(cVector2f(avSize.y, avSize.y)));
		return bOpen;
	}

	//-------------------------------------------------------
	
	bool mbDiscoveredScanEnv = false;
	
	float FolderFileList(const tString &in asName, int aStart, int aEnd, float afY, const cVector2f &in avButtonSize)
	{
		float fY = afY + avButtonSize.y+0.005;
		if (!DoFolderButton(asName, cVector3f(0.1, fY, 1), avButtonSize, true))
			return fY;
			
		if (asName=="Env")
		{
			mbDiscoveredScanEnv = true;
		}
		
		fY += avButtonSize.y+0.005;
		cVector2f vToggleSize = cVector2f(0.65, 0);
		for (int i = 1; i < (aEnd-aStart); i++)
		{
			ImGui_DoImage(cImGuiGfx("file_icon"), ImGui_NrmPosGroup(cVector3f(0.20, fY+(avButtonSize.y+0.005)*(i-1), 1)), ImGui_NrmSizeGroupKeepRatio(cVector2f(avButtonSize.y, avButtonSize.y)));
			ImGui_AddItemString("ScanRoom_"+asName+"_File_"+i+"_Name");
			vToggleSize.y+=avButtonSize.y+0.005;
		}
		
		/////////////////////////////////////////////
		// Make sure only one file can be selected
		int lDefault = mlScanRoomFile-(aStart+1);
		if (mlScanRoomFile <= aStart || mlScanRoomFile >= aEnd)
			lDefault = -1;
		int lSelection = ImGui_DoMultiToggle(asName+"Toggle", lDefault, 1, ImGui_NrmSizeGroup(cVector2f(0, 0.005)), 
											 ImGui_NrmPosGroup(cVector3f(0.30, fY, 1)), ImGui_NrmSizeGroup(vToggleSize));
		if (lSelection >= 0) mlScanRoomFile = (lSelection+(aStart+1));
		if (ImGui_PrevUpdated())
			Depth_Audio_Terminal_FolderClick(ImGui_GetName());
		
		return fY+vToggleSize.y-avButtonSize.y;
	}

	//-------------------------------------------------------
	
	void OnGuiScanRoomFileInfo(const cImGuiWindowData &in aWindowData)
	{
		cImGuiTextFrameData textData = ImGui_GetDefaultTextFrame();
		textData.mFont.mvSize = cVector2f(18);
		textData.mbUseBackgroundGfx = false;
		ImGui_SetDefaultTextFrame(textData);
		
		ImGui_SetTransCategory("02_05_theta_inside");
		
		/////////////////////////////////////////
		// Get the file name and window caption
		tString sCaption = "";
		tString sFile = "";
		if (mlScanRoomFile > eScanRoomFile_Environments_Start && mlScanRoomFile < eScanRoomFile_Environments_End)
			sCaption = sFile = "Env_File_"+(mlScanRoomFile-eScanRoomFile_Environments_Start);
		else if (mlScanRoomFile > eScanRoomFile_Scans_Start && mlScanRoomFile < eScanRoomFile_Scans_End)
			sCaption = sFile = "Scans_File_"+(mlScanRoomFile-eScanRoomFile_Scans_Start);
		else if (mlScanRoomFile > eScanRoomFile_Legacy_Start && mlScanRoomFile < eScanRoomFile_Legacy_End)
			sCaption = sFile = "Legacy_File_"+(mlScanRoomFile-eScanRoomFile_Legacy_Start);
		else if (mlScanRoomFile > eScanRoomFile_ChipEnvs_Start && mlScanRoomFile < eScanRoomFile_ChipEnvs_End)
			sCaption = sFile = "EnvChipEnvironments_File_"+(mlScanRoomFile-eScanRoomFile_ChipEnvs_Start);
		else
		{
			sCaption = "ScanChipScans_File_"+(mlScanRoomFile-eScanRoomFile_ChipScans_Start);
			sFile = "ScanChipScans_File";
		}
		
		///////////////////////
		// Scan info window
		ImGui_DoWindowStart("ScanRoom_"+sCaption+"_Name", aWindowData, ImGui_NrmPosGroup(cVector3f(0.41, 0, 1)), ImGui_NrmSizeGroup(cVector2f(0.59, 0.55)));
			
			ImGui_DoTextFrame("ScanRoom_"+sFile+"_Info", ImGui_NrmSizeGroup(cVector2f(0.02, 0.01)), 0, 0, 
								 ImGui_NrmPosGroup(cVector3f(0,0,1)), ImGui_NrmSizeGroup(cVector2f(0.92, 0.9)));
					
		ImGui_DoWindowEnd();
	}

	//-------------------------------------------------------
	
	void OnGuiEnvironmentTransfer(const cImGuiWindowData &in aWindowData)
	{		
		cImGuiButtonData button = StationGui_CreateDefaultButtonData();
		button.mbClipText = false;
		
		if ( ImGui_ActionTriggered(eImGuiAction_Right)||  ImGui_ActionTriggered(eImGuiAction_Left) )
		{
			
			if (mlGuiScanColumn==0)
			{
				mlGuiScanColumn=1;
				ImGui_SetFocus("NetworkButton");
			}
			else
			{
				mlGuiScanColumn=0;
				ImGui_SetFocus("EnvToggle$"+(mlScanRoomFile-eScanRoomFile_Environments_Start-1));	
			}
		}
		
		////////////////////////////
		// Environment transfer
		ImGui_DoWindowStart("Transfer", aWindowData, ImGui_NrmPosGroup(cVector3f(0.45, 0.62, 0)), ImGui_NrmSizeGroup(cVector2f(0.51, 0.33)));
		
			ImGui_ResizeFontToFit("NetworkTransfer", button.mFont, ImGui_GetCurrentGroupSize().x*0.7);
			ImGui_ResizeFontToFit("ChipTransfer", button.mFont, ImGui_GetCurrentGroupSize().x*0.7);
			ImGui_ResizeFontToFit("ChipTransfer_NoChip", button.mFont, ImGui_GetCurrentGroupSize().x*0.7);
		
			/////////////////////////
			// Network
			ImGui_SetAlignment(eImGuiAlign_TopCenter);
			if (ImGui_DoButtonExt("NetworkButton", "NetworkTransfer", button, ImGui_NrmPosGroup(cVector3f(0.5, 0.08, 0.1)), ImGui_NrmSizeGroup(cVector2f(0.82, 0.3))))
			{
				StationGui_SetError("NetworkTransferError");
				Depth_Audio_Terminal_Error(ImGui_GetName());
			}
			
			/////////////////////////
			// To chip
			bool bChipIn = Entity_IsActive("ScanRoomSlot_Chip");
			if (ImGui_DoButtonExt("ChipButton", bChipIn ? "ChipTransfer" : "ChipTransfer_NoChip", button, ImGui_NrmPosGroup(cVector3f(0.5, 0.43, 0.1)), ImGui_NrmSizeGroup(cVector2f(0.82, 0.3))))
			{
				bool bCorrectChip = ChipIsLoaded("EnvironmentChip");
				
				if (!bChipIn)
				{
					StationGui_SetError("ChipTransferError_NoChip");
				}
				else if (mlScanRoomFile == eScanRoomFile_Environments_ScanRoom)
				{
					if (!bCorrectChip)
					{
						StationGui_SetError("ChipTransferError_WrongChip");
					}
					else if (mbCopiedScanRoom)
					{
						StationGui_SetError("ChipTransferError_FileExists");
					}
					else
					{
						Depth_Audio_Terminal_Confirm(ImGui_GetName());
						mbCopyInProgress = true;
						EnvChipCopySoundStart("ScanRoomSlot");
					}
				}
				else if (mlScanRoomFile == eScanRoomFile_Environments_Beach)
				{
					if (bCorrectChip)
						StationGui_SetError("ChipTransferError_FileExists");
					else
						StationGui_SetError("ChipTransferError_WrongChip");
				}
				else
				{
					StationGui_SetError("ChipTransferError_Corrupted");
				}
			}
			ImGui_SetAlignment(eImGuiAlign_TopLeft);
		ImGui_DoWindowEnd();
	}
	
	//-------------------------------------------------------
	
	///////////////////////////
	// Terminal server reset
	///////////////////////////
	
	//-------------------------------------------------------
	
	bool mbServerResetIssued = false;
	
	//-------------------------------------------------------
	
	void ServerResetTerminal_OnGui(const tString&in asEntityName, float afTimeStep)
	{
		ImGui_SetTransCategory("02_05_theta_inside");
		
		//////////////////////////////////
		// Setup widget data
		cImGuiWindowData window = StationGui_CreateDefaultWindowData();
		cImGuiLabelData label = ImGui_GetDefaultLabel();
		cImGuiButtonData button = StationGui_CreateDefaultButtonData();
		cImGuiTextFrameData textData = StationGui_CreateDefaultTextFrameData();
		textData.mFont.SetFile(Helper_Font_GetFontName(eLuxFontType_Sansation_Large));
		textData.mFontAlign = eFontAlign_Center;
		textData.mFont.mvSize = cVector2f(33, 33);
		
		
		StationGuiBG_Scanlines();
		StationGuiBG_Backdrop();
		
		tString sError = Entity_GetVarString(asEntityName, "ErrorMsg");
		if (sError != "")
		{			
			ImGui_DoWindowStart("Error", window, ImGui_NrmPosGroup(cVector3f(0.2f, 0.3, 2.f)), ImGui_NrmSizeGroup(cVector2f(0.6f, 0.4f)));
				
				textData.mFont.mvSize = cVector2f(38, 38);
				ImGui_DoTextFrameExt(sError, ImGui_NrmSizeGroup(cVector2f(0.05, 0)), 0, 0, textData, 
								  ImGui_NrmPosGroup(cVector3f(0.0, 0.15, 1)), ImGui_NrmSizeGroup(cVector2f(1, 1)));
								  
			ImGui_DoWindowEnd();
		}
		
/*		if (mbServerResetIssued)
		{
			ImGui_SetTransCategory("");
			if (DoLoadingWindow("Reboot", "Rebooting", "REBOOTING", 2.0f, true))
			{
				mbServerResetIssued = false;
				SequenceServerFixed("");
			}
		}*/
			
		ImGui_SetDefaultButton(button);		
		if (!mbFixedServer)
		{
			if (Map_GetTimerTime("ServerResetPreparation") > 0)
			{
				cGuiDialogBoxSettings dialogBox = StationGui_CreateDefaultDialogBox();
				dialogBox.mbEndWindow = false;
				dialogBox.mvSize = ImGui_NrmSizeGroup(0.9, 0.8);
				dialogBox.mfZ = 1.5;
				dialogBox.mTextFrame.mFont.mvSize = ImGui_NrmSizeKeepRatio(0.08);
				Depth_ImGui_DialogBox("PreparingReset", "ConnectionStatusPreparingReset", dialogBox);
					bool bDone = Depth_ImGui_LoadingGauge("ResetPrepare", gfServerResetWaitTime, false, ImGui_NrmPosGroup(cVector3f(0.1, 0.75, 1)), 
														  ImGui_NrmSizeGroup(cVector2f(0.8, 0.15)), StationGui_CreateDefaultGaugeData());
				ImGui_DoWindowEnd();					
				ImGui_SetTransCategory("");
			}
			else if (mbAllowServerReset)
			{
				Depth_ImGui_ResetLoadingGauge("ResetPrepare");
				
				cGuiDialogBoxSettings dialogBox = StationGui_CreateDefaultDialogBox();
				dialogBox.mbEndWindow = false;
				dialogBox.mvSize = ImGui_NrmSizeGroup(0.9, 0.75);
				dialogBox.mfZ = 1.5;
				
				textData.mFont.mvSize = ImGui_NrmSizeKeepRatio(0.08);
				
				Depth_ImGui_DialogBox("ResetReady", "", dialogBox);
					cVector2f vFontSize = textData.mFont.mvSize;
					float fYOffset = 0;
					float fMaxTextWidth = ImGui_GetCurrentGroupSize().x*1.25;
			
					float fNewWidth = ImGui_ResizeFontToFit("ConnectionStatusResetReady", textData.mFont, fMaxTextWidth);
					ImGui_DoTextFrameExt("ConnectionStatusResetReady", ImGui_NrmSizeGroup(cVector2f(0.05, 0.05)), 5, 0, textData, ImGui_NrmPosGroup(cVector3f(0, 0.1, 0)), ImGui_NrmSizeGroup(cVector2f(1,1)));
					if (fNewWidth > ImGui_GetCurrentGroupSize().x*0.9) fYOffset += 5+textData.mFont.mvSize.y;
					
					textData.mFont.mvSize = vFontSize;
					fNewWidth = ImGui_ResizeFontToFit("ResetTimeout", textData.mFont, fMaxTextWidth);
					ImGui_DoTextFrameExt("ResetTimeout", ImGui_NrmSizeGroup(cVector2f(0.05, 0.05)), 5, 0, textData, ImGui_NrmPosGroup(0, 0.3, 0)+cVector3f_Up*fYOffset, ImGui_NrmSizeGroup(cVector2f(1,1)));
					if (fNewWidth > ImGui_GetCurrentGroupSize().x*0.9) fYOffset += 5+textData.mFont.mvSize.y;
					ImGui_SetTransCategory("");
					textData.mFont.mvSize = ImGui_NrmSizeKeepRatio(0.2);
					ImGui_DoTextFrameExt(String_SecondsToClockDisplay(Map_GetTimerTime("ServerResetWindowOver"), false, false, true, true), 
										 ImGui_NrmSizeGroup(cVector2f(0.05, 0.05)), 5, 0, textData, ImGui_NrmPosGroup(cVector3f(0, 0.45, 0))+cVector3f_Up*fYOffset, ImGui_NrmSizeGroup(cVector2f(1,1)));
				ImGui_DoWindowEnd();					
			}
			else
			{
				Depth_ImGui_ResetLoadingGauge("ResetPrepare");
				
				ImGui_SetTransCategory("02_05_theta_inside");
				StationGui_BigStatusMessage("ConnectionStatusError");
				ImGui_SetTransCategory("");
			}
		}
		else
		{
			textData.mFont.mvSize = ImGui_NrmSizeKeepRatio(cVector2f(0.055, 0.055)*1.25f);
			ImGui_DoWindowStart("ConnectionStatusHeader", window, ImGui_NrmPosGroup(cVector3f(0.05, 0.1, 1)), ImGui_NrmSizeGroup(cVector2f(0.9, 0.7)));
				ImGui_DoTextFrameExt("ConnectionStatusSolved", ImGui_NrmSizeGroup(cVector2f(0.05, 0.05)), 5, 0, textData, 
					ImGui_NrmPosGroup(cVector3f(0, 0, 0)), ImGui_NrmSizeGroup(cVector2f(1,1)));
								
				ImGui_SetTransCategory("");
				DoStatusGaugesVertical(4, cVector3f(0.55, 0.7, 1), cVector2f(0.2, 0.19), 0.6, 0.3, 0.9);
				DoRandomNumbers(3, 2, cVector3f(0.15, 0.7, 1), cVector2f(0.1, 0.1), 2, 10, 99);
			ImGui_DoWindowEnd();
		}
	}
	
	//-------------------------------------------------------
	
	///////////////////////////
	// DUNBAT Camera Terminal
	///////////////////////////
	
	//-------------------------------------------------------
	
	bool mbDunbatCameraActive=false;
	cMatrixf mMatDunbatCameraRot;
	float mfDunbatCameraRotate=0.0f;
	
	//-------------------------------------------------------
	
	void SetupDunbatCamera()
	{
		Gui_CreateCameraTexture("DunbatCamera", cVector2l(768, 613), 30, 90.0f, 0.1, 60);
		Gui_AttachCameraTextureToEntity("DunbatCamera", "DunbatCameraArea");
		
		mMatDunbatCameraRot = Map_GetEntity("DunbatCameraArea").GetMatrix().GetRotation();
	}
	
	//-------------------------------------------------------
	
	void OnGuiDunbatCamera(const tString&in asEntityName, float afTimeStep)
	{
		ImGui_SetTransCategory("02_05_theta_inside");
		
		StationGuiBG_Scanlines();
		StationGuiBG_Backdrop();
		
		/////////////////////////////////////
		// Draw Camera View
		cImGuiGfx gfx("DunbatCamera", eImGuiGfx_Special);
		ImGui_DrawGfx(gfx, cVector3f(0,0,5.0f), ImGui_GetSize(), cColor(1, 1));
		
		/////////////////////////////////////
		// Draw Label
		cImGuiLabelData label = ImGui_GetDefaultLabel();
		label.mFont.mvSize = cVector2f(60,60);
		ImGui_DoLabelExt("DunbatCamera", label, ImGui_NrmPos(cVector3f(0.05f, 0.85f, 6.0f)));
	}
	
	//-------------------------------------------------------
	
	void StartDunbatCamera()
	{
		mbDunbatCameraActive = true;
	}
	
	//-------------------------------------------------------
	
	void StopDunbatCamera()
	{
		mbDunbatCameraActive = false;
	}
	
	//-------------------------------------------------------
	
	void UpdateDunbatCamera(float afTimeStep)
	{
		mfDunbatCameraRotate+=afTimeStep;
		float fAngle = cMath_Sin(mfDunbatCameraRotate*0.4f)*0.5f;
		
		cMatrixf matRot = cMath_MatrixMul( cMath_MatrixRotateY(fAngle), mMatDunbatCameraRot);
		iLuxEntity@ pEnt = Map_GetEntity("DunbatCameraArea");
		cMatrixf mat = pEnt.GetMatrix();
		mat.SetRotation(matRot);
		pEnt.SetMatrix(mat);
	}
	
	//-------------------------------------------------------
	
	///////////////////////////
	// Status terminal in control room
	///////////////////////////
	
	//-------------------------------------------------------
	
	void OnGuiStatusTerminal(const tString&in asEntityName, float afTimeStep)
	{
		ImGui_SetTransCategory("02_05_theta_inside");
		
		StationGuiBG_Backdrop();
		StationGuiBG_Scanlines();
		StationGuiBG_Taskbar("theta");
		
		///////////////////////
		// Data
		cImGuiButtonData button = StationGui_CreateToggleButtonData();
		button.mFont.mvSize = ImGui_NrmSizeGroupKeepRatio(0.0375);
		ImGui_SetDefaultButton(button);
		
		cStationGui_TextReaderSettings settings;
		settings.mvTextFontSize=24;
		
		if (StationGui_DrawAndCheckErrors()) return;
		
		bool bDrawBackButton = true;
		int lActiveApp = StationGui_GetActiveApp(eStatusTerminalState_MainMenu);
		switch (lActiveApp)
		{	
			case eStatusTerminalState_Status:
				StationGui_TextReaderSingle("StatusTerminal_Status_Title", "StatusTerminal_Status_Text", settings);
			break;
			
			case eStatusTerminalState_Map:
				OnGuiStatusTerminal_Map(afTimeStep);
			break;
			
			case eStatusTerminalState_CrewInfo:
				StationGui_TextReaderSingle("StatusTerminal_CrewInfo_Title", "StatusTerminal_CrewInfo_Text", settings);
			break;
			
			case eStatusTerminalState_MainMenu:
			{
				StationGui_AddApp("StatusTerminal_Menu_Status");
				StationGui_AddApp("StatusTerminal_Menu_Map");
				StationGui_AddApp("StatusTerminal_Menu_CrewInfo");
				int lSelection = StationGui_MainMenu();
				if (lSelection == eStatusTerminalState_Map)
				{
					Terminal_SetFPSWhenIdle(ImGui_GetName(), 10);
				}
				bDrawBackButton = false;
			}
			break;
		}
		
		if (StationGui_BackButton(bDrawBackButton))
		{
			Terminal_SetFPSWhenIdle(ImGui_GetName(), 0);
		}
	}
	
	//-------------------------------------------------------
	
	bool mbStatusTerminalTriggeredComment = false;
	
	void OnGuiStatusTerminal_Map(float afTimeStep)
	{
		/////////////
		// Data
		cImGuiWindowData windowData = StationGui_CreateDefaultWindowData();
		windowData.mColorText = cColor(1, 1);
		
		ImGui_GroupBegin(ImGui_NrmPos(cVector3f(0.025, 0.025, 1)), ImGui_NrmSize(cVector2f(0.95, 0.775)));
		
			/////////////////////////
			// File listing
			ImGui_AddItemString("StatusTerminal_Map_Floor1");
			ImGui_AddItemString("StatusTerminal_Map_Floor2");
			ImGui_AddItemString("StatusTerminal_Map_Floor3");
			int lSelectedLevel = StationGui_FileList("StatusTerminal_Map_Title", 3, 0, ImGui_NrmSizeGroup(cVector2f(0.35, 1)));
			
			/////////////////////////
			// File contents
			if (lSelectedLevel > 0)
			{
				ImGui_DoWindowStart("StatusTerminal_Map_Floor"+lSelectedLevel, windowData, 				
									ImGui_NrmPosGroup(cVector3f(0.36, 0, 1)), ImGui_NrmSizeGroup(cVector2f(0.64, 1)));
									
					if (lSelectedLevel == 1)
						StationGui_YouAreHereIcon(ImGui_NrmPosGroup(0.54, 0.175, 1.5), ImGui_NrmSizeGroup(0.125));
									
					ImGui_DoImageCorrectAspect(cImGuiGfx("02_05_StatusTerminal_Floor"+lSelectedLevel), 
												ImGui_NrmPosGroup(0.025f,0.025f,1.0f), ImGui_NrmSizeGroup(0.95f,0.95f));
				ImGui_DoWindowEnd();
				
				if (!mbStatusTerminalTriggeredComment&&mbCathPluggedIn)
				{
					ImGui_SetStateBool("SeenFloor"+lSelectedLevel,true);
					bool bSeen = true;
					for (int i=2;i<=3;i++)
					{
						if (ImGui_GetStateBool("SeenFloor"+i,false)==false)
						{
							bSeen = false;
							break;
						}
					}
					
					if (bSeen)
					{
						mbStatusTerminalTriggeredComment = true;
						if (!mbVisitedPersonnelArea&&!mbVisitedServerRoom)
							Map_AddTimer("2_LookedAtTerminalMap", 1.0f, "TimerPlayComment");
					}
				}
			}
			
		ImGui_GroupEnd();
	}
	
	//-------------------------------------------------------
	
	void TimerPlayComment(const tString& in asSubject)
	{
		Voice_PlayWhenPossible(asSubject,"",120.0f,3.0f);
	}

	//-------------------------------------------------------
	
	void TimerPlayCommentRightNow(const tString& in asSubject)
	{
		Voice_PlayWhenPossible(asSubject,"",120.0f,0.5f);
	}
	
	//-------------------------------------------------------
	
	//} END TERMINALS
	
	/////////////////////////////////////////
	// AUDIO
	//{//////////////////////////////////////
	
		
	//{AmbientMusicPlayer---------------------------------------------------------------------

	/**
	*Simple ambient music player that fades the ambience randomly whilst playing to stop it from getting repetitive
	**/
	
	bool mbAmbientMusicPlaying = false;
	bool mbAmbientMusicSecondStage = false;
	bool mbAmbientMusicAllowed = true;
	int mlAmbientStage = 0;
	float mfAmbientMusicMul = 1.0f;
	
	void AmbientMusicHandler(const tString &in asTimer)
	{		
		if (asTimer=="StartAmbient" && mbAmbientMusicPlaying==false && mbAmbientMusicAllowed==true)
		{
			if(mlAmbientStage==0)
			{
				Music_PlayExt(gsThetaMusicStage1, true, 0.7f, 1.0f, cMath_RandRectf(3.f,5.f), 0.0f, eMusicPrio_BgAmb, true);
			}
			else if(mlAmbientStage==1)
			{
				Music_PlayExt(gsThetaMusicStage2, true, 0.7f, 1.0f, cMath_RandRectf(3.f,5.f), 0.0f, eMusicPrio_BgAmb, true);
			}
			else if(mlAmbientStage==2)
			{
				Music_PlayExt(gsThetaMusicStage3, true, 0.75f, 1.0f, cMath_RandRectf(3.f,5.f), 0.0f, eMusicPrio_BgAmb, true);
			}
			
			cLux_AddDebugMessage("Ambient music triggering");
			
			mbAmbientMusicPlaying = true;
			
			//Dynamic fades
			Map_AddTimer("RandomFadeRider", cMath_RandRectf(20.f,30.f), "AmbientMusicHandler");
			Map_AddTimer("FadeOut", cMath_RandRectf(120.f,180.f), "AmbientMusicHandler");
			Map_RemoveTimer("StartAmbient");
			Map_RemoveTimer("StopAmbientMusic");
			Map_RemoveTimer("StopAmbientMusicQuickly");
		}
		
		else if (asTimer=="StartAmbient" && mbAmbientMusicPlaying==false && mbAmbientMusicAllowed==false)
		{
			Map_AddTimer("StartAmbient", cMath_RandRectf(10.f,20.f), "AmbientMusicHandler");
		}
		
		else if (asTimer=="StopAmbientMusic" && mbAmbientMusicPlaying==true)
		{
			Music_Stop(4.5f, eMusicPrio_BgAmb);
			Map_RemoveTimer("RandomFadeRider");
			Map_RemoveTimer("FadeOut");
			Map_RemoveTimer("StartAmbient");
			Music_FadeVolumeMul(1.0f,1.0f);
			mbAmbientMusicPlaying = false;
		}
		else if (asTimer=="StopAmbientMusicQuickly" && mbAmbientMusicPlaying==true)
		{
			cLux_AddDebugMessage("Stop Ambient Music Quickly Triggered");
			Music_Stop(1.5f, eMusicPrio_BgAmb);
			Map_RemoveTimer("StartAmbient");
			Map_RemoveTimer("RandomFadeRider");
			Map_RemoveTimer("FadeOut");
			Music_FadeVolumeMul(1.0f,1.0f);
			mbAmbientMusicPlaying = false;
		}
		
		else if(asTimer=="RandomFadeRider")
		{
			if(mlAmbientStage==0)
			{
				Music_PlayExt(gsThetaMusicStage1, true, 0.7f*mfAmbientMusicMul, 1.0f, cMath_RandRectf(5.f,8.f), 0.0f, eMusicPrio_BgAmb, true);
			}
			else if(mlAmbientStage==1)
			{
				Music_PlayExt(gsThetaMusicStage2, true, 0.7f*mfAmbientMusicMul, 1.0f, cMath_RandRectf(5.f,8.f), 0.0f, eMusicPrio_BgAmb, true);
			}
			else if(mlAmbientStage==2)
			{
				Music_PlayExt(gsThetaMusicStage3, true, 0.7f*mfAmbientMusicMul, 1.0f, cMath_RandRectf(5.f,8.f), 0.0f, eMusicPrio_BgAmb, true);
			}
			
			cLux_AddDebugMessage("Ambient Music Fading");
			mfAmbientMusicMul = cMath_RandRectf(0.7f, 1.1f);
			Map_AddTimer("RandomFadeRider", cMath_RandRectf(10.f,15.f), "AmbientMusicHandler");
		}
		
		else if(asTimer=="FadeOut")
		{	
			cLux_AddDebugMessage("Ambient Music Fading Out");
			Music_Stop(cMath_RandRectf(8.f,12.f), eMusicPrio_BgAmb);
			mbAmbientMusicPlaying = false;
			
			Map_RemoveTimer("RandomFadeRider");
			Map_AddTimer("StartAmbient", cMath_RandRectf(60.f,80.f), "AmbientMusicHandler");
		}
		
		cLux_AddDebugMessage("Ambient Music Playing is "+mbAmbientMusicPlaying);
	}
	
	//} EndAmbientMusicPlayer---------------------------------------------------------------------
	
    void BassRoomSting()
    {
        Music_Play("02_05_bass_room", 0.7f, false, eMusicPrio_BigEvent);
    }
    
    void CathRoomSting()
    {
        Music_Play("02_05_caths_room", 0.7f, false, eMusicPrio_BigEvent);
    }
		
	//---------------------------------------------------------------------
	
	//{ Simulation music
	
	//First simulation music
	void SimulationFirstMusic(const tString &in asParent, const tString &in asChild, int alState, bool abStart)
	{
		if(abStart==false) return;
		
		Music_Play("01_01_smashed_door", 0.8f, false, eMusicPrio_BigEvent);
	}
	
	void PostBrandonScanMusic(const tString &in asParent, const tString &in asChild, int alState, bool abStart)
	{
		if(abStart==false) return;
		
		Map_AddTimer("BrandonScanMusic", 3.0f, "BrandonPostScanMusic");
	}
	
	bool mbBrandonPostScanMusic = false;
	void BrandonPostScanMusic(const tString &in asTimer)
	{
		Music_PlayExt("02_05_scanroom", true, 0.65, 1.0f, 4.0f, 0.0f, eMusicPrio_MinorEvent, false);
		Sound_FadeGlobalVolume(0.65f, 3.0f, eSoundEntryType_World);
		Map_AddTimer("FadeUpBrandonPostScanMusic", 30.0f, "FadeUpPostBrandonMusic");
		mbBrandonPostScanMusic = true;
	}
	
	void PostBrandonMusic(const tString &in asTimer)
	{
		Sound_FadeGlobalVolume(1.0f, 10.0f, eSoundEntryType_World);
		mbBrandonPostScanMusic = false;
	}
	
	//} End simulation music
	
	//---------------------------------------------------------------------
	
	//{ Simon Scan Recording Music Control
	bool mbSimonRecordingMusicControl = false;
	void StartSimonRecordingMusicControl()
	{
		if(mbSimonRecordingMusicControl==false)
		{
			cLux_AddDebugMessage("Simon recording control - fading music");
			Map_AddTimer("StopAmbientMusicQuickly", 1.0f, "AmbientMusicHandler");
			mbSimonRecordingMusicControl = true;
		}
	}
		
	//---------------------------------------------------------------------
	
	void StopSimonRecordingMusicControl()
	{
		if(mbSimonRecordingMusicControl==true)
		{
			cLux_AddDebugMessage("Simon recording control - bringing back music");
			Map_AddTimer("StartAmbient", cMath_RandRectf(6.0f, 10.0f), "AmbientMusicHandler");
			mbSimonRecordingMusicControl = false;
		}
	}
	
	//} End Simon Scan Recording Music Control
	
	//---------------------------------------------------------------------
	//After hearing final scan recording 
	
	bool mbSimonRealisationMusic = false;
	bool mbSimonRealisationMusicAllowed = true;
	
	void LineStart_SimonRealisation(const tString &in asParent, const tString &in asChild, int alState, bool abStart)
	{
		if(abStart==false) return;
		
		if(mbSimonRealisationMusic==false && mbSimonRealisationMusicAllowed==true)
		{
			Map_AddTimer("SimonRealisationMusic", 0.5f, "SimonRealisationMusic");
		}
	}
	
	void SimonRealisationMusic(const tString &in asTimer)
	{
		if(mbSimonRealisationMusic==false && mbSimonRealisationMusicAllowed==true)
		{
			Music_Play("02_02_escape_success", 0.75f, false, eMusicPrio_MinorEvent);
			Map_RemoveTimer("SimonRealisationMusic");
			mbSimonRealisationMusic = true;
		}
		
	}
	
	void SimonRealisationMusicCooldown(const tString &in asTimer)
	{
		cLux_AddDebugMessage("Too long since Simon erased data, realisation music not allowed");
		mbSimonRealisationMusicAllowed = false;
	}
	
	//---------------------------------------------------------------------
	
	void LineOver_DoorUnlock(const tString &in asParent, const tString &in asChild, int alState, bool abStart)
	{
		if(abStart)
			return;
			
		Sound_CreateAtEntity("DoorsUnlock", "02_05_theta/sweeteners/activating_door_panels_unlock", "CathSourceArea_4");
		Button_SetDisabled("ControlRoomDoor_Inside",false,true);
		Button_SetDisabled("ControlRoomDoor_Outside",false,true);
		Button_SetDisabled("ControlRoomPanel_Inside_1",false,true);
	}
	//---------------------------------------------------------------------
	
	bool CollideScanRoomSoundControl(const tString &in asParent, const tString &in asChild, int alState)
	{
		if(alState==1)
		{
			Light_SetFlickerActive("PointLight_10", true);
		}
		else
		{
			Light_SetFlickerActive("PointLight_10", false);
		}
		return true;
	}
	
	//-------------------------------------------------------
	
	bool mbSOMATerminalLoadingSoundActive = false;
	void SOMATerminalLoadingSoundStart()
	{
		if(mbSOMATerminalLoadingSoundActive==false)
		{
			mbSOMATerminalLoadingSoundActive = true;
			Sound_CreateAtEntity("SOMATerminalLoadingStart", "02_05_theta/sfx/soma_terminal/soma_start", "SomaTerminalSoundSource");
			Map_AddTimer("SOMATerminalLoadingLoop", 0.35f, "SOMATerminalLoadingLoop");
			Map_RemoveTimer("SOMATerminalLoadingLoopStop");
			
			if(Sound_Exists("SOMATerminalLoadingStopSound"))
			{
				Sound_Stop("SOMATerminalLoadingStopSound", 0.15f);
			}
		}
	}
	
	void SOMATerminalLoadingLoop(const tString &in asTimer)
	{
		Sound_CreateAtEntity("SOMATemrinalLoadingLoopSound", "02_05_theta/sfx/soma_terminal/soma_loop", "SomaTerminalSoundSource");
	}
	
	void SOMATerminalLoadingSoundStop()
	{
		if(Sound_Exists("SOMATerminalLoadingStart"))
		{
			Sound_Stop("SOMATerminalLoadingStart", 0.15f);
		}
		
		Sound_CreateAtEntity("SOMATerminalLoadingStopSound", "02_05_theta/sfx/soma_terminal/soma_stop", "SomaTerminalSoundSource");
		Map_AddTimer("SOMATerminalLoadingLoopStop", 0.35f, "SOMATerminalLoadingLoopStop");
		Map_RemoveTimer("SOMATerminalLoadingLoop");
		mbSOMATerminalLoadingSoundActive = false;
		Sound_Stop("SOMATerminalLoading", 0.1f);
	}
	
	void SOMATerminalLoadingLoopStop(const tString &in asTimer)
	{
		Sound_Stop("SOMATemrinalLoadingLoopSound", 0.1f);
	}
		
	//-------------------------------------------------------
	
	bool mbTerminalLoadingSoundGenericActive = false;
	void GenericTerminalLoadingSoundStart(const tString &in asEntity)
	{
		if(mbTerminalLoadingSoundGenericActive==false)
		{
			mbTerminalLoadingSoundGenericActive = true;
			Sound_CreateAtEntity("GenericTerminalLoading"+asEntity, "02_01_ms_curie_outside/SFX/cathbot/ark_locator_loading", asEntity);
		}
	}
	
	void GenericTerminalLoadingSoundStop(const tString &in asEntity)
	{
		mbTerminalLoadingSoundGenericActive = false;
		Sound_Stop("GenericTerminalLoading"+asEntity, 0.1f);
	}
		
	//-------------------------------------------------------
	//Copy to env chip
	bool mbEnvChipCopySound = false;
	void EnvChipCopySoundStart(const tString &in asEntity)
	{
		if(mbEnvChipCopySound==false)
		{
			Sound_CreateAtEntity("EnvChipCopyStart", "02_05_theta/sweeteners/data_transfer/start_stop", asEntity);
			Sound_CreateAtEntity("EnvChipCopyLoop", "02_05_theta/sweeteners/data_transfer/loop", asEntity);
			mbEnvChipCopySound = true;
		}
	}
	
	void EnvChipCopySoundStop(const tString &in asEntity)
	{
		if(mbEnvChipCopySound==true)
		{
			Sound_CreateAtEntity("EnvChipCopyStart", "02_05_theta/sweeteners/data_transfer/start_stop", asEntity);
			Sound_Stop("EnvChipCopyLoop", 0.1f);
			mbEnvChipCopySound = false;
		}
	}
		
	//-------------------------------------------------------
	
	bool mbRouterErrorLoadingSoundActive = false;
	void RouterTerminalLoadingSoundStart(const tString &in asEntity)
	{
		if(mbRouterErrorLoadingSoundActive==false)
		{
			mbRouterErrorLoadingSoundActive = true;
			Sound_CreateAtEntity("RouterTerminalLoading"+asEntity, "02_01_ms_curie_outside/SFX/cathbot/ark_locator_loading", asEntity);
			Depth_Audio_Terminal_Forward(asEntity);
		}
	}
	
	void RouterTerminalLoadingSoundStop(const tString &in asEntity)
	{
		mbRouterErrorLoadingSoundActive = false;
		Sound_Stop("RouterTerminalLoading"+asEntity, 0.1f);
	}
	
	//------------------------------------------------------
	//File folder sound
	
	void TerminalFileSound(const tString &in asEntity)
	{
		Sound_CreateAtEntity("FileSound", "Entities_Station/tech/terminal_beeps/pathOS_comp/pathOS_folder_click", asEntity);
		cLux_AddDebugMessage("file sound");
	}
			
	//-------------------------------------------------------
	//{ Living Quarters TV Sound
	
	bool mbLivingQuartersTVSound = false;
	bool mbLivingQuartersTVSoundBurst = false;
	void LivingQuartersTVSound()
	{
		if(mbLivingQuartersTVSoundBurst==false)
		{
			Sound_CreateAtEntity("TVBurst", "02_05_theta/sweeteners/tv_scare", "computer_panel_large_GUI_2");
			Map_AddTimer("FearTV", 2.5f, "FearTV");
			mbLivingQuartersTVSoundBurst = true;
		}
		
		if(mbLivingQuartersTVSound==false)
		{
			Sound_Play("tv_static", 1.0f);
			mbLivingQuartersTVSound = true;
			cLux_AddDebugMessage("TV Sound on");
		}
	}
	
	void FearTV(const tString &in asTimer)
	{
		Depth_Audio_Fear_MediumIntensity();
	}
	
	void LivingQuartersTVSoundOff()
	{
		Sound_Stop("tv_static", 0.25f);
		mbLivingQuartersTVSound = false;
		cLux_AddDebugMessage("TV Sound off");
	}
	
	void TVSoundControl(const tString &in asEntity, int alState)
	{
		if(alState==-1)
		{
			if(Entity_GetCollide("Player","TVSoundControlArea"))
			{
				LivingQuartersTVSoundOff();
			}
		}
		else if(alState==1)
		{
			if(Entity_GetCollide("Player","TVSoundControlArea") && mbLivingQuartersTVSoundBurst==true)
			{
				LivingQuartersTVSound();
			}
		}
	}
	
	bool TVSoundControlApartment(const tString &in asParent, const tString &in asChild, int alState)
	{
		if(alState==1 && mbLivingQuartersTVSoundBurst==true)
		{
			LivingQuartersTVSoundOff();
		}
		else if(mbLivingQuartersTVSoundBurst==true)
		{
			LivingQuartersTVSound();
		}
		return true;
	}
	
	//} End Living Quarters TV Sound
		
	//------------------------------------------------------
	
	//{ Cave water sound control
	
	void StopCaveWaterSounds()
	{
		Sound_Stop("cave_water_splat_door_1", 0.25f);
		Sound_Stop("cave_water_splat_floor_1", 0.25f);
		cLux_AddDebugMessage("Cave water sounds stopped.");
	}
	
	void StartCaveWaterSounds()
	{
		Sound_Play("cave_water_splat_door_1", 0.25f);
		Sound_Play("cave_water_splat_floor_1", 0.25f);
		cLux_AddDebugMessage("Cave water sounds started.");
	}
	
	
	void ServerRoom_SoundControl(const tString &in asEntity, int alState)
	{
		if(alState==-1)
		{
			if(Entity_GetCollide("Player","ServerWaterSoundControl"))
			{
				StopCaveWaterSounds();
			}
		}
		else if(alState==1)
		{
			StartCaveWaterSounds();
		}
	}
	
	void WauServer_SoundControl(const tString &in asEntity, int alState)
	{
		if(alState==-1)
		{
			if(Entity_GetCollide("Player","WauServerWaterSoundControl"))
			{
				StopCaveWaterSounds();
			}
		}
		else if(alState==1)
		{
			StartCaveWaterSounds();
		}
	}
	
	void BlockedCave_SoundControl(const tString &in asEntity, int alState)
	{
		if(alState==-1)
		{
			if(Entity_GetCollide("Player","BlockedCaveSoundControl"))
			{
				StopCaveWaterSounds();
			}
		}
		else if(alState==1)
		{
			StartCaveWaterSounds();
		}
	}
		
	//------------------------------------------------------
	
	//} End Cave water sound control
			
	//------------------------------------------------------
	//{Dunbat audio
	
	//------------------------------------------------------
	bool mbDunbatAudioEngineOn = false;
	void DunbatAudioEngine()
	{
		if(mbDunbatAudioEngineOn==false)
		{
			Sound_CreateAtEntity("DunbatEngineStart", "02_05_theta/sfx/dunbat/engine/start", "Dunbat");
			Map_AddTimer("DunbatEngineLoopStart", 0.5f, "DunbatEngineLoopStart");
			cLux_AddDebugMessage("Dunbat Engine Sound Started");
			mbDunbatAudioEngineOn = true;
		}
	}
	
	void DunbatEngineLoopStart(const tString &in asTimer)
	{
		Sound_CreateAtEntity("DunbatEngineLoop", "02_05_theta/sfx/dunbat/engine/loop", "Dunbat", 0.5f, false, 1.0f);
	}
	
	void DunbatEngineLoopStop(float afFadeTime=6.0f)
	{
		if(mbDunbatAudioEngineOn==true)
		{
			if(Sound_Exists("DunbatEngineStart"))
			{
				Sound_Stop("DunbatEngineStart", 0.5f);
			}
			Sound_Stop("DunbatEngineLoop", afFadeTime);
			mbDunbatAudioEngineOn = false;
		}
	}
	
	void StartDunbatAlarm(int mlStage)
	{
		if(mlStage==1)
		{
			Map_AddTimer("DunbatAlarmStage1",2.0f, "DunbatAlarm");
			Sound_CreateAtEntity("DunbatAlarmStage1", "02_05_theta/sfx/dunbat/dunbat_alarm", "Player");
			Sound_CreateAtEntity("DunbatBeepPanelLoop", "02_05_theta/sfx/dunbat/beeps/dunbat_panel_alarm_loop", "DunbatConsoleLamp");
		}
		
		if(mlStage==2)
		{
			Sound_CreateAtEntity("DunbatAlarmStage2", "02_05_theta/sfx/dunbat/dunbat_alarm_fast", "Player");
		}
	}
	
	void DunbatAlarm(const tString &in asTimer)
	{
		if(asTimer=="DunbatAlarmStage1")
		{
			Map_AddTimer("DunbatAlarmStage1",2.0f, "DunbatAlarm");
			Sound_CreateAtEntity("DunbatAlarmStage1", "02_05_theta/sfx/dunbat/dunbat_alarm", "Player");
		}
	}
	
	void StopDunbatAlarm()
	{
		Map_RemoveTimer("DunbatAlarmStage1");
		Map_RemoveTimer("DunbatAlarmStage2");
		
		Sound_Stop("DunbatAlarmStage2", 0.25f);
		Sound_Stop("DunbatBeepPanelLoop", 0.25f);
	}
	
			
	//------------------------------------------------------
	
	//}End Dunbat audio
			
	//------------------------------------------------------
	
	//} END AUDIO
	
	//-------------------------------------------------------
	
	///////////////////////////
	// Mirror
	///////////////////////////
	
	//-------------------------------------------------------
	
	bool mbLookedInMirrorBefore = false;
	tString msMirror="";
	tString msMirrorInteract="";
	
	void SetupMirror()
	{
		mbLookedInMirrorBefore = cScript_GetGlobalVarBool("PlayedMirror");
		
		//cConfigFile@ config = cLux_GetUserConfig();
		//bool bWorldReflectionEnabled = config.GetBool("Graphics", "WorldReflection", true);
		//Entity_SetActive("MirrorZoom*", bWorldReflectionEnabled);
		
		Entity_SetActive("Mirror1",false);
		Entity_SetActive("Mirror2",false);
		Entity_SetActive("Mirror3",false);
		Entity_SetActive("Mirror4",false);
		
		// Turn off sky illum in reflection to avoid a glitch
		Entity_SetReflectionVisibility("02_05_beach_sky_1",false,true);
		Entity_SetReflectionVisibility("led_display_small_1",false,true);
	}
	
	//-------------------------------------------------------
	
	void OnMirrorUse(const tString &in asEntity)
	{
		msMirror = Entity_GetVarString(asEntity,"");
		msMirrorInteract = asEntity;
		Sequence_Mirror("");
	}
	
	//-------------------------------------------------------
	
	bool mbReflectionEnabled = false;
	cSequenceStatesData mSeqMirror;
	void Sequence_Mirror(const tString& in asName)
	{
		Sequence_Begin("Sequence_Mirror", mSeqMirror);
		
		if (Sequence_DoStepAndWait(0.5f))
		{
			mbBanterEnabled = false;
			
			cConfigFile@ config = cLux_GetUserConfig();
			mbReflectionEnabled = config.GetBool("Graphics", "WorldReflection", true);
			if (!mbReflectionEnabled)
			{
				cLux_AddDebugMessage("Setting reflection on temporarily");
				config.SetBool("Graphics", "WorldReflection", true);
				cLux_ApplyUserConfig();
			}
				
			Entity_SetActive(msMirror,true);
					
			Entity_SetActive(msMirrorInteract,false);
			
			Entity_SetReflectionVisibility("PlayerBody", true, false);
			Entity_SetReflectionVisibility("PlayerBodyLamp", true, false);
			Billboard_SetReflectionVisibility("PlayerBody_Billboard*",true,false);
	
			Entity_SetEffectsActive("PlayerBodyLamp", Player_GetFlashlightActive(),false);
			
			tString sAnimPos = msMirror+"_AnimPos";
			if (mbLookedInMirrorBefore)
				sAnimPos+="Alt";
			
			PlayerHands_SetUseCustomPosition(true);
			PlayerHands_SetCustomPositionFromEntity(sAnimPos);
			PlayerHands_SetUseCustomRotation(true);	
			PlayerHands_SetCustomRotationFromEntity(sAnimPos);
			
			tString sAnim = "event_look_in_mirror_long_arms";
			if (mbLookedInMirrorBefore)
				sAnim = "event_look_in_mirror_short_arms";
				
			PlayerHands_PlayAnimation(sAnim, false, true, 1.0f);		
			PlayerHands_SetAnimationOverCallback("Mirror_OnHandsAnimComplete");
			PlayerHands_AttachCameraToSocket("Socket_Camera", 1.0f, "", true,true,1.0f);
			
			tString sAnimBody = "event_look_in_mirror_long_body";
			if (mbLookedInMirrorBefore)
				sAnimBody = "event_look_in_mirror_short_body";
			Entity_SetActive("PlayerBody",true);
			Entity_SetActive("PlayerBodyLamp",true);
			Entity_SetAnimationRelativeTimePosition("PlayerBody",sAnimBody,0);
			Entity_PlayAnimation("PlayerBody",sAnimBody,0.0f,false,false);
			Entity_SetAnimationPaused("PlayerBody",sAnimBody,true);
			
			iLuxEntity@ pBody = Map_GetEntity("PlayerBody");
			
			iLuxEntity@ pRoot = Map_GetEntity(sAnimPos);
			pBody.SetMatrix(pRoot.GetMatrix());
			
			cVector3f vFinalPos = pRoot.GetPosition();
			cVector3f vStartPos = Map_GetEntity("Camera").GetPosition();
			pBody.SetPosition(vStartPos);
			
			float fSpeed = (vFinalPos-vStartPos).Length()*1.25f;
			cLuxProp@ pBodyProp = cLux_ToProp(pBody);
			pBodyProp.MoveLinearTo(vFinalPos,1000.0f,fSpeed,0.0f,true,"");
		}
		else if (Sequence_DoStepAndWait(0.5f))
		{
			Prop_SetActiveAndFade(msMirror+"_Cover",false,2.0f);
		}
		else if (Sequence_DoStepAndPause(0.0f))
		{
			tString sAnim = "event_look_in_mirror_long_body";
			if (mbLookedInMirrorBefore)
				sAnim = "event_look_in_mirror_short_body";

			Entity_SetAnimationPaused("PlayerBody",sAnim,false);
			
			if (!mbLookedInMirrorBefore)
				Depth_Audio_MirrorEvent();
			Sound_FadeGlobalVolume(0.4f, 4.0f, eSoundEntryType_World);
		}
		else if (Sequence_DoStepAndWait(1.0f))
		{
			Entity_AttachToEntity("PlayerBody","Camera","",false);
			Prop_SetActiveAndFade(msMirror+"_Cover",true,1.0f);
			mbLookedInMirrorBefore = true;
			cScript_SetGlobalVarBool("PlayedMirror",true);
		}
		else if (Sequence_DoStepAndContinue())
		{
			mbBanterEnabled = true;
			
			Entity_SetActive("PlayerBody",false);	
			Entity_SetActive("PlayerBodyLamp",false);
			Entity_RemoveEntityAttachment("PlayerBody");
			Entity_SetActive(msMirrorInteract,true);	
			PlayerHands_SetUseCustomPosition(false);
			PlayerHands_SetUseCustomPosition(false);
			
			Entity_SetActive(msMirror,false);
			
			if (!mbReflectionEnabled)
			{
				cConfigFile@ config = cLux_GetUserConfig();
				config.SetBool("Graphics", "WorldReflection", mbReflectionEnabled);
				cLux_ApplyUserConfig();
			}
		}
		Sequence_End();
	}
	
	//-------------------------------------------------------
	
	void Mirror_OnHandsAnimComplete(const tString &in asAnimName)
	{
		SequenceStates_Resume("Sequence_Mirror");
		Sound_FadeGlobalVolume(1.0f, 4.0f, eSoundEntryType_World);
		Map_AddTimer("StartAmbient", cMath_RandRectf(6.0f, 10.0f), "AmbientMusicHandler");
	}
	
	bool OnCollideBathroom(const tString &in asParent, const tString &in asChild, int alState)
	{
		if(alState==1)
		{
			if (mbLookedInMirrorBefore==false)
			{
				Map_AddTimer("StopAmbientMusic", 2.0f, "AmbientMusicHandler");
			}
		}
		else
		{
			if (mbLookedInMirrorBefore==false)
			{
				Map_AddTimer("StartAmbient", cMath_RandRectf(6.0f, 10.0f), "AmbientMusicHandler");
			}
		}
		return true;
	}
	
	//-------------------------------------------------------
    
	float mfStaircaseSpeed = 0.0f;
	float mfStaircaseVolume = 0.0f;
	cVector3f vStaircaseVel;
	
	void InteractStairs(const tString &in asEntity)
	{
		Sound_CreateAtEntity("StairsRolling", "physics/metal/metal_stairs/scrape", asEntity, 0.0f, false, 0.0f);
		
		Map_AddTimer("RollingStaircaseSound", 0.15f, "RollingStaircaseSound");
		Map_RemoveTimer("StopStaircaseSound");
	}
	
	void RollingStaircaseSound(const tString &in asTimer)
	{
		Map_AddTimer("RollingStaircaseSound", 0.15f, "RollingStaircaseSound");
		
		vStaircaseVel = Map_GetEntity("RollingStaircase").GetMainBody().GetLinearVelocity();
		vStaircaseVel.y = 0;
		mfStaircaseSpeed = vStaircaseVel.Length();
		
		mfStaircaseVolume = mfStaircaseSpeed/2;
		
		//cLux_AddDebugMessage("Staircase Speed is "+mfStaircaseSpeed);
		//cLux_AddDebugMessage("Staircase volume is "+mfStaircaseVolume);
		
		Sound_Fade("StairsRolling", mfStaircaseVolume, 0.25f);
		
		if(Map_GetEntity("RollingStaircase").IsInteractedWith()==false)
		{
			Map_AddTimer("StopStaircaseSound", 3.0f, "StopStaircaseSound");
			//cLux_AddDebugMessage("Staircase no longer interacted with, stopping sound timer started");
		}
	}
	
	void StopStaircaseSound(const tString &in asTimer)
	{
		Sound_Stop("StairsRolling", 2.0f);
		Map_RemoveTimer("RollingStaircaseSound");
		Map_RemoveTimer("StopStaircaseSound");
		//cLux_AddDebugMessage("Staircase Rolling Sound Stopped");
	}
    	
	//-------------------------------------------------------
    
    
}